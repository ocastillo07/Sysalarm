{///////////////////////////// MODIFICACIONES //////////////////////////////////
2012/07/19 dalyla correo a proveedor en operacion reporte
2011/07/19 dalyla correccion en NC de FE
2011/07/17 dalyla quitar comitas dobles en sector between "" and ""
2012/07/17 dalyla Parametro de impresion o no en FE
2012/07/10 dalyla correcion de redondeo con IEPs se agrego cadena variable
2012/07/10 dalyla correcion de redondeo con IEPs
2012/06/29 dalyla actualizacion FE version X.2
2012/06/08 dalyla que se muestren todos los estatus en EstatusCliente, mensaje rojo
2012/05/23 dalyla pagos x linea  corr de EQUIPO - VINOS Y LEGAL
2012/05/23 dalyla Factura Electronica FXComprobante egreso en NC/ingreso en FAC
2012/05/23 dalyla pagos x linea add VINOS Y LEGAL
2012/04/30 dalyla validacion de misc 12 para otro formato (serie   [V])
2012/03/26 dalyla se quito validacion de dos primeros digitos de la homoclave
2012/03/13 dalyla agregar funcion ufh
2011/12/20 dalyla get familia de ip 
2011/10/19 dalyla quitar el numtolet y poner funcion letras de mysql
2011/06/01 dalyla correcion de rep det nc auditoria por las series
2011/05/11 dalyla ConectadaServidor = true     ya que no se usa la sync
2011/04/21 dalyla correcion  de join  en notas de credito en creacion FE
2011/03/24 dalyla query de sqlgeneral4 en auditoria de ant de saldos
2011/02/21 dalyla RepDiarioVentas poner en 0 los cancelados
2011/02/02 dalyla nc con serie FE
2011/01/11 dalyla redondeo de totales en FE
--------------------------------------------------------------------------------
2010/12/13 dalyla correcion de suma de ivas en RepAnalisisVentas Vtas - NC
2010/11/03 dalila auditoria de pagos por linea tenga la qry sql3
2010/09/24 Oscar agregue un resumen incluyendo las lineas al pagosxlinea
2010/08/24 Oscar modificacion al reportes de RepAbonosXCuenta
2010/05/06 dalyla factura electronica pesos y dolares quitar el responsable y puesto
2010/05/05 dalyla correccion en repnotascredito en exclientes join by idnocliente
2010/04/28 dalyla correccion de regresar a remision busqueda por remifact y no por pagosclientes
2010/04/12 Oscar modificacion en el reporteventasmensuales se quito el if dlls>0
2010/03/25 Oscar agrege funcion RGBToColor
2010/03/23 dalyla Version, año u y numero de aprobacion por serie en FE  y
                  TipoCambio totalpesos cuando es en dolares
2010/02/16 dalyla Correcion de Factura electronica al revolver articulos de dif monedas
--------------------------------------------------------------------------------
2009/06/13 DALYLA FE FACTURAR EN DOLARES
2009/06/08 dalyla arreglo de parcializacion quincenal sea 15 y ultimo
2009/06/09 dalyla quitar el enter del concepto de pedido FE
2009/06/08 dalyla arreglo de parcializacion por mes quinc, y sem
2009/06/05 dalyla se agrego lo de la #FE
2009/05/26 dalyla querys de SQL
2009/05/21 dalyla inserta cliente guarde bien el estado en clientes
2009/05/19 dalyla no cobrar a cuentas con abogado
2009/05/08 dalyla funcion para saber si esta corriendo un servicio
2009-04-22 funcion copia todo, algo de codigo extra en insertacliente, buro credito
           y sincronizacion
2009-03-30 Oscar actualizarsaldocliente codigo comentado
2009-03-30 Oscar Reporte diarioVentas agregar las canceladas
2009-03-30 Oscar Modificacion Ventas

2009/03/18 dalyla pagos por linea sabado se regrese a viernes y no jueves
2009/03/13 dalyla al cambiar el contrato revise que sea monitoreo, Act/SaldoCTe
2009/02/06 Oscar Repanalitico estatus 1
2009/01/31 Oscar RepFacturasCanceladas
2009/01/27 Oscar RepDiarioVentas (incluir FAC,CAN)
2009/01/26 dalyla factura electronica cambios
2009/01/21 dalyla creacion de SentenceCase y TitleCase
2009/01/15 Oscar nulos en apcambios
2008/01/06 cambios en apcambios  max id
2009/01/02 Oscar Modificacion reporte facturas canceladas idfact
--------------------------------------------------------------------------------
2008/12/10 dalyla codigos referencia banorte
2008/12/08 oscar generarpedidoscom rentacom01..rentacom12
2008/12/04 oscar comunicador
2008/12/04 dalyla codigo de barras oxxo
2008/11/25 oscar comunicadores
2008/11/03 dalyla diariovtas y NC nombre cf en vez de c
2008/10/10 dalyla inventariable
2008/09/24 dalyla borrar temporales
2008/09/22-23 dalyla Rep Notas de credito agregar columna del IVa 15%
2008/09/19 dalyla Diario Vtas, Anal. Vtas agregar columna del IVa 15%
2008/09/17 dalyla buscar los reportes de auditoria que les faltaba el piva (NC)
2008/09/10 dalyla pivA en pagos x linea FALTA EL PIVA EN NOTAS DE CREDITO
2008/08/04 dalyla primero mes actual
2008/07/28 dalyla no regresar cancelacion si tiene requi y no borrar requi en cancelacion
2008/07/25 dalyla regresa cancelacion
2008/07/24 Cambios sincronizacion
2008/07/22 dalyla referencia bancaria agregue ss2 para formato especial para cul
2008/07/14 dalyla referencia banacaria por configuraciones
2008/06/25-30 dalyla cambios por inventario
2008/06/18 dalyla gragbar precio de articulos en compra
2008/06/04 dalyla antiguedad de saldos campos de mas y de menos -_-
2008/06/04 oscar agrege dos procedures llenarcuantas y llenarreminom (Proc REMISIONES)
2008/06/04 dalyla correcion en antiguedad de saldos
2008-05-24 edwin DividirCadenaPorDelimitador_Split
2008/05/20 dalyla referencia Bancaria
2008-05-17 edwin CalculaCostoPromedio una variable mas _entrada para que aplique en compras y entradas y no en los demas procesos.
2008/05/17 edwin Modificacion a CalculaCostoPromedio.
2008/05/12 edwin deshabilite en cancelapedido CalculaCostoPromedio.
2008/05/11 oscar modifique cerrareventoportunidad
2008/04/29 dalyla estatus 6 en diario facturado y analitico
2008/04/14 dalyla eventos positivos
2008/04/11 dalyla ventas mensuales con tothrscom
2008/04/08 dalyla DiarioVentas remisionado2
2008/04/04 dalyla ClienteNombre en Diario de Ventas
2008/03/04 dalyla agregar nopedidos no nc en analisis y piva en estas tablas
2008/02/28 dalyla zona horaria ok
2008/02/08 dalyla function Derechos(campo:string):Boolean; derechos para usuario en logged in
2008/02/06 dalyla Permitir reubicacion en RepVentasMensuales
2008/01/24 dalyla CargaCombo comentario de falta "algo"
2008/01/22 Dalyla Booltoint
2008/01/15 Dalyla CorreoUsuarios agregue area
2008/01/04 Dalila Datos email antes de enviar email (sendmail)
2008/01/04 Dalila RepVentasMensuales grabar ano en ves de year("'+datetostr(date)+'")
2008/01/03 Dalyla RepAntSaldos subquery en DesAplic para que no ponga dos veces elpedido
--------------------------------------------------------------------------------
2007/12/24 Dalyla ComboMeses;
2007/12/10 Dalila Ventas Mensuales agregue la sumatoria de cctv
2007/12/06 Dalila Calcula costo promedio
2007/12/04 Dalila regresa apartado instalacion
2007/12/04 Dalila llama en Cancela pedido Funcion Calcula Costo promedio
2007/12/04 Dalila Funcion Calcula Costo promedio
2007/11/15 Edwin Procedure de abonos x cuenta.
2007/11/15 Dalila  Agregue funcion idmes(mes:string):integer;
2007/11/15 Ignacio Query3 del Select de Ventas Mensuales
2007/11/14 EDWIN modificaicon a reporte de pagosXlinea, primero y segundo reporte.
2007/11/09 Dalila Correccion de RepNC ademas function RecargosMonitoreo:string;
                  function InteresesEquipo:string; function Reconexion:string;
2007/11/05 Dalila fecha vence de parcializar
2007/30/10 Oscar  ValidarDatosOportCliente  y CerrarEventoOportunidad
2007/10/10 Edwin  enviar email
}///////////////////////////////////////////////////////////////////////////////
unit Urecursos;

interface
uses  Clipbrd, Windows, Messages, DateUtils, SysUtils, StrUtils, Variants, Classes,
  Graphics, Controls, Forms, Dialogs, RzTabs, RzButton, StdCtrls, RzLabel, Mask,
  RzEdit, RzDBEdit, ExtCtrls, RzPanel, DB, MemDS, DBAccess, MyAccess, DBCtrls,
  RzDBCmbo,RzCmboBx, RzDBBnEd, Buttons, RzRadGrp, RzDBRGrp, ComCtrls, RzDBNav,
  RzRadChk, RzDBChk, RzBtnEdt, RzSpnEdt, ToolWin,ActnList,IdComponent, IdMessage,
  IdTCPConnection, IdTCPClient, IdMessageClient, IdSMTP, IdBaseComponent, nrcommtapi,
  nrclasses, nrcomm, nrcommbox, RpRave, RpDefine, RpCon, RpConDS, RpBase, RpSystem,
  LMDCustomComponent, LMDIniCtrl, RzShellDialogs, RzLaunch, pptypes, math, Registry,
  Winsock, ShellApi, WinSvc, ADODB;
     {
type
  TDummy = class
  public
  procedure tapiRing(Com: TObject; var Ignore: Boolean);
  end;
      }
type TArregloSemanal =  Array [0..4,0..1] of integer;
const
meses: array[1..12] of string = ('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre' , 'Diciembre');
dias: array[1..7] of string = ('Lunes','Martes','Miercoles','Jueves','Viernes','Sabado','Domingo');
grupoIn:array[1..3] of string =('and too.idunidadnegocio=1','and too.nombre in(''AMPLIACION'',''REUBICACION'',''CAMBIO DE CONTROL'',''REINSTALACION'') ', 'and too.nombre in(''ENLACE'',''CONEXION'',''RECONEXION'') ');

var
    ResultData: TmyQuery;
    FDGral : TFontDialog;
    chtecla : char;
   {datos de configuracion de correo}
    SmtpServerUser,SmtpServerPassword,SmtpServerName, SmptServerNameInterno, tipoAplicacion,_gConcepto : string;
    SmtpServerPort,RingMonitoreo,gIntRegresa : integer;
   {datos para el marcado telefonico}
    tapis,tapis2:tnrcommtapi;
    cboTelNormal,cboTelCel:TnrDeviceBox;
    telefonos : array of string;
    telefonosNombre : array of string;
    telefonosNivel : array of string;
    vector : array of string;
    EndOfString:char = #13;
    InicializarModem:string  = 'ATS7=60S19=0M1&M4&K1&H1&R2&I0B0X4';
    marcando, ConectaModems : boolean;
    callstatus,i,IdAlarmaEnAtencion,TipoLlamada,j : integer; //tipo llamada = 1 es de monitoreo......
    formaproviene, correoproviene, TipoLinea,idServicioGral,idClienteGral,ubicacion : String;
    IVA_Configuraciones:double;

//    dummy:TDummy;

//sync
function IsNetworkAlive(flags : LPDWORD) : boolean; stdcall; external 'sensapi.dll';
function ShowNetworkStatus:boolean;
function ConectadaServidor:boolean;
function GetFamilyAddress(ipaddress:string):string;
procedure DatosConexion;

{ FUNCTIONS }
function ActualUserId:Integer;
function CodigoUsuario(valor:integer):string;
function CorreoUsuarios(condicion:string):String;
function ActualizarSaldoCliente(idcliente,idpedido,fecha:string):integer;
function BuscaCliente(query:TMyQuery):integer;
function BuscaForma(nombre: string):integer;
function CargaGrupo(sql,error:string;radio:trzradiogroup;check:trzcheckgroup;sqlgeneral:tmyquery):integer;
function CerrarPantalla(Var tabla:TMyTable;btncancelar,btnalta,btnmodificar:TRzBitBtn):boolean;
function ClienteNombre(tablanombre:string):string;
function ConectaServidor(ServerConec:TMyConnection;memo:tmemo) : integer;
function CorreoGerentes:String;
function CuentaLibre : integer;
function CopiaTodo(Origen,Destino:String):LongInt;
function DiasHabilesMes(ano, mes:integer):integer;
function DiasHabilesMesAFecha(fecha:tdate):integer;
function DiasHabiles(fecha1, fecha2:TDate):integer;
function Pascua(Anio: word): TDateTime;
function DiaFestivo(fecha:TDate):boolean;
function DiasMes(m:string):integer;
function PrimeroMesActual : tdate;
function HoraLarga(hora:ttime):string;
function HoraServidor:Ttime;

function UFH(tabla:TDataSet):string;

function ExisteNombre(Edit:TrzDBEdit;sqltext:string;query:tmyquery):integer;
function FechaServidor:Tdate;
function GeneraBoletas(idcliente,idpedido:integer;fechavence,costo:string):string;
function GeneraBoletasAnuales(idcliente:integer;fecha:string):string;
function GetIVA:Double;
function GetUserWindows : String;
function InicializarModems:bool;
function OtrasSalidas(altas : boolean;datos : TDataSource;aux : TMyQuery) : integer;
function PantallasVisibles(s:tscreen):integer;
function querys(const consulta:string;const actualizacion:integer;Query:TMyQuery):integer;overload;
function querys2(const consulta:string;const actualizacion:integer;Query:TMyQuery):integer;
function querys(const consulta:string;const actualizacion:integer;Query:TADOQuery):integer;overload;
function QuitaCaracteres(Cadena,Caracter:string):double;
function QueWindows:string;
function RegresaExistencias(idpedido,cod_cve : string;alta : boolean;DsRejilla : TDataSource) : integer;
function send_email(const origen,contestar,address,asunto:string;const adjuntos,cuerpo:tmemo;hostCorreo:integer):integer;

function ServiceGetStatus(  sMachine, sService : string ) : DWord;
function ServiceRunning( sMachine, sService : string ) : boolean;

function UsuarioNombre(tablanombre:string):string;
function ValidaNumeros(Caracter:char;punto:boolean):char;
function ValidaPunto(Cadena:string;Caracter:char):char;
function VerificarMarcacion(idmaq:string;conexion:TMyConnection):integer;
function VerificarReporte(dfecha1,dfecha2:string):boolean;
function CerrarEventoOportunidad(combo,evento,eventosvista,oportunidad:string):integer;
function ValidarDatosOportCliente(idoportunidad:string;ban:boolean):boolean;
function RecargosMonitoreo:string;
function InteresesEquipo:string;
function Reconexion:string;
function idmes(mes:string):integer;
function ValidarEqsenlace(idoportunidad:string):boolean;
function SaldoCliente(idcliente:string):double;
function BloqueadoPorSaldoCobranza(idcliente:string):bool;
function SaldoClienteMonitoreo(idcliente:string):double;
function SaldoClienteMonitoreoVencido(idcliente:string):double;
function CountMonitoreoVencidos(idcliente:string):bool;
function BooltoInt(Bool:Boolean):Integer;
//function Derechos(campo:string):Boolean;
function UsuarioPropiedad(campo, idusuario:string):String;
function RegresaMesLetra(mes:integer):string;
function BuscarCostoPromedioSistema:boolean;
function ValidarRFC(rfc : string; simsg : boolean = true):boolean;

function CalNumVerificador(Numero : string; cuenta:boolean) : string;
function CalNumVerificador21(Numero : string) : string;
function CodBarrasBBVA(idcliente, idpedido, saldo, fechavence:string):string;
function CodBarrasOxxo(idcliente, idpedido, saldo, fechavence:string):string;
function CodBarrasBanorte(idcliente, idpedido, saldo, fechavence:string):string;
function CodBarrasBanamex(idcliente, idpedido, saldo, fechavence:string):string;
function ReferenciaBanco(idcliente, idpedido:string):string;

function OcurrenciaWord(const str: string; const substr: string): integer;
function checarcorreo(email: string): Boolean;
function GetConfiguraciones(Concepto:string; valor:boolean=true):string;
function DerechosSys(derecho:string):boolean;
function strinvector(cadena:string):boolean;
function CuentaApartada : integer;

function ValidaCancelacionMensualidad(idpedido, idcliente:string):boolean;
function generarpedidosCom(cliente:string;nomeses:integer; valida:boolean):boolean;
function generarpedidosPol(cliente:string;nomeses:integer):boolean;

function SentenceCase(cadena:string):string;
function TitleCase(cadena:string):string;

function ProgramsFileDir:string;
function RGBToColor(sColor : string) : TColor;
function ValidarCelularSMS(tel:string) :string;
function ExecuteCommand(const command: string): boolean;
function MergeFiles(FileName1, FileName2, FileNameOut : string): boolean;
function WinExecAndWait32(const DosCommand: string;
  ShowWindow, GiveUpTimeOutSecs: Word; out textOutput: string): DWord;


{ PROCEDURES }
procedure commadelimitedtostrarray(cadena:string); //vector:array of string);
procedure AuditoriaAnalisisVentas(mes,ano,tipo,TipoImpresion:string);
procedure AuditoriaAntiguedadSaldos(mes,ano,TipoImpresion:string;factura:boolean);
procedure AuditoriaDiarioVentas(mes,ano,TipoImpresion:string);
procedure AuditoriaFacturasCanceladas(mes,ano,TipoImpresion:string);
procedure AuditoriaNotasCredito(periodo,TipoImpresion,tipoReporte:string);
procedure AuditoriaVentasMensuales(mes,ano,TipoImpresion:string);
procedure actualizarCobranza(fecha1,fecha2,campo:string);
procedure apcambios(idtipo, clave, tabla, pantalla:string);
procedure AuditoriaPagosXLinea(periodo,TipoImpresion:string);
procedure BorrarTablasPagosTemp;
procedure bpcambios(tabla, clave, idtipo:string);
procedure BuscaPendientesCliente(Msg,NoMsg,consulta:string;Etiqueta:trzlabel);
procedure CargaCombo(sql,tabla:string;combo : TRzComboBox);
procedure CargaCombo2(sql, campo, valor:string;combo : TRzComboBox);overload;
procedure CargaCombo2(sql, campo, valor:string;combo : TRzDBComboBox);overload;
procedure CargaComboConItem(sql, campo, valor,item:string;combo : TRzComboBox);
procedure CancelaPedido(idpedido : string);
procedure CambiaFont(REMemo : TRzRichEdit);
procedure CancelarLlamada;
procedure colgar;
procedure CerrarVentanaMensaje;
procedure ConcentradoCobranza(fecha,tipo_actualizacion:string);
procedure DatosEmail(Sqlgeneral:TMyQuery);
procedure EstatusCliente(cliente:string;sql:TMyQuery);
procedure concentrado(desde,cuenta,hasta:integer;year:string);
procedure Marcado(SqlTelefonos,SqlAlarmas :TMyQuery;conexion:TMyConnection);
procedure F10(SqlTelefonos,SqlAlarmas :TMyQuery;conexion:TMyConnection); //discar;
procedure F11(SqlTelefonos,SqlAlarmas :TMyQuery;conexion:TMyConnection;x:integer); //rediscar
procedure SiContesto(SqlTelefonos,SqlAlarmas:TMyQuery;conexion:TMyConnection);
procedure NoContesto(SqlTelefonos,SqlAlarmas:TMyQuery;conexion:TMyConnection);
procedure BuscarPanelTel(valor:boolean);
procedure LiberarModems;
procedure TotalAlarmas(const tipo,operacion:string;cantidad:variant;query:TMyQuery);
procedure OperacionReporte(const NombreReporte,Asunto,TipoImpresion:string;TipoReporteador:integer; correo:string='U');
procedure ObtenerCorreo(forma, correo:string);
procedure RepVentasMensuales(sqlgeneral,sqlgeneral2,sqlgeneral3:TMyQuery;f1,f2,TipoImpresion,orden:string;Guardar:boolean);
procedure RepVentasMensuales2(const nombre:string;sqlgeneral2,sqlgeneral3:TMyQuery);
procedure InicializaTelefonos(SqlTelefonos:TMyQuery;conexion:TMyConnection);
procedure RepDiarioVentas(sqlgeneral,sqlgeneral2:TMyQuery;ckbRsimple:TRzCheckBox;cbomovimientos,cbosector1,cbosector2:TRzComboBox;chkgfolios:TRzCheckGroup;TipoImpresion,UN1,UN2,dfecha1,dfecha2:string;Guardar:boolean);
procedure RepAnalisisVentas(sqlgeneral,sqlgeneral2:TMyQuery;gbanalisisvta:TRzRadioGroup;TipoImpresion,dfecha1,dfecha2:string;Guardar:boolean);
procedure RepFacturasCanceladas(sqlgeneral2,sqlgeneral3:TMyQuery;TipoImpresion,dfecha1,dfecha2:string;Guardar:boolean);
procedure RepNotasCredito(rbstnodetallado,rbstdetallado,Guardar:boolean;dfecha1,dfecha2,TipoImpresion:string);
procedure RepAntiguedadSaldos(tReporte:integer;sqlgeneral,sqlgeneral2,sqlgeneral3:TMyQuery;ckbnormales,ckbforzosos,chkbcancelados,ckbabogado:TRzCheckBox;cbomovimientos,cbosector1,cbosector2:TRzComboBox;TipoImpresion,UN1,UN2,dfecha1,dfecha2:string;Guardar,chkDesAplicar,SinEnlance:boolean);
procedure InsertaCliente(NumOportunidad,NumCta:string);
procedure Parcializa(saldo,TipoCambio:double;fecha:tdate;idpedido,cantpart,idcliente:integer;frecuencia:string);
procedure RepPagosXLinea(const dfecha1,dfecha2,edusuario1,edusuario2,TipoImpresion:string;ckbtodos,Guardar, anualidad:boolean);
procedure EventosPositivosOxxos(dfecha1,dfecha2:string);
procedure RepVentasMensualesTotalesXOrigen(sqlgeneral,sqlgeneral2,sqlgeneral3:TMyQuery;f1,f2,TipoImpresion:string);
procedure MarcarTelefono(telefono:string);
procedure ColgarTelefono;
procedure BusquedaSectoresVencidos(const TipoBusqueda:integer;campo,SiReporte,tabla,abogado,sector1,sector2,idunidad1,idunidad2,desde,hasta:string;ckbabogado,ckbforzosos,ckbnormales,chkSinEnlace,ckbbloqueados,chkSinCuentasReporte:bool);
procedure Actualizaclientes(NumOportunidad,NumCta:string);
procedure RepAbonosXCuenta(cuenta1,cuenta2,ano,TipoImpresion:string;actualizar:bool);
procedure RepAbonosXMonitoreo(rango,ano,TipoImpresion:string;actualizar:bool);
procedure GenerarInteresMonitoreo;
procedure GenerarInteresesEquipo;
procedure CalculaCostoPromedio(NuevoCosto:Double;_entrada, CodCve, operacion:string; CantidadEntrada:Integer);
procedure RepFindeTurno(dia,turno,TipoImpresion:string);
procedure ComboMeses(combo:TRzComboBox);overload;
procedure ComboMeses(combo:TComboBox);overload;
procedure RepClientesDeudores(meses,ano,TipoImpresion:string);
procedure CargaComboSemana(ano,mes:string;combo : TRzComboBox);
procedure RepEstandaresVentas(fecha1,fecha2:string;meta:integer;TipoImpresion:string);
procedure ProcesoEstandaresCobranza(dia:string);
procedure RepEstatusPedidos(rmes,mes,restatus,ano,TipoImpresion:string);
procedure RegresaArraySemanasMes(tipo:string;fecha:tdatetime;var arreglo : TArregloSemanal);
procedure InicializaTArregloSemanal(x,y:integer;var arreglo : TArregloSemanal);
procedure RegresarAPedido(idpedido,idcliente:string);
procedure ComboYear(combo:TComboBox);overload;
procedure ComboYear(combo:TRzComboBox);overload;
procedure DividirCadenaPorDelimitador_Split(const Delimiter: Char;Input: string;const Strings: TStrings);
procedure llenarcuentasActivas;
procedure llenarRemiMon;
procedure RegresaCancelacion(sqlgeneral:tmyquery; idmovcardex:integer; iddoc, idpedido:string);
procedure eliminarpedidosCom(cliente:string; tipo:string);
procedure saldarcontratocortesia(cliente,pedido,fechacreacion,fechavence:string);
procedure LiberarMemoria;
procedure ComboContratos(combo:TRzComboBox);
procedure Split(const Delimiter: Char; Input: string; const Strings: TStrings) ;



//#FE
//function FacturaElectronica(idcliente, idpedido, Estado, TipoCFD:string; directo:boolean):string;
function FacturaElectronica(idcliente, idpedido, formapago, Estado, TipoCFD:string; directo:boolean; pesos:boolean = true; imprimir :boolean = true):string;
function FacturaElectronicaDlls(idcliente, idpedido, formapago, Estado, TipoCFD:string; directo:boolean; pesos: boolean = false; imprimir:boolean = true):string;
function CancelarFacturaElectronica(factura:string; directo:boolean):string;
procedure RegresarARemision(idpedido, idcliente:string);
function ValidaFacturaElectronica(lotes:boolean; path, serie, folio:string):integer;
procedure SeparaSerieFolio(const idfactura:string; var Serie, Folio:string);
function IsNumeric(const S: string): Boolean;

implementation

uses Udm, Uprincipal, Ubusquedas, UMensajeCliente, Udmrep, Umonitoreo, Umensaje,
  UEnviarCorreo, Ureportes, Utel, Ucontactos, UDatosFactOPort, Uprospectos,
  URemiFac, Uubicacion, Uremisionar_boletas, Udmsincronizar;


procedure DividirCadenaPorDelimitador_Split
   (const Delimiter: Char;
    Input: string;
    const Strings: TStrings);
begin
   Assert(Assigned(Strings));
   Strings.Clear;
   Strings.Delimiter := Delimiter;
   Strings.DelimitedText := Input;
end;

function RegresaMesLetra(mes:integer):string;
begin
    result := meses[mes];
end;

function RegresaDiaLunesMes(dia,LD:integer;fecha:tdatetime):integer;
var d,c:integer;
d1:tdatetime;
begin
d:= 0;
c:=1;
  while (d<> LD)   do
   begin
      while (dia <  DaysInMonth(fecha)) do
         begin
            dia :=  dia +c;
            d1 := fecha +(dia-1);

            if( DayOfWeek(d1) = LD) then
                break;
            d1 := fecha;
         end;
         d:= LD;
   end;
   result := dia;
end;


procedure InicializaTArregloSemanal(x,y:integer;var arreglo : TArregloSemanal);
begin
 for x := 0 to High(arreglo) do
   for y:=0 to 1 do
       arreglo[x,y] := 0;
end;

procedure RegresaArraySemanasMes(tipo:string;fecha:tdatetime;var arreglo : TArregloSemanal);
var dia,x,y,DiaSemana:integer;
f1:tdatetime;
//arreglo : Array[0..4,0..1] of integer;
begin
x:=0;y:=0;

if(tipo='DS')
    then DiaSemana := 7
    else DiaSemana := 2;

f1 := strtodate(formatdatetime('yyyy"/"mm"/"01',fecha));

InicializaTArregloSemanal(x,y,arreglo);

  x:=0;y:=0;dia:=1;
  arreglo[x,y] := 1;
  y:=1;

   while (dia <  DaysInMonth(f1)) do
     begin
         if(y=0) then
         begin
             dia := RegresaDiaLunesMes(dia,1,f1);
             arreglo[x,y] := dia;
             y := 1;
         end else
           begin
             dia := RegresaDiaLunesMes(dia,DiaSemana,f1);
             arreglo[x,y] := dia;
             y := 0;
             x:=x+1;
         end;
     end;         
     //result := arreglo;
end;


procedure ProcesoEstandaresCobranza(dia:string);
var fechaHasta:string;
begin
  if(dia='0') then
    dia := formatdatetime('d',now);

  fechaHasta := formatdatetime('yyyy"/"mm"/"',now);
  fechaHasta := fechaHasta + inttostr( DaysInMonth(now));

  with dmreportes do begin

  //SALDO
   querys('SELECT mes FROM EstandaresCobranza WHERE mes = MONTH("'+datetostr(date)+'") and ano = YEAR("'+datetostr(date)+'") and SaldoCuenta = "S"  LIMIT 0,1',0,sqlgeneral2);
   if(sqlgeneral2.RecordCount = 0) then
     begin

           querys('INSERT INTO EstandaresCobranza (SaldoCuenta,sector,mes,ano,D'+dia+') ( SELECT "S",sector,MONTH("'+datetostr(date)+'"),YEAR("'+datetostr(date)+'"),saldo '+
                  ' FROM (select sum(saldo) as saldo,sector from (select sum(saldo) as saldo,idcliente,sector from ( SELECT distinct  if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion, pc.restante as saldo,p.idpedido,pc.idpago,pc.idcliente,c.sector,TipoCont '+
                  ' from PagosClientes as pc left join  pedidos as p on(p.idpedido=pc.idpedido) left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) left join clientes as c on (c.idcliente = pc.idcliente) '+
                  ' WHERE p.estatus in(3,4,6)  and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 and pc.FechaVence < "'+fechaHasta+'" having condicion >= 0 ) as t inner join contratos as con on (con.TipoCont = t.TipoCont) '+
                  ' group by idcliente ) as resultado group by sector) as temp) ',1,sqlgeneral2);
     end else
      begin

            querys('select sum(saldo) as saldo,sector from (select sum(saldo) as saldo,idcliente,sector from ( SELECT distinct  if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion, pc.restante as saldo,p.idpedido,pc.idpago,pc.idcliente,c.sector,TipoCont '+
                  ' from PagosClientes as pc left join  pedidos as p on(p.idpedido=pc.idpedido) left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) left join clientes as c on (c.idcliente = pc.idcliente) '+
                  ' WHERE p.estatus in(3,4,6)  and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 and pc.FechaVence < "'+fechaHasta+'" having condicion >= 0 ) as t inner join contratos as con on (con.TipoCont = t.TipoCont) '+
                  ' group by idcliente ) as resultado group by sector ',0,sqlgeneral2);

               while not sqlgeneral2.Eof do
                    begin
                         querys('UPDATE EstandaresCobranza SET D'+dia+' = '+sqlgeneral2.fieldbyname('saldo').AsString+' WHERE ano = YEAR("'+datetostr(date)+'") and mes=MONTH("'+datetostr(date)+'") and sector='+sqlgeneral2.fieldbyname('sector').AsString +' and SaldoCuenta= "S" ',1,sqlgeneral3);

                         sqlgeneral2.Next;
                    end;
     end;


  {
   //SALDO
   querys('SELECT mes FROM EstandaresCobranza WHERE mes = MONTH("'+datetostr(date)+'") and ano = YEAR("'+datetostr(date)+'") and SaldoCuenta = "S"  LIMIT 0,1',0,sqlgeneral2);
   if(sqlgeneral2.RecordCount = 0) then
     begin

           querys('INSERT INTO EstandaresCobranza (SaldoCuenta,sector,mes,ano,D'+dia+') ( SELECT "S",c.sector,MONTH("'+datetostr(date)+'"),YEAR("'+datetostr(date)+'"),sum(t.saldo) '+
                  ' FROM (SELECT distinct if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion,sum(pc.restante) as saldo,pc.idcliente from PagosClientes as pc left join  pedidos as p on(p.idpedido=pc.idpedido) '+
                  ' left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) left join clientes as c on (c.idcliente = pc.idcliente) WHERE p.estatus in(3,4) '+
                  ' and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 group by sector having condicion >= 0 ) AS t inner join clientes as c on (t.idcliente = c.idcliente) group by c.sector) ',1,sqlgeneral2);
     end else
      begin

            querys('SELECT c.sector,sum(t.saldo) as saldo FROM (SELECT distinct if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion,sum(pc.restante) as saldo,pc.idcliente from PagosClientes as pc left join  pedidos as p on(p.idpedido=pc.idpedido) '+
                   ' left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) left join clientes as c on (c.idcliente = pc.idcliente) WHERE p.estatus in(3,4) '+
                   ' and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 group by sector having condicion >= 0 ) AS t inner join clientes as c on (t.idcliente = c.idcliente) group by c.sector ',1,sqlgeneral2);

               while not sqlgeneral2.Eof do
                    begin
                         querys('UPDATE EstandaresCobranza SET D'+dia+' = D'+dia+' + '+sqlgeneral2.fieldbyname('saldo').AsString+' WHERE ano = YEAR("'+datetostr(date)+'") and mes=MONTH("'+datetostr(date)+'") and sector='+sqlgeneral2.fieldbyname('sector').AsString +' and SaldoCuenta= "S" ',1,sqlgeneral3);

                         sqlgeneral2.Next;
                    end;
     end;

   ///CUENTAS

   querys('SELECT mes FROM EstandaresCobranza WHERE mes = MONTH("'+datetostr(date)+'") and ano = YEAR("'+datetostr(date)+'") and SaldoCuenta = "C"  LIMIT 0,1',0,sqlgeneral2);
   if(sqlgeneral2.RecordCount = 0) then
     begin

           querys('INSERT INTO EstandaresCobranza (SaldoCuenta,sector,mes,ano,D'+dia+') ( SELECT "C",c.sector,MONTH("'+datetostr(date)+'"),YEAR("'+datetostr(date)+'"),COUNT(t.idclientes) '+
                  ' FROM (SELECT distinct if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion,sum(pc.restante) as saldo,pc.idcliente from PagosClientes as pc left join  pedidos as p on(p.idpedido=pc.idpedido) '+
                  ' left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) left join clientes as c on (c.idcliente = pc.idcliente) WHERE p.estatus in(3,4) '+
                  ' and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 group by sector having condicion >= 0 ) AS t ) ',1,sqlgeneral2);
     end else
      begin

            querys('SELECT c.sector,COUNT(t.idcliente) as cuenta FROM (SELECT distinct if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion,sum(pc.restante) as saldo,pc.idcliente from PagosClientes as pc left join  pedidos as p on(p.idpedido=pc.idpedido) '+
                   ' left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) left join clientes as c on (c.idcliente = pc.idcliente) WHERE p.estatus in(3,4) '+
                   ' and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 group by sector having condicion >= 0 ) AS t inner join clientes as c on (t.idcliente = c.idcliente) group by c.sector ',1,sqlgeneral2);

               while not sqlgeneral2.Eof do
                    begin
                         querys('UPDATE EstandaresCobranza SET D'+dia+' = D'+dia+' + '+sqlgeneral2.fieldbyname('saldo').AsString+' WHERE ano = YEAR("'+datetostr(date)+'") and mes=MONTH("'+datetostr(date)+'") and sector='+sqlgeneral2.fieldbyname('sector').AsString +' and SaldoCuenta= "C" ',1,sqlgeneral3);

                         sqlgeneral2.Next;
                    end;
     end;
                   {
           querys('select count(t.idcliente) as total,sector from ( SELECT distinct if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion, YEAR("'+datetostr(date)+'"), month("'+datetostr(date)+'"), sector, pc.idcliente  from PagosClientes as pc '+
                  ' left join  pedidos as p on(p.idpedido=pc.idpedido) left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) left join clientes as c on (c.idcliente = pc.idcliente) '+
                  ' where p.estatus in(3,4) and p.saldado=0  and pc.movimiento in(0,1) and pc.restante > 0 group by idcliente having condicion >= 0 ) as t group by sector',0,sqlgeneral2);

           while not sqlgeneral2.Eof do
            begin
              querys(' ',0,sqlgeneral2);



                    sqlgeneral2.Next;
            end;
                   }
  end;
end;

procedure CargaComboSemana(ano,mes:string;combo : TRzComboBox);
//var fecha1:tdatetime;
begin

end;

function BloqueadoPorSaldoCobranza(idcliente:string):bool;
//var _saldo:double;
begin
     if(CountMonitoreoVencidos(idcliente)) then
         result := true
     else
         result := false;
end;


function SaldoCliente(idcliente:string):double;
begin
    querys('select SUM(restante) from PagosClientes as pc  left join  pedidos as p on (p.idpedido=pc.idpedido) where pc.idcliente ="'+idcliente+'" and p.estatus in(3,4,6) and p.saldado=0  and pc.movimiento in(0,1,4) and pc.restante > 0',0,dmreportes.sqlgeneral8);

    if(dmreportes.sqlgeneral8.Fields.Fields[0].AsString <> '') then
      result := dmreportes.sqlgeneral8.Fields.Fields[0].AsFloat
    else
      result := 0;
end;

function SaldoClienteMonitoreo(idcliente:string):double;
begin
    querys('select SUM(restante) from PagosClientes as pc  left join  pedidos as p on (p.idpedido=pc.idpedido) where pc.idcliente ="'+idcliente+'" and p.estatus in(3,4,6) and p.saldado=0  and pc.movimiento in(0,1,4) and pc.restante > 0 AND p.idUnidadNegocio in(4,5) ',0,dmreportes.sqlgeneral8);

    if(dmreportes.sqlgeneral8.Fields.Fields[0].AsString <> '') then
      result := dmreportes.sqlgeneral8.Fields.Fields[0].AsFloat
    else
      result := 0;
end;

function SaldoClienteMonitoreoVencido(idcliente:string):double;
begin
    querys('select Round(SUM(restante),2) from PagosClientes as pc  left join  pedidos as p on (p.idpedido=pc.idpedido) '+
           'where pc.idcliente ="'+idcliente+'" and p.estatus in(3,4,6) and p.saldado=0  and pc.movimiento in(0,1,4) '+
           'and pc.restante > 0 AND p.idUnidadNegocio in(4) and pc.FechaVence <= "'+datetostr(date)+'"',0,dmreportes.sqlgeneral8);

    if(dmreportes.sqlgeneral8.Fields.Fields[0].AsString <> '') then
      result := dmreportes.sqlgeneral8.Fields.Fields[0].asFloat
    else
      result := 0;
end;

function CountMonitoreoVencidos(idcliente:string):bool;
//var entro:bool;
begin
    querys('select if(t.total >= (Select valor from configuraciones where Concepto = "MesesMonitoreoVencido"),"S","N") as conteo from  (select count(*) as total from PagosClientes as pc  left join  pedidos as p on (p.idpedido=pc.idpedido) '+
           'where pc.idcliente ="'+idcliente+'" and p.estatus in(3,4,6) and p.saldado=0  and pc.movimiento in(0,1,4) '+
           'and pc.restante > 0 AND p.idUnidadNegocio in(4) and pc.FechaVence <= "'+datetostr(date)+'" ) as t',0,dmreportes.sqlgeneral8);

    if(dmreportes.sqlgeneral8.Fields.Fields[0].AsString = 'S') then
         result := true
    else
         result := false;
end;


procedure GenerarInteresesEquipo;
var _fechaCreacion,pedido,costo,fechavence:string;   // cod_cve,
//mes:integer;
tipocambio,endolares,porcentaje:double;
begin
with dmreportes do
begin

   //buscar los dias de intereses a buscar
   querys('SELECT valor FROM configuraciones where concepto ="DiasInteresesEquipo" ',0,sqlgeneral3);
   if(sqlgeneral3.RecordCount  > 0) then
   begin
  _fechaCreacion := formatdatetime('yyyy"/"mm"/"',now) +'05';

  querys('SELECT distinct if(pc.movimiento= 0,if(pc2.movimiento = 1, -1,0),1) as condicion,pc.idcliente,if(c.idvendedor = 0,1,c.idvendedor) as id,if(c.idorigen=0,99,c.idorigen) as origen,pc.idpedido,pc.restante,pc.idpago from PagosClientes as pc '+
         'left join  pedidos as p on (p.idpedido=pc.idpedido) left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1) inner join clientes as c on(c.idcliente = pc.idcliente) '+
         ' where pc.FechaVence between "1990/01/01" and adddate("'+datetostr(date)+'",interval -'+sqlgeneral3.fieldbyname('valor').AsString+' day) '+
         ' and p.estatus in(3,4,6) and p.saldado=0  and pc.movimiento in(0,1) and pc.restante > 0  AND p.idUnidadNegocio = 1  and pc.idpago not in(select idpago from PedInteresesEquipo) having condicion >= 0 ',0,sqlgeneral2);

  if(sqlgeneral2.RecordCount > 0) then
    begin
    //buscar el valor de porcentaje a calcular el interes de equipo
  querys('SELECT valor FROM configuraciones where concepto ="InteresEquipo" ',0,sqlgeneral3);
    if(sqlgeneral3.RecordCount  > 0) then
      begin
      porcentaje := sqlgeneral3.fieldbyname('valor').AsFloat;
      fechavence := formatdatetime('yyyy"/"mm"/"dd',now+30);

          while not sqlgeneral2.Eof do
            begin
                costo := Format('%8.2f',[sqlgeneral2.fieldbyname('restante').AsFloat * (porcentaje/100)]);

                querys('select valor from configuraciones where concepto="TipoCambio" ',0,SqlGeneral3);
                tipocambio:=sqlgeneral3.Fields.Fields[0].asfloat;
                endolares:=strtofloat(Format('%8.2f',[(strtofloat(costo)*(1+GetIVA)) / tipocambio]));

                //generar intereses.
                querys('select max(idpedido) from pedidos',0,SqlGeneral);
                pedido:=inttostr(sqlgeneral.Fields.Fields[0].Asinteger+1);

                querys('INSERT INTO pedidos (idpedido,idcliente,usuario,fecha,hora,idorigen,idvendedor,FechaCreacion,'+
                       'SubTotal,Iva,TotMn,Saldo,TotDlls,concepto,FechaVencimiento,idUnidadNegocio,FormaPago,TipoCambio,estatus,FechaRemision) '+
                       ' values( '+pedido+','+ sqlgeneral2.fieldbyname('idcliente').asstring +',"'+frmprincipal.ucprincipal.CurrentUser.Username+'","'+datetostr(date)+'","'+FormatDateTime('HH:mm:ss',Time)+'","'+sqlgeneral2.fieldbyname('origen').asstring+'","'+sqlgeneral2.fieldbyname('id').asstring+'","'+_fechaCreacion+'","'+Format('%8.2f',[strtofloat(costo)])+'","'+Format('%8.2f',[strtofloat(costo)*GetIVA])+'","'+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+'",'+
                       '"'+Format('%8.2f', [strtofloat(costo)*(1+GetIVA)])+'",'+floattostr(endolares)+',"'+'INTERESES POR EQUIPO VENCIDO DEL PEDIDO : '+ sqlgeneral2.fieldbyname('idpedido').asstring + '","'+fechavence+'","5","CA",'+Format('%8.2f',[tipocambio])+',3,Curdate())',1,sqlgeneral1);


                querys('INSERT INTO DetPedido(idpedido,cant,cod_cve,surtido,costo,tc,utilidad) values('+pedido+',1,"INT.",1,'+costo+',1,"A")',1,sqlgeneral1);

                querys('select idremicion from folios',0,sqlgeneral3);
                querys('INSERT INTO RemiFact (idremicion,idpedido,FechaAlta,HoraAlta,UsuarioAlta) values ('+inttostr(sqlgeneral3.Fields.Fields[0].Asinteger+1)+','+pedido+',"'+datetostr(date)+'","'+FormatDateTime('HH:mm:ss',Time)+'","PROCESO AUTOMATICO") ',1,sqlgeneral1);
                querys('INSERT INTO PagosClientes (idcliente,idremicion,idpedido,FechaAlta,cargo,restante,movimiento,FechaVence,usuario,fecha,hora) VALUES ("'+sqlgeneral2.fieldbyname('idcliente').AsString+'",'+inttostr(sqlgeneral3.Fields.Fields[0].Asinteger+1)+','+pedido+','+
                       '"'+datetostr(date)+'",'+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+','+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+',0,"'+fechavence+'","PROCESO AUTOMATICO","'+datetostr(date)+'","'+FormatDateTime('HH:mm:ss',Time)+'")',1,sqlgeneral);
                bpcambios('clientes', sqlgeneral2.fieldbyname('idcliente').AsString, 'idcliente');
                querys('UPDATE clientes SET saldo=saldo + '+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+', TotComprado=TotComprado+ '+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+' WHERE idcliente='+sqlgeneral2.fieldbyname('idcliente').AsString,1,sqlgeneral);
                apcambios('idcliente', sqlgeneral2.fieldbyname('idcliente').AsString, 'clientes', 'InteresesEquipo');
                querys('Update folios set idremicion ='+inttostr(sqlgeneral3.Fields.Fields[0].Asinteger+1),1,sqlgeneral8);

                querys('Insert into PedInteresesEquipo (idpedido,idpago,idpedidoInteres,fecha) values('+sqlgeneral2.fieldbyname('idpedido').AsString+','+sqlgeneral2.fieldbyname('idpago').AsString+','+pedido+',"'+datetostr(date)+'") ',1,sqlgeneral8);

                sqlgeneral2.Next;
            end;


       end else
         application.MessageBox('Falta dar de alta el concepto '+#13+' InteresEquipo en configuraciones !','Atención',MB_OK);
  end;

  end else
         application.MessageBox('Falta dar de alta el concepto '+#13+' DiasInteresesEquipo en configuraciones !','Atención',MB_OK);

 end; //with

end;


procedure GenerarInteresMonitoreo;
var _fechaCreacion,pedido,costo,fechavence:string;   // cod_cve,
//mes:integer;
tipocambio,endolares:double;
begin
with dmreportes do
begin


  _fechaCreacion := datetostr(today); //formatdatetime('yyyy"/"mm"/"',now) +'05';
  querys(' Select  pc.idcliente,if(c.idvendedor = 0,1,c.idvendedor) as id,if(c.idorigen=0,99,c.idorigen) as origen,pc.idpedido,p.concepto from PagosClientes as pc inner join pedidos as p on(p.idpedido = pc.idpedido) inner join clientes as c '+
         ' on(c.idcliente = pc.idcliente) where pc.FechaVence between adddate("'+datetostr(date)+'",interval -10 day) and "'+datetostr(date)+'" and p.estatus in(3,4,6) AND restante > 0.9 and pc.movimiento =0 and p.idUnidadNegocio = 4 '+
         ' and pc.idpedido not in(select idpedido from PedidoInteres)',0,sqlgeneral2);
  if(sqlgeneral2.RecordCount > 0) then
    begin

    querys('SELECT precioa from articulos where cod_cve ="RECARGOS01"',0,sqlgeneral3);
    if(sqlgeneral3.RecordCount > 0) then
    begin
    costo := sqlgeneral3.Fields.Fields[0].AsString;
    if  ((costo = '') or (costo = '0')) then
      begin
      costo := '40';
      querys('Update articulos set precioa = "40" where  cod_cve ="RECARGOS01"', 1, sqlgeneral3);
      end;


    querys('select valor from configuraciones where concepto="TipoCambio" ',0,SqlGeneral3);
    tipocambio:=sqlgeneral3.Fields.Fields[0].asfloat;
    endolares:=strtofloat(Format('%8.2f',[(strtofloat(costo)*(1+GetIVA)) / tipocambio]));
   // mes:=strtoint(formatdatetime('m',now));
   // if(mes=1) then mes := 12 else mes := mes -1;

    fechavence := formatdatetime('yyyy"/"mm"/"',now)+ inttostr(DaysInMonth(now));
          while not sqlgeneral2.Eof do
            begin
                //generar intereses.
                querys('select max(idpedido) from pedidos',0,SqlGeneral);
                pedido:=inttostr(sqlgeneral.Fields.Fields[0].Asinteger+1);

                querys('INSERT INTO pedidos (idpedido,idcliente,usuario,fecha,hora,idorigen,idvendedor,FechaCreacion,'+
                       'SubTotal,Iva,TotMn,Saldo,TotDlls,concepto,FechaVencimiento,idUnidadNegocio,FormaPago,TipoCambio,estatus,FechaRemision) '+
                       //' values('+pedido+','+sqlgeneral2.Fields.Fields[0].asstring+',"'+frmprincipal.ucprincipal.CurrentUser.Username+'","'+datetostr(date)+'","'+timetostr(time)+'","'+sqlgeneral2.fieldbyname('origen').asstring+'","'+sqlgeneral2.fieldbyname('id').asstring+'","'+_fechaCreacion+'","'+Format('%8.2f',[strtofloat(costo)])+'","'+Format('%8.2f',[strtofloat(costo)*GetIVA])+'"  )',1,sqlgeneral1);


                       ' values( '+pedido+','+sqlgeneral2.Fields.Fields[0].asstring+',"'+frmprincipal.ucprincipal.CurrentUser.Username+'","'+datetostr(date)+'","'+FormatDateTime('HH:mm:ss',Time)+'","'+sqlgeneral2.fieldbyname('origen').asstring+'","'+sqlgeneral2.fieldbyname('id').asstring+'","'+_fechaCreacion+'","'+Format('%8.2f',[strtofloat(costo)])+'","'+Format('%8.2f',[strtofloat(costo)*GetIVA])+'","'+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+'",'+
                       '"'+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+'",'+floattostr(endolares)+',"'+'RECARGOS POR VENCIMIENTO DE '+ sqlgeneral2.fieldbyname('concepto').asstring + '","'+fechavence+'","5","CA",'+Format('%8.2f',[tipocambio])+',3,Curdate())',1,sqlgeneral1);


                querys('INSERT INTO DetPedido(idpedido,cant,cod_cve,surtido,costo,tc,utilidad) values('+pedido+',1,"RECARGOS01",1,'+costo+',1,"A")',1,sqlgeneral1);

                querys('select idremicion from folios',0,sqlgeneral3);
                querys('INSERT INTO RemiFact (idremicion,idpedido,FechaAlta,HoraAlta,UsuarioAlta) values ('+inttostr(sqlgeneral3.Fields.Fields[0].Asinteger+1)+','+pedido+',"'+datetostr(date)+'","'+FormatDateTime('HH:mm:ss',Time)+'","PROCESO AUTOMATICO") ',1,sqlgeneral1);
                querys('INSERT INTO PagosClientes (idcliente,idremicion,idpedido,FechaAlta,cargo,restante,movimiento,FechaVence,usuario,fecha,hora) VALUES ("'+sqlgeneral2.fieldbyname('idcliente').AsString+'",'+inttostr(sqlgeneral3.Fields.Fields[0].Asinteger+1)+','+pedido+','+
                       '"'+datetostr(date)+'",'+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+','+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+',0,"'+fechavence+'","'+frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+FormatDateTime('HH:mm:ss',Time)+'")',1,sqlgeneral);
                bpcambios('clientes', sqlgeneral2.fieldbyname('idcliente').AsString, 'idcliente');
                querys('UPDATE clientes SET saldo=saldo + '+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+', TotComprado=TotComprado+ '+Format('%8.2f',[strtofloat(costo)*(1+GetIVA)])+' WHERE idcliente='+sqlgeneral2.fieldbyname('idcliente').AsString,1,sqlgeneral);
                apcambios('idcliente', sqlgeneral2.fieldbyname('idcliente').AsString, 'clientes', 'InteresesMonitoreo');
                querys('Update folios set idremicion ='+inttostr(sqlgeneral3.Fields.Fields[0].Asinteger+1),1,sqlgeneral8);

                querys('Insert into PedidoInteres (idpedido,idpedidoInteres,fecha) values('+sqlgeneral2.fieldbyname('idpedido').AsString+','+pedido+',"'+datetostr(date)+'") ',1,sqlgeneral8);

                sqlgeneral2.Next;
            end;
    end
      else
        application.MessageBox('Falta dar de alta el articulo RECARGOS01 , con precio A','Atención',MB_OK);


  end;

 end;
end;

procedure RepAbonosXMonitoreo(rango,ano,TipoImpresion:string;actualizar:bool);
var
   cort,m,n,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12:integer;   // aux, sec, pago,   ,cont
   estatus,saldado,auxM,auxC,memo,cuenta:string;     //ano2,
   l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12:string;

   function BuscaMes(cadena:string;mes:string):boolean;
   var
      m,p1,p2:integer;
      tmp:string;
      encontro:boolean;
   begin
      tmp:= '';
      encontro:= false;
      cadena:= UpperCase(cadena);
      mes:= UpperCase(mes);
      p1:= 1; p2:= Length(cadena);

      // se realiza la busqueda
      for m:=p1 to p2 do
      begin
         if (copy(cadena,m,1) <> ' ') and (copy(cadena,m,1) <> ',') then
            tmp:= tmp + copy(cadena,m,1)
         else
         begin
            if tmp = mes then
               encontro:= true;
            tmp:= '';
         end;
      end;
      Result:= encontro;
   end;

   function OcurrenciaWord(const str: string; const substr: string): integer;
   // Devuelve la cantidad de veces que una subcadena está en una cadena
   var
      p, q: PChar;
      n: integer;
   begin
      Result := 0;
      n := Length(substr);
      if n = 0 then exit;
      q := PChar(Pointer(substr));
      p := PChar(Pointer(str));
      while p <> nil do
      begin
         p := StrPos(p, q);
         if p <> nil then
         begin
            inc(Result);
            inc(p, n);
         end;
      end;
   end;
begin
  with DMREPORTES do
  begin
   if actualizar then
   begin

      m1:=0;m2:=0;m3:=0;m4:=0;m5:=0;m6:=0;m7:=0;m8:=0;m9:=0;m10:=0;m11:=0;m12:=0;
      //cont:=0;

//=================================================================================================================

      //trae los abonos x cliente de todo el año
      querys('SELECT p.idcliente as cuenta, p.concepto as memo, p.saldado as saldado, p.estatus as estatus '+
             'FROM pedidos p left join UnidadNegocio as un on(un.idUnidadNegocio=p.idUnidadNegocio) '+
             'WHERE p.estatus in (0,3,4,6) and un.nombre in ("MONITOREO","ENLACES","CONEXION") and p.concepto like "%'+ano+'%" '+
             'ORDER by cuenta',0,sqlgeneral);

      if sqlgeneral.RecordCount > 0 then
      begin
         for m:=0 to sqlgeneral.RecordCount-1 do
         begin
            //cont:=0;
            memo:= '';
            cuenta:= sqlgeneral.FieldByName('cuenta').AsString;
            saldado:= sqlgeneral.FieldByName('saldado').AsString;
            memo:= sqlgeneral.FieldByName('memo').AsString;
      //************************************************************************
            if sqlgeneral.FieldByName('estatus').AsString = '0' then
               estatus:= 'P'
            else
             begin
               if sqlgeneral.fieldbyname('estatus').AsString = '3' then
                  estatus:= 'R'
               else
                  estatus:= 'F';
             end;
      //************************************************************************
            querys('select m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12 from ConcentradoAbonosxMonitoreo where idcliente = '+sqlgeneral.fieldbyname('cuenta').AsString+' and anio = '+ano,0,sqlgeneral2);
            if sqlgeneral2.RecordCount > 0 then
            begin
               m1:=  sqlgeneral2.fieldbyname('m1').AsInteger;  l1:=  sqlgeneral2.fieldbyname('l1').AsString;
               m2:=  sqlgeneral2.fieldbyname('m2').AsInteger;  l2:=  sqlgeneral2.fieldbyname('l2').AsString;
               m3:=  sqlgeneral2.fieldbyname('m3').AsInteger;  l3:=  sqlgeneral2.fieldbyname('l3').AsString;
               m4:=  sqlgeneral2.fieldbyname('m4').AsInteger;  l4:=  sqlgeneral2.fieldbyname('l4').AsString;
               m5:=  sqlgeneral2.fieldbyname('m5').AsInteger;  l5:=  sqlgeneral2.fieldbyname('l5').AsString;
               m6:=  sqlgeneral2.fieldbyname('m6').AsInteger;  l6:=  sqlgeneral2.fieldbyname('l6').AsString;
               m7:=  sqlgeneral2.fieldbyname('m7').AsInteger;  l7:=  sqlgeneral2.fieldbyname('l7').AsString;
               m8:=  sqlgeneral2.fieldbyname('m8').AsInteger;  l8:=  sqlgeneral2.fieldbyname('l8').AsString;
               m9:=  sqlgeneral2.fieldbyname('m9').AsInteger;  l9:=  sqlgeneral2.fieldbyname('l9').AsString;
               m10:=sqlgeneral2.fieldbyname('m10').AsInteger;  l10:=sqlgeneral2.fieldbyname('l10').AsString;
               m11:=sqlgeneral2.fieldbyname('m11').AsInteger;  l11:=sqlgeneral2.fieldbyname('l11').AsString;
               m12:=sqlgeneral2.fieldbyname('m12').AsInteger;  l12:=sqlgeneral2.fieldbyname('l12').AsString;
            end;

            if (OcurrenciaWord(LowerCase(memo),'anual') > 0) then
            begin
               if saldado = '1' then
                begin m1:=1; m2:=1; m3:=1; m4:=1; m5:=1; m6:=1; m7:=1; m8:=1; m9:=1; m10:=1; m11:=1; m12:=1;end;
               l1:=estatus; l2:=estatus; l3:=estatus; l4:=estatus; l5:=estatus; l6:=estatus;
               l7:=estatus; l8:=estatus; l9:=estatus; l10:=estatus; l11:=estatus; l12:=estatus;
            end
            else
            begin
//===========================================================================================================
               if BuscaMes(memo,'enero')      then begin if saldado = '1' then m1:= 1;l1:= estatus;end;
               if BuscaMes(memo,'febrero')    then begin if saldado = '1' then m2:= 1;l2:= estatus;end;
               if BuscaMes(memo,'marzo')      then begin if saldado = '1' then m3:= 1;l3:= estatus;end;
               if BuscaMes(memo,'abril')      then begin if saldado = '1' then m4:= 1;l4:= estatus;end;
               if BuscaMes(memo,'mayo')       then begin if saldado = '1' then m5:= 1;l5:= estatus;end;
               if BuscaMes(memo,'junio')      then begin if saldado = '1' then m6:= 1;l6:= estatus;end;
               if BuscaMes(memo,'julio')      then begin if saldado = '1' then m7:= 1;l7:= estatus;end;
               if BuscaMes(memo,'agosto')     then begin if saldado = '1' then m8:= 1;l8:= estatus;end;
               if BuscaMes(memo,'septiembre') then begin if saldado = '1' then m9:= 1;l9:= estatus;end;
               if BuscaMes(memo,'octubre')    then begin if saldado = '1' then m10:=1;l10:=estatus;end;
               if BuscaMes(memo,'noviembre')  then begin if saldado = '1' then m11:=1;l11:=estatus;end;
               if BuscaMes(memo,'diciembre') and (OcurrenciaWord(LowerCase(memo),ano) > 0) then
                begin if saldado = '1' then m12:=1;l12:=estatus;end;
//===========================================================================================================                
            end; // else anual
            //busca si existe el cliente en la tabla, si no, lo inserta.
            querys('select idcliente from ConcentradoAbonosxMonitoreo where idcliente = '+sqlgeneral.fieldbyname('cuenta').AsString+' and anio = "'+ano+'"',0,sqlgeneral2);
            if sqlgeneral2.FieldByName('idcliente').AsString <> '' then
               querys('update ConcentradoAbonosxMonitoreo set m1="'+inttostr(m1)+'", m2="'+inttostr(m2)+'", '+
                                                             'm3="'+inttostr(m3)+'", m4="'+inttostr(m4)+'", '+
                                                             'm5="'+inttostr(m5)+'", m6="'+inttostr(m6)+'", '+
                                                             'm7="'+inttostr(m7)+'", m8="'+inttostr(m8)+'", '+
                                                             'm9="'+inttostr(m9)+'", m10="'+inttostr(m10)+'", '+
                                                             'm11="'+inttostr(m11)+'", m12="'+inttostr(m12)+'", '+

                                                             'l1="'+l1+'", l2="'+l2+'", l3="'+l3+'", l4="'+l4+'", '+
                                                             'l5="'+l5+'", l6="'+l6+'", l7="'+l7+'", l8="'+l8+'", '+
                                                             'l9="'+l9+'", l10="'+l10+'", l11="'+l11+'", l12="'+l12+'" '+
                      'where idcliente = '+sqlgeneral.fieldbyname('cuenta').AsString+' and anio = "'+ano+'"',1,sqlgeneral3)
            else
            begin
               querys('insert into ConcentradoAbonosxMonitoreo (idcliente,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,anio) '+
                      'VALUES ('+sqlgeneral.fieldbyname('cuenta').AsString+',"'+inttostr(m1)+'","'+inttostr(m2)+'","'+inttostr(m3)+'","'+inttostr(m4)+'","'+inttostr(m5)+'","'+inttostr(m6)+'","'+inttostr(m7)+'","'+inttostr(m8)+'","'+inttostr(m9)+'","'+inttostr(m10)+'","'+inttostr(m11)+'","'+inttostr(m12)+'",'+
                      '"'+l1+'","'+l2+'","'+l3+'","'+l4+'","'+l5+'","'+l6+'","'+l7+'","'+l8+'","'+l9+'","'+l10+'","'+l11+'","'+l12+'","'+ano+'")',1,sqlgeneral3);
            end;

            sqlgeneral.Next;
         end; // for sqlgeneral.recordcount
      end; // if sqlgeneral.recordcount > 0

      //****************************************************************************************
      // ACTUALIZA LA TABLA DEL CONCENTRADO CON LAS CORTESIAS
      querys('SELECT idcliente, NumMes FROM bonificaciones WHERE ano = '+ano,0,sqlgeneral);
      if sqlgeneral.RecordCount > 0 then
      begin
         //m:=0;
         for m:=0 to sqlgeneral.RecordCount-1 do
         begin

            auxC:= sqlgeneral.fieldbyname('idcliente').AsString;
            auxM:= sqlgeneral.fieldbyname('NumMes').AsString;
            querys('update ConcentradoAbonosxMonitoreo set m'+auxM+' = 2 where idcliente = '+auxC+' and anio = "'+ano+'"',1,sqlgeneral2);
            querys('select m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12 from ConcentradoAbonosxMonitoreo where idcliente = '+auxC+' and anio = "'+ano+'"',0,sqlgeneral2);
            if sqlgeneral2.RecordCount > 0 then
            begin
               cort:=0;
               //n:=0;
               for n:=1 to 12 do
               begin
                  //showmessage(auxC);
                  if sqlgeneral2.fieldbyname('m'+inttostr(n)).AsInteger = 2 then
                     cort:=cort+1;
               end;
               querys('update ConcentradoAbonosxMonitoreo set cortesias = '+inttostr(cort)+' where idcliente = '+auxC+' and anio = "'+ano+'"',1,sqlgeneral2);
            end;
            sqlgeneral.Next;
         end;
      end; // if cortesias
   end//if actualizar
   else
   begin
      // QUERY PARA OBTENER EL CONCENTRADO
      querys('Select cam.*, c.sector, '+ano+' as ano from ConcentradoAbonosxMonitoreo cam, clientes c where cam.anio= "'+ano+'" and c.sector in ('+rango+') and cam.idcliente = c.idcliente and c.estatus = 1 order by c.sector, cam.idcliente',0,sqlgeneral);

      // QUERY PARA OBTENER CUANTOS FALTARON DE PAGAR
      querys('SELECT if(c.idgiro = 1,"RESIDENCIALES","COMERCIALES") as est, '+
               'sum(if(m1="0",1,0)) as M1, sum(if(m2="0",1,0)) as M2, sum(if(m3="0",1,0)) as M3, sum(if(m4="0",1,0)) as M4, '+
               'sum(if(m5="0",1,0)) as M5, sum(if(m6="0",1,0)) as M6, sum(if(m7="0",1,0)) as M7, sum(if(m8="0",1,0)) as M8, '+
               'sum(if(m9="0",1,0)) as M9, sum(if(m10="0",1,0)) as M10, sum(if(m11="0",1,0)) as M11, sum(if(m12="0",1,0)) as M12 '+
             'FROM ConcentradoAbonosxMonitoreo m, clientes c '+
             'WHERE m.idcliente = c.idcliente and m.anio = '+ano+' and c.estatus = 1 and c.sector in ('+rango+') '+
             'GROUP BY est '+
             'ORDER BY c.idgiro',0,sqlgeneral2);

      // QUERY PARA OBTENER LAS CORTESIAS
      querys('SELECT if(c.idgiro = 1,"RESIDENCIALES","COMERCIALES") as est, '+
               'sum(if(m1="2",1,0)) as M1, sum(if(m2="2",1,0)) as M2, sum(if(m3="2",1,0)) as M3, sum(if(m4="2",1,0)) as M4, '+
               'sum(if(m5="2",1,0)) as M5, sum(if(m6="2",1,0)) as M6, sum(if(m7="2",1,0)) as M7, sum(if(m8="2",1,0)) as M8, '+
               'sum(if(m9="2",1,0)) as M9, sum(if(m10="2",1,0)) as M10, sum(if(m11="2",1,0)) as M11, sum(if(m12="2",1,0)) as M12 '+
             'FROM ConcentradoAbonosxMonitoreo m, clientes c '+
             'WHERE m.idcliente = c.idcliente and m.anio = '+ano+' and c.estatus = 1 and c.sector in ('+rango+') '+
             'GROUP BY est '+
             'ORDER BY c.idgiro',0,sqlgeneral3);

      // SI HAY DATOS SE IMRPIME EL REPORTE
      if(sqlgeneral.RecordCount >0) then
         OperacionReporte('AbonosxMonitoreo','Reporte de abonos por Monitoreo en el año('+ano+')',TipoImpresion, 1)
      else
         Application.MessageBox('No hay datos que mostrar!','Aviso!',MB_OK+MB_ICONASTERISK);
   end;
  end;//WITH DMREPORTES
end;

function ValidarEqsenlace(idoportunidad:string):boolean;
var Numcliente:String;
begin
  querys('select o.idfact, o.idtel From oportunidades AS o where idoportunidad='+idoportunidad,0,dmreportes.sqlgeneral2);

  // datos de facturacion
  if((dmreportes.sqlgeneral2.FieldByName('idfact').AsString='0') or (dmreportes.sqlgeneral2.FieldByName('idfact').AsString='') or
     (dmreportes.sqlgeneral2.FieldByName('idfact').IsNull)) then
  begin
      if application.MessageBox(pchar('Faltan los datos de FACTURACION!'+#13+'No podra cerrar esta oportunidad si no esta capturada esa información!'+#13+'Deseas registrar los datos?'),'Aviso',MB_YESNO+mb_iconinformation)=idno then
      begin
          result:=false;
          exit;
      end
      else
      begin
        querys('select max(idfact)+1 as idfact from OportunidadesFact',0,dmreportes.sqlgeneral);
        frmDatosFactOport:=TfrmDatosFactOport.Create(nil);
        if ConectadaServidor then
            frmDatosFactOport.inicializa(idoportunidad,0,0)
        else
            frmDatosFactOport.inicializa(idoportunidad,0,1);
        frmdatosfactoport.ShowModal;
        if ValidarEqsenlace(idoportunidad)=true then
        begin
          result:=true;
          exit;
        end;
      end;
  end;    //fin datos facturacion

  //validar telefonos
  //telefonos
  if((dmreportes.sqlgeneral2.FieldByName('idtel').AsString='0') or (dmreportes.sqlgeneral2.FieldByName('idtel').AsString='') or
     (dmreportes.sqlgeneral2.FieldByName('idtel').IsNull)) then
  begin
          if application.MessageBox(pchar('Falta el TELEFONO '+#13+'No podra cerrar esta oportunidad si no esta capturado'+#13+'Deseas Dar de Alta El Telefono del RESPONSABLE?'),'Aviso',MB_YESNO+mb_iconinformation)=idno then
          begin
            result:=false;
            exit;
          end
          else
          begin
            querys('select max(idtel)+1 as telcontacto from telefonos',0,dmreportes.sqlgeneral);
            querys('select idcontacto from oportunidades where idoportunidad='+idoportunidad,0,DMREPORTES.sqlgeneral2);
            frmtel.inicializa(strtoint(idoportunidad),dmreportes.sqlgeneral.fieldbyname('telcontacto').AsInteger,DMREPORTES.sqlgeneral2.fieldbyname('idcontacto').AsInteger,'oportunidades','idoportunidad', false);
            frmtel.ShowModal;
            if querys('select idtel from telefonos where idtel='+dmreportes.sqlgeneral.fieldbyname('telcontacto').AsString,0,dmreportes.sqlgeneral4)>0 then
            begin
              querys('select idcontacto from oportunidades where idoportunidad='+idoportunidad,0,dmreportes.sqlgeneral2);
              querys('update contactos set idtel='+dmreportes.sqlgeneral.FieldByName('telcontacto').AsString+' where idcontacto='+dmreportes.sqlgeneral2.FieldByName('idcontacto').AsString,1,dmreportes.sqlgeneral5);
            end;
            if ValidarEqsenlace(idoportunidad)=true then
            begin
              result:=true;
              exit;
            end;
          end;
  end;
  if ConectadaServidor then
      Numcliente:=inttostr(CuentaLibre)
   else
      Numcliente:=inttostr(Cuentaapartada);
   InsertaCliente(idoportunidad,numcliente);
   result:=true;
end;

function ValidarDatosOportCliente(idoportunidad:string;ban:boolean):boolean;
var
   Numcliente,contrasena,email:String;
   patrulla:integer;
begin
  contrasena:='';
  ubicacion:='';
  patrulla:=0;
  querys('select o.idcontacto, o.idfact, o.idtel, o.idusuario From oportunidades AS o Left Join contactos AS c ON (c.idcontacto = o.idcontacto) '+
  'Left Join telefonos AS t ON (t.idtel = o.idtel AND t.tipo_tel = "") AND c.idtel = t.idtel where idoportunidad='+idoportunidad,0,dmreportes.sqlgeneral2);

  // datos de facturacion
  if((dmreportes.sqlgeneral2.FieldByName('idfact').AsString='0') or (dmreportes.sqlgeneral2.FieldByName('idfact').AsString='') or
     (dmreportes.sqlgeneral2.FieldByName('idfact').IsNull)) then
  begin
      if application.MessageBox(pchar('Faltan los datos de FACTURACION!'+#13+'No podra cerrar esta oportunidad si no esta capturada esa información!'+#13+'Deseas registrar los datos?'),'Aviso',MB_YESNO+mb_iconinformation)=idno then
      begin
          result:=false;
          exit;
      end
      else
      begin
        frmDatosFactOport:=TfrmDatosFactOport.Create(nil);
        if conectadaservidor then
            frmDatosFactOport.inicializa(idoportunidad,0,0)
        else
            frmDatosFactOport.inicializa(idoportunidad,0,1);
        frmdatosfactoport.ShowModal;
        if querys('select idfact from oportunidades where idoportunidad='+idoportunidad,0,sqlgeneral)=0 then
        begin
           result:=false;
           exit;
        end;
      end;
  end;    //fin datos facturacion

  //telefonos
  if((dmreportes.sqlgeneral2.FieldByName('idtel').AsString='0') or (dmreportes.sqlgeneral2.FieldByName('idtel').AsString='') or
     (dmreportes.sqlgeneral2.FieldByName('idtel').IsNull)) then
  begin
          if application.MessageBox(pchar('Falta el TELEFONO de la OPORTUNIDAD '+#13+'No podra cerrar esta oportunidad'+#13+'Deseas Dar de Alta El Telefono?'),'Aviso',MB_YESNO+mb_iconinformation)=idno then
          begin
            result:=false;
            exit;
          end
          else
          begin
            querys('select max(idtel)+1 as telcontacto from telefonos',0,dmreportes.sqlgeneral);
            querys('select idcontacto from oportunidades where idoportunidad='+idoportunidad,0,DMREPORTES.sqlgeneral2);
            frmtel.inicializa(strtoint(idoportunidad),dmreportes.sqlgeneral.fieldbyname('telcontacto').AsInteger,DMREPORTES.sqlgeneral2.fieldbyname('idcontacto').AsInteger,'oportunidades','idoportunidad', false);
            frmtel.ShowModal;
            if querys('select idtel from telefonos where idtel='+dmreportes.sqlgeneral.fieldbyname('telcontacto').AsString,0,dmreportes.sqlgeneral4)>0 then
            begin
              querys('select idcontacto from oportunidades where idoportunidad='+idoportunidad,0,dmreportes.sqlgeneral2);
              querys('update contactos set idtel='+dmreportes.sqlgeneral.FieldByName('telcontacto').AsString+' where idcontacto='+dmreportes.sqlgeneral2.FieldByName('idcontacto').AsString,1,dmreportes.sqlgeneral5);
            end;
            if ValidarDatosOportCliente(idoportunidad,ban)=true then
            begin
              result:=true;
              exit;
            end;
          end;
  end;

  //contactos
  if((dmreportes.sqlgeneral2.FieldByName('idcontacto').AsString='0') or (dmreportes.sqlgeneral2.FieldByName('idcontacto').AsString='') or
  (dmreportes.sqlgeneral2.FieldByName('idcontacto').IsNull)) then
  begin
      if application.MessageBox(pchar('Faltan datos de RESPONSABLES en esta '+
      'oportunidad!'+#13+'No podra cerrar esta oportunidad Debe haber almenos 1 responsable!'+#13+'Deseas Dar de alta un RESPONSABLE?'),'Aviso',MB_YESNO+mb_iconinformation)=idno then
      begin
        result:=false;
        exit;
      end
      else
      begin
        querys('select max(idcontacto) as contacto from contactos',0,dmreportes.sqlgeneral7);
        querys('INSERT into contactos(idcontacto,nombre,procedencia,tipo,usuario,fecha,hora,nivel)'+
        ' values ('+inttostr(dmreportes.sqlgeneral7.fieldbyname('contacto').Asinteger+1)+',"TELEFONO 1","oportunidades",0,'+quotedstr(frmprincipal.ucprincipal.CurrentUser.LoginName)+
        ','+quotedstr(datetostr(FechaServidor))+','+quotedstr(FormatDateTime('HH:mm:ss',Time))+',1)',1,dmreportes.sqlgeneral8);
        frmcontacto.inicializa(strtoint(idoportunidad),dmreportes.sqlgeneral7.fieldbyname('contacto').AsInteger+1,'oportunidades','idoportunidad');
        frmcontacto.ShowModal;
        if querys('select idcontacto from contactos where idcontacto='+inttostr(dmreportes.sqlgeneral7.fieldbyname('contacto').Asinteger+1),0,dmreportes.sqlgeneral3)>0 then
          querys('update oportunidades set idcontacto='+inttostr(dmreportes.sqlgeneral7.fieldbyname('contacto').Asinteger+1)+' where idoportunidad='+idoportunidad,1,dmreportes.sqlgeneral);
        if ValidarDatosOportCliente(idoportunidad,ban)=true then
        begin
          result:=true;
          exit;
        end;
      end;
  end; //datos contactos

  querys('select idcontador,idtel from contactos where idcontacto='+dmreportes.sqlgeneral2.FieldByName('idcontacto').AsString,0,dmreportes.sqlgeneral3);
  if((dmreportes.sqlgeneral3.FieldByName('idtel').AsString='0') or (dmreportes.sqlgeneral3.FieldByName('idtel').AsString='') or
     (dmreportes.sqlgeneral3.FieldByName('idtel').IsNull)) then
  begin
      //telefono del responsable
      if application.MessageBox(pchar('Falta el TELEFONO del RESPONSABLE '+#13+'No podra cerrar esta oportunidad si no esta capturado'+#13+'Deseas Dar de Alta El Telefono del RESPONSABLE?'),'Aviso',MB_YESNO+mb_iconinformation)=idno then
      begin
        result:=false;
        exit;
      end
      else
      begin
        //frmtel.inicializa(idcontacto,idtel,idcontador,'contactos','idcontador',true);
        frmtel.inicializa(dmreportes.sqlgeneral2.FieldByName('idcontacto').AsInteger,dmreportes.sqlgeneral3.FieldByName('idtel').AsInteger,
        dmreportes.sqlgeneral3.FieldByName('idcontador').AsInteger,'contactos','idcontador',true);
        frmtel.ShowModal;
        if ValidarDatosOportCliente(idoportunidad,ban)=true then
        begin
          result:=true;
          exit;
        end;
      end;
  end; // fin telefonos de los contactos

  // datos de los ususarios
  if((dmreportes.sqlgeneral2.FieldByName('idusuario').AsString='0') or (dmreportes.sqlgeneral2.FieldByName('idusuario').AsString='') or
     (dmreportes.sqlgeneral2.FieldByName('idusuario').IsNull)) then
  begin
      //if application.MessageBox('Faltan los USUARIOS, Deseas Darlos de alta?','Aviso',MB_YESNO+MB_ICONQUESTION)=idno then
      if application.MessageBox('Faltan los USUARIOS, Deseas Pasar los datos de Responsables?','Aviso',MB_YESNO+MB_ICONQUESTION)=idyes then
      begin
         with dmreportes do
         begin
            if querys('select idcontacto from oportunidades where idoportunidad='+idoportunidad,0,sqlgeneral4)>0 then
            begin
               querys('select * from contactos where idcontacto='+sqlgeneral4.fieldbyname('idcontacto').asstring,0,sqlgeneral4);
               sqlgeneral4.First;
               querys('select max(idcontacto) as idcontacto from contactos',0,dmreportes.sqlgeneral5);
               while not sqlgeneral4.Eof do
               begin
                  if sqlgeneral4.FieldByName('nombre').asstring<>'TELEFONO 1' then
                     querys('insert into contactos (idcontacto,nombre,apaterno,amaterno,cargo,area,procedencia,nivel,relacion,'+
                     ' usuario,fecha,hora) values ('+
                     '"'+sqlgeneral5.fieldbyname('idcontacto').asstring+'","'+sqlgeneral4.fieldbyname('nombre').asstring+'",'+
                     '"'+sqlgeneral4.fieldbyname('apaterno').asstring+'","'+sqlgeneral4.fieldbyname('amaterno').asstring+'",'+
                     '"'+sqlgeneral4.fieldbyname('cargo').asstring+'","'+sqlgeneral4.fieldbyname('area').asstring+'",'+
                     '"oportunidades/usuarios","'+sqlgeneral4.fieldbyname('nivel').asstring+'",'+
                     '"'+sqlgeneral4.fieldbyname('relacion').asstring+'","'+frmprincipal.ucprincipal.CurrentUser.LoginName+'",'+
                     '"'+datetostr(date)+'","'+timetostr(time)+'")',1,sqlgeneral6);
                  sqlgeneral4.Next;
               end;
            end;
         end;
         querys('update oportunidades set idusuario= '+dmreportes.sqlgeneral5.FieldByName('idcontacto').AsString+
         ' where idoportunidad='+idoportunidad,1,dmreportes.sqlgeneral4);
         frmcontacto.inicializa(strtoint(idoportunidad),dmreportes.sqlgeneral5.FieldByName('idcontacto').AsInteger,'oportunidades/usuarios','idoportunidad');
         frmcontacto.ShowModal;
         if ValidarDatosOportCliente(idoportunidad,ban)=true then
         begin
            result:=true;
            exit;
         end;
      end
      else
      begin
          //frmcontacto.inicializa(strtoint(edclave.Text),tbloportunidadesidusuario.AsInteger,'oportunidades/usuarios','idoportunidad');
          frmcontacto.inicializa(strtoint(idoportunidad),dmreportes.sqlgeneral2.FieldByName('idusuario').AsInteger,'oportunidades/usuarios','idoportunidad');
          frmcontacto.ShowModal;
          if ValidarDatosOportCliente(idoportunidad,ban)=true then
          begin
            result:=true;
            exit;
          end;
      end;
  end;

  //insertar cuenta nueva....
  if(ban) then
  begin

    contrasena:=UpperCase(InputBox('Contraseña del Cliente','Ingrese la Contraseña',''));
    if contrasena<>'' then
    begin
      frmubicacion:=Tfrmubicacion.Create(nil);
      if frmubicacion.ShowModal<>mrok then
      if application.MessageBox('Este Cliente tiene Correo Electronico?','AVISO',MB_YESNO+MB_ICONQUESTION)=idyes then
      repeat
         ban:=true;
         email:=UpperCase(InputBox('Correo Electronico','Ingrese el Correo Electronico',''));
         if checarcorreo(email)=false then
         begin
            application.MessageBox('Correo Electronico Invalido','AVISO',MB_OK+MB_ICONERROR);
            ban:=false;
         end;
      until ban;

    end;
    if (contrasena<>'') and (ubicacion<>'') then
    begin
    //sync
      if ConectadaServidor then
         Numcliente:=inttostr(CuentaLibre)
      else
         Numcliente:=inttostr(Cuentaapartada);
      InsertaCliente(idoportunidad,numcliente);
      if(querys('select patrullaje from clientes c left join categorias cat '+
            ' on c.idcategoria=cat.idcategoria left join TiposMonitoreo t on t.idtipomonitoreo=cat.idtipomonitoreo '+
            ' where idcliente='+numcliente,0,sqlgeneral)>0) then
      begin
        if(sqlgeneral.fieldbyname('patrullaje').AsInteger=1) then
          patrulla:=0
        else
          patrulla:=1;
      end;
      {
      if application.MessageBox('Se le va a dar Servicio Con Patrullaje?','AVISO',MB_ICONQUESTION+MB_YESNO)=idyes then
         patrulla:=0
      else
         patrulla:=1;
      }
      bpcambios('clientes', numcliente, 'idcliente');
      querys('update clientes set password="'+contrasena+'", NotaUbicacion="'+ubicacion+'", usuarioweb="'+numcliente+'",'+
      ' passwordweb="'+contrasena+'", email="'+email+'", NoPatrulla='+inttostr(patrulla)+' where idcliente='+numcliente,1,dmreportes.sqlgeneral);
      apcambios('idcliente', numcliente, 'clientes', 'ValidarDatosOportCliente');
      result:=true;
    end
    else
    begin
      result:=false;
      exit;
    end;
  end
  //si no se va a crear un cliente
  else
  begin
    querys('select o.cuenta,o.idtel,o.idusuario,of.idfact_cliente,idcontacto from oportunidades as o left join OportunidadesFact as of on (o.idfact=of.idfact) where idoportunidad='+idoportunidad,0,dmreportes.sqlgeneral);
    if querys('select password,NotaUbicacion from clientes where idcliente='+dmreportes.sqlgeneral.FieldByName('cuenta').AsString,0,dmreportes.sqlgeneral2)=0 then
    begin
      contrasena:=UpperCase(InputBox('Contraseña del Cliente','Ingrese la Contraseña',''));
      if contrasena<>'' then
         ubicacion:=UpperCase(InputBox('Datos de Ubicacion','Ingrese los Datos de Ubicacion',''));
      if (contrasena<>'') and (ubicacion<>'') then
      begin
         Actualizaclientes(idoportunidad,dmreportes.sqlgeneral.FieldByName('cuenta').AsString);

         bpcambios('clientes', dmreportes.sqlgeneral.FieldByName('cuenta').AsString, 'idcliente');
         querys('update clientes set password="'+contrasena+'", NotaUbicacion="'+ubicacion+
         '" where idcliente='+dmreportes.sqlgeneral.FieldByName('cuenta').AsString,1,dmreportes.sqlgeneral);
         apcambios('idcliente', dmreportes.sqlgeneral.FieldByName('cuenta').AsString, 'clientes', 'ValidarDatosOportCliente');
         result:=true;
      end
      else
      begin
         result:=false;
         exit;
      end;
    end
    else
      Actualizaclientes(idoportunidad,dmreportes.sqlgeneral.FieldByName('cuenta').AsString);
  end;
  result:=true;
end;


procedure Actualizaclientes(NumOportunidad,NumCta:string);
var band:boolean;
begin
   with DMREPORTES do
   begin
      band:=false;
      querys('Select if((c.rsocial=o.rsocial) and (c.nombre=o.nombre) and (c.apaterno= o.apaterno) and '+
      '(c.amaterno= o.amaterno) , "OK", "X") as bien,o.idfact as FacturaOportunidad,o.idtel as tel,'+
      'o.idcontacto as contacto,o.idusuario as usuario,o.NotaUbicacion as nota from clientes as c '+
      'join oportunidades as o where idcliente='+NumCta+' and o.idoportunidad='+
      numOportunidad, 0,sqlgeneral8);

      //############################## Actualizar los Datos del Cliente #####################################

      querys('select o.*,ag.idvendedor from oportunidades o left join agenda_vendedores ag using(idoportunidad)'+
      ' where idoportunidad='+numoportunidad,0,sqlgeneral7);

      querys('select idsector from col_sector where idcol='+sqlgeneral7.fieldbyname('idcol').asstring,0,sqlgeneral6);
      bpcambios('clientes', NumCta, 'idcliente');

      querys('update clientes set rsocial="'+sqlgeneral7.fieldbyname('rsocial').asstring+'",nombre="'+
      sqlgeneral7.fieldbyname('nombre').asstring+'",apaterno="'+sqlgeneral7.fieldbyname('apaterno').asstring+
      '",amaterno="'+sqlgeneral7.fieldbyname('amaterno').asstring+'",dir="'+sqlgeneral7.fieldbyname('dir').asstring
      +'",numero="'+sqlgeneral7.fieldbyname('numero').asstring+'",ciudad="'+sqlgeneral7.fieldbyname('ciudad').asstring
      +'",estado="'+sqlgeneral7.fieldbyname('estado').asstring+'",idcol="'+sqlgeneral7.fieldbyname('idcol').asstring
      +'",cp="'+sqlgeneral7.fieldbyname('cp').asstring+'",refs="'+AnsiReplaceStr(AnsiReplaceStr(sqlgeneral7.fieldbyname('entre').asstring,'"',''),'#39','')+
      '",idgiro="'+sqlgeneral7.fieldbyname('idgiro').asstring+'",idcategoria="'+
      sqlgeneral7.fieldbyname('idcategoria').asstring+'", idfuente="'+sqlgeneral7.fieldbyname('idfuente').asstring
      +'",idorigen="'+sqlgeneral7.fieldbyname('idorigen').asstring+'",idvendedor="'+sqlgeneral7.fieldbyname('idvendedor').asstring
      +'",Sincronizado=2,sector='+sqlgeneral6.fieldbyname('idsector').asstring+', '+
      'idprovtel='+sqlgeneral7.fieldbyname('idprovtel').asstring+', idprovcel='+sqlgeneral7.fieldbyname('idprovcel').asstring+', '+
      'lineatel='+sqlgeneral7.fieldbyname('lineatel').asstring+', basecel='+sqlgeneral7.fieldbyname('basecel').asstring+', prepago='+sqlgeneral7.fieldbyname('prepago').asstring+' '+
      'where idcliente='+numcta,1,sqlgeneral7);
      apcambios('idcliente', NumCta, 'clientes', 'Actualizaclientes');

      //############################# Pasar Datos de Facturacion ########################################
      if sqlgeneral8.fieldbyname('FacturaOportunidad').AsInteger > 0 then
      begin
            querys('select idfact from clientes where idcliente='+numcta,0,sqlgeneral5);
            if sqlgeneral5.FieldByName('idfact').asinteger=0 then
            begin
               querys('select max(idfact)+1 as idfact from ClientesFact ',0,sqlgeneral5);
               querys('select p.*,col.nombre as colonia from OportunidadesFact as p left join colonias as col on(p.idcol=col.idcol)'+
               ' where idfact='+sqlgeneral8.fieldbyname('FacturaOportunidad').AsString,0,sqlgeneral3);
               querys('INSERT into ClientesFact(idfact,rsocial,nombre,apaterno,amaterno,dir,numero,idcol,ciudad,'+
               'cp,rfc,telefono,casa,idcliente,DirCres,ColCres,CdCres,CpCres,RFCCres,NombreCres,EstadoCres) values('+
               sqlgeneral5.fieldbyname('idfact').Asstring+',"'+sqlgeneral3.fieldbyname('rsocial').asstring+'" ,'+''''+sqlgeneral3.fieldbyname('nombre').asstring
               +''' , '+''''+sqlgeneral3.fieldbyname('apaterno').asstring +''' ,'+''''+sqlgeneral3.fieldbyname('amaterno').asstring
               +''', '+' '+''''+sqlgeneral3.fieldbyname('dir').asstring +''','+''''+sqlgeneral3.fieldbyname('numero').asstring +
               ''','+''''+sqlgeneral3.fieldbyname('idcol').asstring +''','+''''+sqlgeneral3.fieldbyname('ciudad').asstring +''','+
               ''''+sqlgeneral3.fieldbyname('cp').asstring +''','+' '+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+''''+
               sqlgeneral3.fieldbyname('telefono').asstring +''','+''''+sqlgeneral3.fieldbyname('casa').asstring +''','+NumCta+','+
               quotedstr(sqlgeneral3.fieldbyname('dir').asstring +' '+sqlgeneral3.fieldbyname('numero').asstring)+','+
               ' '+''''+sqlgeneral3.fieldbyname('colonia').asstring +''','+''''+sqlgeneral3.fieldbyname('ciudad').asstring+''','+
               ''''+sqlgeneral3.fieldbyname('cp').asstring+''','+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+
               quotedstr(sqlgeneral3.fieldbyname('nombre').asstring + ' '+sqlgeneral3.fieldbyname('apaterno').asstring +' '+
               sqlgeneral3.fieldbyname('amaterno').asstring) +','+''''+sqlgeneral3.fieldbyname('estado').asstring +
               ''' )',1,sqlgeneral2);
               bpcambios('clientes', NumCta, 'idcliente');
               querys('update clientes set idfact='+sqlgeneral5.fieldbyname('idfact').Asstring+' where idcliente='+NumCta,1,sqlgeneral2);
               apcambios('idcliente', NumCta, 'clientes', 'Actualizaclientes');
            end
            else
            begin
               querys('select p.*,col.nombre as colonia from OportunidadesFact as p left join colonias as col on(p.idcol=col.idcol) '+
               'where idfact='+sqlgeneral8.fieldbyname('FacturaOportunidad').AsString,0,sqlgeneral3);

               querys('update ClientesFact set rsocial="'+sqlgeneral3.fieldbyname('rsocial').asstring+'",nombre="'+
               sqlgeneral3.fieldbyname('nombre').asstring+'",apaterno="'+sqlgeneral3.fieldbyname('apaterno').asstring+'",amaterno="'+
               sqlgeneral3.fieldbyname('amaterno').asstring+'",dir="'+sqlgeneral3.fieldbyname('dir').asstring+'",numero="'+
               sqlgeneral3.fieldbyname('numero').asstring+'",idcol="'+sqlgeneral3.fieldbyname('idcol').asstring+'",'+
               'ciudad="'+sqlgeneral3.fieldbyname('ciudad').asstring+'",cp="'+sqlgeneral3.fieldbyname('cp').asstring+'",rfc="'+
               sqlgeneral3.fieldbyname('rfc').asstring+'",telefono="'+sqlgeneral3.fieldbyname('telefono').asstring+'",casa="'+
               sqlgeneral3.fieldbyname('casa').asstring+'",DirCres="'+sqlgeneral3.fieldbyname('dir').asstring+' '+
               sqlgeneral3.fieldbyname('numero').asstring+
               '",ColCres="'+sqlgeneral3.fieldbyname('colonia').asstring+'",CdCres="'+sqlgeneral3.fieldbyname('ciudad').asstring
               +'",CPCres="'+sqlgeneral3.fieldbyname('cp').asstring+'",EstadoCres="'+sqlgeneral3.fieldbyname('estado').asstring
               +'",RFCCres="'+sqlgeneral3.fieldbyname('rfc').asstring+'",NombreCres="'+sqlgeneral3.fieldbyname('nombre').asstring
               +' '+sqlgeneral3.fieldbyname('apaterno').asstring+' '+sqlgeneral3.fieldbyname('amaterno').asstring+'"'+
               ' where idfact='+sqlgeneral5.fieldbyname('idfact').asstring,1,sqlgeneral6);
            end;
      end;

       //########################### Pasar telefonos ##################################
      if sqlgeneral8.fieldbyname('tel').AsInteger > 0 then
      begin
         querys('select idtel from clientes where idcliente='+numcta,0,sqlgeneral7);
         if sqlgeneral7.fieldbyname('idtel').AsInteger>0 then
         begin
            querys('DROP TABLE IF EXISTS tmptelefonos'+frmprincipal.idmaq,1,sqlgeneral6);
            querys('create table tmptelefonos'+frmprincipal.idmaq+' select * from telefonos where idtel='+
            sqlgeneral7.fieldbyname('idtel').asstring,1,sqlgeneral6);
            querys('delete from telefonos where idtel='+sqlgeneral7.fieldbyname('idtel').asstring,1,sqlgeneral6);
         end
         else
            querys('select max(idtel)+1 as idtel from telefonos',0,sqlgeneral7);

         querys('INSERT into telefonos(idtel,telefono,tipo_tel,procedencia,extencion,usuario,fecha,hora) select '+
         sqlgeneral7.Fieldbyname('idtel').Asstring+',telefono,tipo_tel,"clientes",extencion,"'+
         frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+timetostr(time)+'" '+
         ' from tmptelefonos'+frmprincipal.idmaq+' where idtel='+sqlgeneral8.fieldbyname('tel').AsString,1,sqlgeneral5);
         querys('DROP TABLE IF EXISTS tmptelefonos'+frmprincipal.idmaq,1,sqlgeneral7);
      end;

         //##################### Pasar Responsables ####################################
      if sqlgeneral8.fieldbyname('contacto').AsInteger > 0 then
      begin
         querys('select idcontacto from clientes where idcliente='+numcta,0,sqlgeneral7);
         if sqlgeneral7.fieldbyname('idcontacto').AsInteger>0 then
            querys('delete from contactos where idcontacto='+sqlgeneral7.fieldbyname('idcontacto').AsString+
            ' and procedencia ="clientes"',1,sqlgeneral6)
         else
         begin
            querys('select max(idcontacto)+1 as idcontacto from contactos',0,sqlgeneral7);
            band:=true;
         end;
         querys('insert into contactos (idcontacto,nombre,apaterno,amaterno,cargo,area,idtel,'+
         ' procedencia,tipo,nivel,cuenta,tipo_referencia,usuario,fecha,hora) select '+
         sqlgeneral7.fieldbyname('idcontacto').asstring+',nombre,apaterno,amaterno,'+
         ' cargo,area,idtel,"clientes",tipo,nivel,cuenta,tipo_referencia,"'+
         frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+timetostr(time)+
         '" from contactos where idcontacto='+sqlgeneral8.fieldbyname('contacto').Asstring+' and procedencia="oportunidades"',1,sqlgeneral5);
         if band then
         begin
            bpcambios('clientes', NumCta, 'idcliente');
            querys('update clientes set idcontacto='+sqlgeneral7.fieldbyname('idcontacto').Asstring+' where idcliente='+NumCta,1,sqlgeneral2);
            apcambios('idcliente', NumCta, 'clientes', 'Actualizaclientes');
         end;
         band:=false;
      end;

      //######################### Pasar Usuarios ########################################
      if sqlgeneral8.fieldbyname('usuario').AsInteger > 0 then
      begin
         querys('select idusuario from clientes where idcliente='+numcta,0,sqlgeneral7);
         if sqlgeneral7.fieldbyname('idusuario').AsInteger>0 then
            querys('delete from contactos where idcontacto='+sqlgeneral7.fieldbyname('idusuario').AsString+
            ' and procedencia ="clientes/usuarios"',1,sqlgeneral6)
         else
         begin
            querys('select max(idcontacto)+1 as idusuario from contactos',0,sqlgeneral7);
            band:=true;
         end;
         querys('insert into contactos (idcontacto,nombre,apaterno,amaterno,cargo,area,idtel,'+
         ' procedencia,tipo,nivel,cuenta,tipo_referencia,usuario,fecha,hora) select '+
         sqlgeneral7.fieldbyname('idusuario').asstring+',nombre,apaterno,amaterno,'+
         ' cargo,area,idtel,"clientes/usuarios",tipo,@i:=@i+1,cuenta,tipo_referencia,"'+
         frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+timetostr(time)+
         '" from contactos where idcontacto='+sqlgeneral8.fieldbyname('usuario').Asstring+' and procedencia="oportunidades/usuarios"',1,sqlgeneral5);
         if band then
         begin
            bpcambios('clientes', NumCta, 'idcliente');
            querys('update clientes set idusuario='+sqlgeneral7.fieldbyname('idusuario').Asstring+' where idcliente='+NumCta,1,sqlgeneral2);
            apcambios('idcliente', NumCta, 'clientes', 'Actualizaclientes');
         end;
         //band:=false;
      end;

      if sqlgeneral8.FieldByName('nota').AsString<>'' then
      begin
         bpcambios('clientes', NumCta, 'idcliente');
         querys('update clientes set NotaUbicacion=(select NotaUbicacion from oportunidades where idoportunidad='+
         NumOportunidad+') where idcliente='+NumCta,1,sqlgeneral);
         apcambios('idcliente', NumCta, 'clientes', 'Actualizaclientes');
      end;
   end;
end;

function CerrarEventoOportunidad(combo,evento,eventosvista,oportunidad:string):integer;
var  si,nueva:boolean; tipo,temp :string;           // idevento     numcliente,
begin
  si := false;
  nueva:=false;
  querys('select idestatus,finaliza from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
  if dmreportes.sqlgeneral.FieldByName('finaliza').AsString = 'SI' then
  begin
      if application.MessageBox('Este estatus hara que se cierre este evento desea continuar?','Pregunta',mb_yesno+MB_ICONQUESTION)=idno then
      begin
         result:=1;
         exit;
      end;
  end;
  querys('select rsocial,cuenta from oportunidades where idoportunidad='+oportunidad,0,dmreportes.sqlgeneral);
  if OcurrenciaWord(dmreportes.sqlgeneral.fieldbyname('rsocial').AsString,'OXXO')>0 then
  begin
      if dmreportes.sqlgeneral.FieldByName('cuenta').AsString='0' then
      begin
         InsertaCliente(oportunidad,inttostr(CuentaLibre));
         //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
         querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
         //actualiza el estatus del oportunidad
         querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+
         ',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
         Application.MessageBox('La Oportunidad se a Cerrado','Aviso',MB_OK+MB_ICONINFORMATION);
         exit;
      end;
  end;
  if ((combo = 'ACEPTADA') or (combo = 'CERRADA')) then
  begin
      querys('select count(distinct(d.idopcion)) as opcion from DetPresupuestos2 as d left join presupuestos2 as p on (d.idpresupuesto=p.idpresupuesto) where p.idoportunidad='+oportunidad,0,dmreportes.sqlgeneral);
      querys('SELECT actividades_vendedores.idevento FROM estatus_eventos INNER JOIN agenda_vendedores ON (estatus_eventos.idestatus = agenda_vendedores.idestatus) INNER JOIN actividades_vendedores ON (agenda_vendedores.idevento = '+
         ' actividades_vendedores.idevento) INNER JOIN tipos_actividades ON  (actividades_vendedores.idtipo_actividad = tipos_actividades.idtipo_actividad) WHERE (agenda_vendedores.idevento = '+quotedstr(evento)+') AND '+
         ' (estatus_eventos.finaliza = ''NO'')  And (actividades_vendedores.realizada=0 OR isnull(actividades_vendedores.realizada))',0,dmreportes.sqlgeneral);
      if dmreportes.sqlgeneral.RecordCount > 0 then
      begin
         //NO todas las actividades fueron realizadas entonces
         application.MessageBox('No puede cerrar el evento si no ha realizado todas sus actividades ','Aviso',mb_iconinformation);
         result:=1;
         exit;
      end
      else
      // si todas actividades son realizadas
      begin
         querys('SELECT actividades_vendedores.idevento,tipos_actividades.nombre FROM actividades_vendedores '+
         ' INNER JOIN tipos_actividades ON (actividades_vendedores.idtipo_actividad = tipos_actividades.idtipo_actividad)'+
         ' WHERE (actividades_vendedores.idevento = '+eventosvista+') AND (tipos_actividades.nombre = '+
         quotedstr('PRESUPUESTO')+') AND (actividades_vendedores.realizada = 1)',0,dmreportes.sqlgeneral);
         //SI YA TIENE PRESUPUESTO
         if dmreportes.sqlgeneral.RecordCount > 0 then
         begin
            querys('SELECT o.cuenta, t.idtipo_oportunidad AS oportunidad, o.idoportunidad FROM agenda_vendedores as a left JOIN '+
            'tipo_oportunidad as t ON (a.idtipo_oportunidad = t.idtipo_oportunidad) left JOIN oportunidades as '+
            'o ON (a.idoportunidad = o.idoportunidad) WHERE a.idoportunidad = "'+oportunidad+'"',0,dmreportes.SqlGeneral);
            tipo:=dmreportes.SqlGeneral.FieldByName('oportunidad').AsString;
            if dmreportes.SqlGeneral.FieldByName('cuenta').AsString='0' then
               si:= true
            else
            begin
               if tipo<>'3' then
                   si := false;
            end;
            //SI NO TIENE CUENTA
            if (si) then
            begin
            /////EQUIPO SIN ENLACE////////
               if (tipo='24') or (tipo='25') then
               begin
                  if not ValidarEqsenlace(oportunidad) then
                  begin
                     Result:=1;
                     exit;
                  end
                  else
                  begin
                      //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
                      querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
                      //actualiza el estatus del oportunidad
                      querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+
                      ',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
                  end;
               end //sin enlace
           /////EQUIPO////////
               else
               begin
                  if not ValidarDatosOportCliente(oportunidad,true) then
                  begin
                     Result:=1;
                     exit;
                  end
                  else
                  begin
                      //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
                      querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
                      //actualiza el estatus del oportunidad
                      querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
                  end;
               end;
            end
      ////////SI YA TIENE CUENTA////////////
            else
            begin
            ////SI ES CONEXION////////
               if (tipo='13') or (tipo='23') or (tipo='27') or (tipo='9') then
               begin
                  if application.MessageBox('Deseas Modificar los Datos de Esta Oportunidad?','Aviso',MB_YESNO+MB_ICONQUESTION)=idyes then
                  begin
                     querys('select idfact,idcontacto,idtel,idusuario,cuenta from oportunidades where idoportunidad='+oportunidad,0,dmreportes.sqlgeneral8);
                  /////////////datos facturacion ////////////////
                     frmDatosFactOport:=TfrmDatosFactOport.Create(nil);
                     frmDatosFactOport.inicializa(oportunidad,dmreportes.sqlgeneral8.fieldbyname('idfact').AsInteger,1);
                     frmdatosfactoport.ShowModal;
                 ////////////telefonos ////////////////////////////////
                     frmtel.inicializa(strtoint(oportunidad),dmreportes.sqlgeneral8.fieldbyname('idtel').AsInteger,0,'oportunidades','idoportunidad', false);
                     frmtel.ShowModal;
                  ///////// responsables  ////////////////////////////
                     frmcontacto.inicializa(strtoint(oportunidad),dmreportes.sqlgeneral8.fieldbyname('idcontacto').AsInteger,'oportunidades','idoportunidad');
                     frmcontacto.ShowModal;
                  ////////////usuarios ////////////////////////
                     frmcontacto.inicializa(strtoint(oportunidad),dmreportes.sqlgeneral8.fieldbyname('idusuario').AsInteger,'oportunidades/usuarios','idoportunidad');
                     frmcontacto.ShowModal;
                     frmubicacion:=Tfrmubicacion.Create(nil);
                     frmubicacion.inicializa(oportunidad,dmreportes.sqlgeneral8.fieldbyname('cuenta').AsString,true);
                     frmubicacion.ShowModal;
                     if not ValidarDatosOportCliente(oportunidad,false) then
                     begin
                        Result:=1;
                        exit;
                     end
                     else
                     begin
                        //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
                        querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
                        //actualiza el estatus del oportunidad
                        querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
                        Application.MessageBox('La Oportunidad se a Cerrado','Aviso',MB_OK+MB_ICONINFORMATION);
                     end;
                  end
                  else
                  begin
                     //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
                     querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
                     //actualiza el estatus del oportunidad
                     querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+
                     ',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
                     Application.MessageBox('La Oportunidad se a Cerrado','Aviso',MB_OK+MB_ICONINFORMATION);
                  end;
               end;
               //CUANDO ES REUBICACION
               if tipo='5' then
               begin
                  //NOTA: LA ACTUALIZACION DE DATOS SE REALIZA HASTA QUE SE CIERRE LA INSTALACION EN LA PANTALLA DE INSTMOD
                  if application.MessageBox('Esta oportunidad es una REUBICACION, Deseas Modificar sus datos?','AVISO',MB_YESNO+MB_ICONQUESTION)=idyes then
                  begin
                     querys('select idfact,idcontacto,idtel,idusuario,cuenta from oportunidades where idoportunidad='+oportunidad,0,dmreportes.sqlgeneral8);
                  /////////////datos facturacion ////////////////
                     frmDatosFactOport:=TfrmDatosFactOport.Create(nil);
                     frmDatosFactOport.inicializa(oportunidad,dmreportes.sqlgeneral8.fieldbyname('idfact').AsInteger,1);
                     frmdatosfactoport.ShowModal;
                 ////////////telefonos ////////////////////////////////
                     frmtel.inicializa(strtoint(oportunidad),dmreportes.sqlgeneral8.fieldbyname('idtel').AsInteger,0,'oportunidades','idoportunidad', false);
                     frmtel.ShowModal;
                  ///////// responsables  ////////////////////////////
                     //querys('Insert into contactos (idcontacto,nombre,apaterno,amaterno,cargo,area,idtel,nivel,relacion,cuenta,procedencia)'+
                     //' SELECT idcontacto,nombre,apaterno,amaterno,cargo,area,idtel,nivel,relacion,cuenta,"oportunidades"'+
                     //' FROM contactos WHERE  idcontacto='+dmreportes.sqlgeneral8.fieldbyname('idcontacto').Asstring,1,dmreportes.sqlgeneral);
                     frmcontacto.inicializa(strtoint(oportunidad),dmreportes.sqlgeneral8.fieldbyname('idcontacto').AsInteger,'oportunidades','idoportunidad');
                     frmcontacto.ShowModal;
                  ////////////usuarios ////////////////////////
                     //querys('Insert into contactos (idcontacto,nombre,apaterno,amaterno,cargo,area,idtel,nivel,relacion,cuenta,procedencia)'+
                     //' SELECT idcontacto,nombre,apaterno,amaterno,cargo,area,idtel,nivel,relacion,cuenta,"oportunidades/usuarios"'+
                     //' FROM contactos WHERE  idcontacto='+dmreportes.sqlgeneral8.fieldbyname('idusuario').Asstring,1,dmreportes.sqlgeneral);
                     frmcontacto.inicializa(strtoint(oportunidad),dmreportes.sqlgeneral8.fieldbyname('idusuario').AsInteger,'oportunidades/usuarios','idoportunidad');
                     frmcontacto.ShowModal;
                     frmubicacion:=Tfrmubicacion.Create(nil);
                     frmubicacion.inicializa(oportunidad,dmreportes.sqlgeneral8.fieldbyname('cuenta').AsString,true);
                     frmubicacion.ShowModal;
                     //temp:=dmreportes.sqlgeneral8.fieldbyname('cuenta').AsString;
                     //Actualizaclientes(oportunidad,dmreportes.sqlgeneral8.fieldbyname('cuenta').AsString);
                     frmprincipal.ucprincipal.Log('Realizo Reubicacion de la cuenta: '+temp+' Oportunidad: '+oportunidad,1);
                  end;
                   //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
                   querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
                   //actualiza el estatus del oportunidad
                   querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+
                   ',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
                   //Application.MessageBox('La Oportunidad se a Cerrado','Aviso',MB_OK+MB_ICONINFORMATION);
               end;
               if nueva then
               begin
                  {querys('select idfact from oportunidades where idoportunidad='+oportunidad,0,dmreportes.sqlgeneral);
                  querys('delete from OportunidadesFact where idfact='+dmreportes.sqlgeneral.fieldbyname('idfact').asstring,1,dmreportes.sqlgeneral2);
                  querys('update oportunidades set idfact=0, idcontacto=0, idusuario=0,cuenta=0 where idoportunidad='+oportunidad,1,dmreportes.sqlgeneral2);
                  if not ValidarDatosOportCliente(oportunidad,true) then
                  begin
                     Result:=1;
                     exit;
                  end
                  else
                  begin
                      //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
                      querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
                      //actualiza el estatus del oportunidad
                      querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
                  end;}
               end
               else
               begin
                   //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
                   querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
                   //actualiza el estatus del oportunidad
                   querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+
                   ',fecha_cierre="'+datetostr(date)+'",hora_cierre="'+FormatDateTime('HH:mm:ss',Time)+'" where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
                   Application.MessageBox('La Oportunidad se a Cerrado','Aviso',MB_OK+MB_ICONINFORMATION);
               end;
            end;
         end
         //si le falta presupuesto
         else
         begin
            application.MessageBox('Tiene pendiente realizar el presupuesto a esta Oportunidad','Aviso',mb_iconinformation);
            result:=0;
            exit;
         end;
      end; //else de actividades
  end //if aceptada o cerrada
  else //SI NO ES ACEPTADA O CERRADA
  begin
    //trae el idestatus de la tabla estatus_eventos dependiendo del nombre
    querys('select idestatus from estatus_eventos where nombre = '+quotedstr(combo),0,dmreportes.sqlgeneral);
    //actualiza el estatus del oportunidades
    querys('update agenda_vendedores set idestatus='+dmreportes.sqlgeneral.fieldbyname('idestatus').AsString+' where idevento='+quotedstr(evento),1,dmreportes.sqlgeneral);
    frmprincipal.ucprincipal.Log('Modifico el estatus de la oportunidad '+oportunidad+' a '+combo,2);
  end;
  result:=0;
end;


procedure BusquedaSectoresVencidos(const TipoBusqueda:integer;campo,SiReporte,tabla,abogado,sector1,sector2,idunidad1,idunidad2,desde,hasta:string;ckbabogado,ckbforzosos,ckbnormales,chkSinEnlace,ckbbloqueados,chkSinCuentasReporte:bool);
  var cadena,_inicio,_condiciones,_final,dias1,campos,dias2,_diasVencidos:string;
  tmp : integer;
begin
dias1 := datetostr(now);
tmp := 0;

if strtoint(desde) <= 30 then
  tmp := strtoint(desde);

if TipoBusqueda = 0 then
  begin
  dias1 := datetostr(now-tmp);
  _diasVencidos := 'max(if(to_days("'+datetostr(date)+'") -to_days(pc.FechaVence) > 0,to_days("'+datetostr(date)+'") -to_days(pc.FechaVence),0))';
  end
else
  begin
  dias1 := datetostr(now+tmp);
  dias2 := datetostr(now+strtoint(hasta));
  _diasVencidos := 'min(if(to_days(pc.FechaVence) - to_days("'+datetostr(date)+'")  > 0,to_days(pc.FechaVence) - to_days("'+datetostr(date)+'"),0))';
  end;

if(SiReporte = 'S') then
  campos := 'sum(case 1 WHEN to_days("'+datetostr(date)+'") -to_days(pc.FechaVence) <=30  then pc.restante ELSE 0 end) * 1 as condicion1,'+
            'sum(CASE 1 WHEN to_days("'+datetostr(date)+'") -to_days(pc.FechaVence) >= 31 and to_days("'+datetostr(date)+'") -to_days(pc.FechaVence) <=59  then pc.restante ELSE 0  END) * 1 AS condicion2,'+
            'sum(CASE 1 WHEN to_days("'+datetostr(date)+'") -to_days(pc.FechaVence) >= 60 and to_days("'+datetostr(date)+'") -to_days(pc.FechaVence) <=90  then pc.restante ELSE 0  END ) * 1 AS condicion3,'+
            'sum(CASE 1 WHEN to_days("'+datetostr(date)+'") -to_days(pc.FechaVence) >90  then pc.restante ELSE 0 END) * 1 AS condicion4,   ';

campos := campos + campo;

_inicio := 'SELECT distinct pc.idcliente as cuenta, pc.idcliente ,'+_diasVencidos+' as dias,'+
           'sum(pc.restante) as saldo,cf.NombreCres as nombre,con.nombre as contrato,if(c.bloqueado = 0 ,"N","S") as tipo,'+
           campos+
           '(SELECT if(i.EstatusInst=0,"PENDI",if(i.EstatusInst=1,"INSTA",if(i.EstatusInst=2,"SUPER",if(i.EstatusInst=4,"UBICA",if(i.EstatusInst=5,"CUESTI",if(i.EstatusInst=7,"CANCE","")))))) AS EstatusInstalacion from instalaciones as i'+
           ' Inner join pedidos as ped on (ped.idpedido=i.idpedido) where ped.idcliente =pc.idcliente and i.estatus  <> 1  limit 0,1) as EstatusInstalacion '+
           ' from PagosClientes as pc left join  pedidos as p on (p.idpedido=pc.idpedido) '+
           ' Left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento = 1 and pc.movimiento = 0) LEFT JOIN clientes as c ON(c.idcliente=pc.idcliente) '+
           ' LEFT JOIN  contratos as con ON(c.TipoCont=con.TipoCont) LEFT JOIN ClientesFact as cf ON  (c.idfact=cf.idfact) ';

if(tabla = 'DETCLIENTES') then
  begin
  _inicio := _inicio +  ' LEFT JOIN DetClientes as dt on (dt.idcliente = c.idcliente) ';
  end;

_inicio := _inicio +  ' where p.estatus in(3,4,6) and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 and pc2.movimiento  is null ';

_condiciones := 'and c.sector between '+sector1+' and '+sector2+' AND p.idUnidadNegocio between '+idunidad1+' and '+idunidad2+'  and  ';

if TipoBusqueda = 0 then
  _condiciones := _condiciones +' pc.FechaVence between "1990/01/01" and "'+dias1+'" '
else
  _condiciones := _condiciones +' pc.FechaVence between "'+dias1+'" and "'+dias2+'" ' ;

if ckbabogado = true then
  _condiciones :=  _condiciones + 'and (c.idabogado = "'+abogado+'")' ;

if ((ckbforzosos) and (ckbnormales = false))then //para inactivos
  _condiciones := _condiciones+' and con.estatus=0 '
else
  if((ckbnormales) and (chkSinEnlace ) and (ckbforzosos)) then
    _condiciones := _condiciones+' and con.estatus in(0,1)'
  else
    if ((ckbnormales) and (chkSinEnlace) and (ckbforzosos = false)) then
      _condiciones := _condiciones+' and (con.estatus = 1 or c.TipoCont =''SEN'') '
    else
      if ((ckbforzosos = false) and (ckbnormales = true))then
        _condiciones := _condiciones+' and (con.estatus = 1 )  ';

if ckbbloqueados = false then
  _condiciones:=_condiciones+' and c.bloqueado = 0 ';

if chkSinCuentasReporte = true then
  cadena:=cadena+' and NoReporte=0';

if TipoBusqueda = 0 then
  _final := ' and pc.idcliente in (select pc.idcliente from PagosClientes as pc left join pedidos as p on (p.idpedido=pc.idpedido) left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento=1 and pc.movimiento=0)'+
            ' where p.estatus in(3,4) and p.saldado=0  and pc.movimiento in(0,1) and pc.restante > 0 and pc.FechaVence between adddate("'+datetostr(date)+'", interval -'+hasta+' day)  and  adddate("'+datetostr(date)+'", interval -'+desde+' day) AND p.idUnidadNegocio between '+idunidad1+' and '+idunidad2+' and pc2.movimiento  is null )';

_final :=  _final + ' and pc.idcliente not in (select pc.idcliente from PagosClientes as pc left join pedidos as p on (p.idpedido=pc.idpedido) left join PagosClientes as pc2 on (pc2.idpedido = pc.idpedido and pc2.movimiento=1 and pc.movimiento=0) '+
          ' where p.estatus in(3,4,6) and p.saldado=0 and pc.movimiento in(0,1) and pc.restante > 0 and  pc.FechaVence  between adddate("'+datetostr(date)+'", interval -100000 day)';

if TipoBusqueda = 0 then
  _final :=  _final + ' and adddate("'+datetostr(date)+'", interval - ('+hasta+' +1) day)'
else
  _final :=  _final + ' and adddate("'+datetostr(date)+'", interval + ('+desde+' -1) day)' ;

_final :=  _final + ' AND p.idUnidadNegocio between '+idunidad1+' and '+idunidad2+' and pc2.movimiento  is null ) group by pc.idcliente having saldo > 2  ';

if tabla = 'DETCLIENTES' then
  _final :=  _final + 'order by saldo desc';

querys( _inicio + _condiciones + _final ,0,dmreportes.sqlgeneral);
end;



procedure MarcarTelefono(telefono:string);
begin    //marcacion

if InicializarModems then
  begin
  tapis.HangUp;
    tapis.Phone:='';
    tapis.Phone:=TipoLinea+','+telefono;
    tapis.Call;
  end;
end;

procedure ColgarTelefono;
begin
 tapis.HangUp;
end;

function InicializarModems:bool;
begin
with dmreportes do
begin
querys('Select com1,TipoLinea From maquinas Where idmaq ='+frmprincipal.idmaq,0,SqlGeneral4);
if SqlGeneral4.FieldByName('com1').AsString <> '' then
  begin
         tapis := Tnrcommtapi.Create(nil);

         cboTelNormal := TnrDeviceBox.Create(nil);

         cboTelNormal.Parent := frmprincipal;
         cboTelNormal.Visible := false;

         cboTelNormal.nrComm := tapis;

         cboTelNormal.ItemIndex := cboTelNormal.Items.IndexOf(SqlGeneral4.fieldbyname('com1').AsString);
         tapis.DeviceIndex := cboTelNormal.Items.IndexOf(SqlGeneral4.fieldbyname('com1').AsString);


         if SqlGeneral4.FieldByName('TipoLinea').AsString = '0' then
          begin
           //trae el codigo del usuario para poder hacer llamadas telefonicas por conmutador
           querys('select CodConmutador from usuarios where idusuario = '+inttostr(frmprincipal.ucprincipal.CurrentUser.UserID),0,sqlgeneral4);
           TipoLinea := sqlgeneral4.fieldbyname('CodConmutador').AsString;
          end else
             TipoLinea := '';

          result := true;

  end else
        result := false;

 end;
end;

procedure RepVentasMensualesTotalesXOrigen(sqlgeneral,sqlgeneral2,sqlgeneral3:TMyQuery;f1,f2,TipoImpresion:string);
var f,ano,sub:string;
begin
      ano := formatdatetime('yyyy',strtodate(f1));  //el mes
      f:='Del '+f1+ ' al '+f2;

///borrar tableas por si algo quedo....
querys('DROP TABLE IF EXISTS TemporalVtasMensuales'+frmprincipal.idmaq,1,sqlgeneral3);

//creamos las tablas temporales
 querys('CREATE TABLE TemporalVtasMensuales'+frmprincipal.idmaq+' (Titulo varchar(50) default NULL, Origen varchar(50) default NULL, '+
        'ImporteDll double default 0, Venta int(11) NOT NULL default ''0'',TipoVenta varchar(50),KEY Venta (Venta)) ',1,sqlgeneral);// TYPE=MyISAM

// querys('Create Index Venta on TemporalVentasMensuales'+frmprincipal.idmaq+' (Venta)',1,sqlgeneral);

 querys('INSERT INTO TemporalVtasMensuales'+frmprincipal.idmaq+' (Titulo,Venta,Origen,TipoVenta,ImporteDll)  SELECT  distinct '+quotedstr(f)+' as Titulo,p.idpedido as Venta, '+
         'ori.nombre,tp.nombre,sum(if(tp.comisiones =1, if (dp.tc <> 1,cant*dp.costo,(cant*dp.costo)/p.TipoCambio),0)) as ToTDlls FROM DetPedido as dp '+
         'LEFT JOIN pedidos as p ON(p.idpedido=dp.idpedido) LEFT JOIN clientes ON  (p.idcliente=clientes.idcliente) LEFT JOIN ClientesFact as c ON  (clientes.idfact=c.idfact)  LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) LEFT JOIN UnidadNegocio as tp On  '+
         '(tp.idUnidadNegocio=p.idUnidadNegocio) LEFT JOIN origen as ori ON (ori.idorigen=p.idorigen) LEFT JOIN articulos as a ON(a.cod_cve=dp.cod_cve) '+
         ' WHERE  p.FechaRemision BETWEEN "'+f1+'" and "'+f2+'" and p.estatus in(3,4) and tp.instalacion in(1) and a.idlinea = 4 group by p.idpedido',1,sqlgeneral3);

//////notas de credito...........
//hacemos la busqueda por notas de credito realizadas ...... en el periodo para asi restarles al total de l venta correspondiente si esta en mismo mes......

   querys(' select distinct p.idpedido as ped,nc.TipoCambio,sum(if (tp.comisiones =1, if (dnc.cant > 0, (dnc.cant * dnc.costo),(dnc.piezas*dnc.costo)),0) )as SUMA,sum(if (tp.comisiones =1, if (dnc.cant > 0, ((dnc.cant * dnc.costo)*nc.TipoCambio)*'+floattostr(getIVA)+', '+
          '((dnc.piezas*dnc.costo)*nc.TipoCambio))*'+floattostr(getIVA)+',0) )as IVA,sum(if (tp.comisiones =1, if (dnc.cant > 0,if(dnc.tc=1,(dnc.cant * dnc.costo)/nc.TipoCambio,(dnc.cant * dnc.costo)),if(dnc.tc=1,(dnc.piezas*dnc.costo)/nc.TipoCambio,(dnc.piezas*dnc.costo))),0) ) '+
          '  as ToTDlls  from DetNotasCredito as dnc left join NotasCredito as nc ON(nc.idnc=dnc.idnc) LEFT JOIN  RemiFact as rf ON (rf.idfactura=nc.idfactura)  left join pedidos as p ON(p.idpedido=rf.idpedido) LEFT JOIN articulos as a ON(a.cod_cve=dnc.cod_cve)  '+
          ' LEFT JOIN UnidadNegocio as tp On (tp.idUnidadNegocio=p.idUnidadNegocio) LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) WHERE nc.FechaNc between "'+f1+'" and "'+f2+'" '+
          ' and tp.instalacion =1  and a.idlinea = 4 GROUP BY dnc.idpedido ',0,sqlgeneral3);

   while not sqlgeneral3.eof do begin
       sub:=Format('%8f',[sqlgeneral3.fieldbyname('TotDlls').AsFloat ]);
       querys('UPDATE TemporalVtasMensuales'+frmprincipal.idmaq+' set ImporteDll = ImporteDll - '+quotedstr(sub)+' where Venta='+quotedstr(sqlgeneral3.fieldbyname('ped').AsString),1,sqlgeneral2);
       sqlgeneral3.next;
   end;
   /////generar reporte

     if(querys('SELECT Titulo,Origen,sum(ImporteDll) as Total,TipoVenta,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM TemporalVtasMensuales'+frmprincipal.idmaq+' as t1 join DatosEmpresa as de group by Origen,TipoVenta having Total > 0',0,sqlgeneral) > 0) then
       begin

         Screen.Cursor := crDefault;
         CerrarVentanaMensaje;
         OperacionReporte('TotVtasXOrigen','Reporte de ventas mensual',TipoImpresion, 1);
       end else
          application.MessageBox('No hay datos a mostra','Aviso',MB_OK);

querys('DROP TABLE IF EXISTS TemporalVentasMensuales'+frmprincipal.idmaq,1,sqlgeneral3);

end;

procedure AuditoriaPagosXLinea(periodo,TipoImpresion:string);
begin
with dmreportes do
begin

     querys('SELECT t1.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,'+
            'concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM RepPagosXLinea as t1 join DatosEmpresa as de  '+
            'WHERE PeriodoReporte = '+''''+periodo+''' ',0,sqlgeneral);
     if sqlgeneral.FieldByName('PeriodoReporte').AsString <> '' then
      begin
           querys('SELECT * FROM RepPagosXLinea2 where periodo='+''''+periodo+''' ',0,sqlgeneral2);
           querys('select sector, round(sum(monitoreomv),2) as monitoreomv, round(sum(monitoreomxv),2) as monitoreomxv,' +
              'round(sum(equipomv),2) as equipomv, round(sum(equipomxv),2) as equipomxv, round(sum(interesesmv),2) as interesesmv, ' +
              'round(sum(interesesmxv),2) as interesesmxv,' +
              'round(sum(serviciomv),2) as serviciomv, round(sum(serviciomxv),2) as serviciomxv, round(sum(otrosmv),2) as otrosmv, round(sum(otrosmxv),2) as otrosmxv,' +
              'round(sum(monitoreomv) + sum(equipomv) + sum(interesesmv) + sum(serviciomv) + sum(otrosmv),2) as mv,' +
              'round(sum(monitoreomxv) + sum(equipomxv) + sum(interesesmxv) + sum(serviciomxv) + sum(otrosmxv),2)  as mxv,' +
              'round(sum(monitoreomv) + sum(monitoreomxv) + sum(equipomv) + sum(equipomxv) + sum(interesesmv) + sum(interesesmxv) +' +
              'sum(serviciomv) + sum(serviciomxv) + sum(otrosmv) + sum(otrosmxv),2)  as total ' + 
              'from (' +
              'select sector,if(condicion=1,sum(monitoreo),0) as monitoreomv,if(condicion=0,sum(monitoreo),0) as monitoreomxv,' +
              'if(condicion=1,sum(equipo),0) as equipomv,if(condicion=0,sum(equipo),0) as equipomxv,' +
              'if(condicion=1,sum(intereses),0) as interesesmv,if(condicion=0,sum(intereses),0) as interesesmxv,' +
              'if(condicion=1,sum(servicio),0) as serviciomv,if(condicion=0,sum(servicio),0) as serviciomxv,' +
              'if(condicion=1,sum(otros),0) as otrosmv,if(condicion=0,sum(otros),0) as otrosmxv' +
              '  from (' +
              'SELECT distinct t.idpago,sector,t.abono,round(MONITOREO,2) as monitoreo,round(equipo,2) as equipo,round(intereses,2) as intereses,' +
              'round(servicio,2) as servicio,round(otros,2) as otros,IF (pc2.FechaVence > t.FechaAlta,0,1) AS condicion ' +
              ' FROM RepPagosXLinea as t ' +
              'left JOIN  PagosClientes as pc ON (pc.idpago=t.idpago) ' +
              'left join PagosAfecta as pa ON (pc.idpago=pa.idpago)  ' +
              'left join PagosClientes as pc2 ON (pa.idpago2=pc2.idpago) ' +
              'WHERE PeriodoReporte = '+''''+periodo+''''+
              'group by t.idpago' +
              ') as t GROUP BY sector,condicion' +
              ') as tabla group by sector',0,sqlgeneral3);
           querys('select  round(sum(abono),2) as abono, idunidadnegocio, unidad from ( '+
               'SELECT distinct t.idpago,sector,t.abono, p.idunidadnegocio, u.nombre as unidad '+
               'FROM RepPagosXLinea as t left JOIN  pedidos p on p.idpedido=t.idpedido '+
               'left join UnidadNegocio u on u.idUnidadNegocio=p.idUnidadNegocio '+
               'WHERE PeriodoReporte = '+''''+periodo+''' and u.tipoenlace=1 group by t.idpago '+
               ') as t group by idunidadnegocio', 0, sqlgeneral4);

           querys('select * FROM RepPagosXLineaAnualidades as t  '+
                  'WHERE periodo = '+''''+periodo+''' ', 0, sqlgeneral5);

           OperacionReporte('PagosXLinea','Reporte de pagos por linea',TipoImpresion, 1);
      end
      else
           application.MessageBox(pchar('No exiten datos , se necesita generar corte del mes:'+periodo+'!'),'Atención',MB_ICONINFORMATION);


end;

end;


procedure BorrarTablasPagosTemp;
begin
with dmreportes do begin
     querys('DROP TABLE IF EXISTS temporal_pagosxlinea'+frmprincipal.idmaq,1,sqlgeneral);
     querys('DROP TABLE IF EXISTS temporalpagos'+frmprincipal.idmaq,1,sqlgeneral);
     querys('DROP TABLE IF EXISTS temporalpagos2'+frmprincipal.idmaq,1,sqlgeneral);
     querys('DROP TABLE IF EXISTS temporalpagos3'+frmprincipal.idmaq,1,sqlgeneral);
     querys('DROP TABLE IF EXISTS temporalpagos4'+frmprincipal.idmaq,1,sqlgeneral);
     querys('DROP TABLE IF EXISTS temporalpagos100'+frmprincipal.idmaq,1,sqlgeneral);
end;
end;

procedure RepPagosXLinea(const dfecha1,dfecha2,edusuario1,edusuario2,TipoImpresion:string;ckbtodos,Guardar, anualidad:boolean);
var dia1,dia2,m1,ano,cadena,fecha, an:string;
fecha1,fecha2:tdatetime;
begin
  Screen.Cursor := crHourglass;
  fecha1:=strtodate(dfecha1);
  fecha2:=strtodate(dfecha2);
  with dmreportes do
  begin
    if(Guardar = true) then
    begin
      fecha := meses[strtoint(formatdatetime('m',strtodate(dfecha1)))]+'-'+formatdatetime('yyyy',strtodate(dfecha1));
      querys('SELECT PeriodoReporte FROM RepPagosXLinea where PeriodoReporte='+''''+fecha+'''  limit 0,1',0,sqlgeneral2);
      if sqlgeneral2.FieldByName('PeriodoReporte').AsString <> '' then
      begin
        application.MessageBox('Ya fue generado el corte del mes y año de este reporte !','Atención',MB_ICONINFORMATION);
        Exit;
      end;
    end;
    m1 :=  formatdatetime('m',strtodate(dfecha1));
    //esto se hace por que se nececita sacar los cobros de un dia antes o del dia anterior habil antes
    //para ello necesitamos saber que dia es y asi hacer lo pertinente
    querys('select dias from PagosXLineaDias where fecha in ("'+dfecha2+'") order by fecha',0,sqlgeneral2);
    if(sqlgeneral2.RecordCount > 0) then
    begin
      fecha1:=fecha1-sqlgeneral2.Fields.Fields[0].AsInteger;
      fecha2:=fecha2-1;
    end
    else
    begin
      querys('select dayname("'+dfecha1+'") as dia1,dayname("'+dfecha2+'") as dia2',0,sqlgeneral);
      dia1:=sqlgeneral.fieldbyname('dia1').AsString;
      dia2:=sqlgeneral.fieldbyname('dia2').AsString;
      //casos normales de dias
      if dia1 = 'Monday' then
        fecha1:=fecha1-3
      else if dia1 = 'Saturday' then
          fecha1:=fecha1-1
      else
        fecha1:=fecha1-1;

      if dia2= 'Monday' then
        fecha2:=fecha2-2
      else if dia2 = 'Saturday' then
        fecha1:=fecha1-2
      else
        fecha2:=fecha2-1;
    end;
    BorrarTablasPagosTemp;

    //buscarmos primero por los cobros normales y despues por los cobro en caja
    /// primero sumamos por lineas
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////                       cobros normales     ///////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    cadena:='';
    if anualidad = true then
      an := ' and p.anualidad <> 0 '
    else
      an := ' ';

    cadena:='CREATE TABLE temporalpagos'+frmprincipal.idmaq+
           ' SELECT u.idusuario,a.inventariable,dp.id,p.idcliente,dp.idpedido,pc.idremicion,p.idfactura,l.nombre,a.moneda,'+
           ' if((truncate(((dp.costo*dp.tc)*(1+p.piva))*dp.cant,3) > p.TotMn),p.TotMn,'+
           '(truncate(((dp.costo*dp.tc)*(1+p.piva))*dp.cant,3))) as TOTAL,'+
           ' if((round(((((dp.costo*dp.tc)*(1+p.piva))*dp.cant)*100)/p.TotMn,2)) > 100,100,'+
           '(round(((((dp.costo*dp.tc)*(1+p.piva))*dp.cant)*100)/p.TotMn,2))) as Porcentaje,'+
           ' p.TotMn,pc.FechaAlta,if(c.bloqueado=0,''NO'',''SI'') AS bloqueado,c.sector, '+
           'concat(if(u.nombre is null,'' '',u.nombre),'' '',if(u.apaterno is null,'' '',u.apaterno),'+
           ''' '',if(u.amaterno is null,'' '',u.amaterno)) as Usuario, pc.idpago '+
           ' FROM DetPedido as dp LEFT JOIN pedidos as p ON (p.idpedido=dp.idpedido) LEFT JOIN articulos as a  '+
           ' ON (a.cod_cve=dp.cod_cve) LEFT JOIN lineas as l ON (l.idlinea=a.idlinea) '+
           ' LEFT JOIN RemiFact as rm ON (rm.idpedido=dp.idpedido) LEFT JOIN PagosClientes as pc ON (pc.idpedido = dp.idpedido) '+
           ' LEFT JOIN clientes as c ON (p.idcliente=c.idcliente) '+
           ' LEFT JOIN UCTabUsers as lg ON (lg.UCLogin=pc.usuario) '+
           ' LEFT JOIN usuarios as u ON (u.idusuario=lg.UCIdUser) '+
           ' WHERE pc.FechaAlta between '+''''+dfecha1+''' and '+''''+dfecha2+''' and p.estatus in(3,4,5,6) and pc.movimiento in(0,2) '+
           ' and pc.TipoCobro =0 and pc.abono > 0 '+an;
    //si es por un usuario en especifico
    if ckbtodos = false then
      cadena:=cadena + ' and lg.UCIdUser = '+quotedstr(edusuario1)+' ';  // and '+quotedstr(edusuario2.Text)+' ';
    cadena:=cadena + ' GROUP BY dp.id,u.idusuario ORDER BY dp.idpedido';
    //crea la tabla temporal de sumas por lineas
    querys(cadena,1,sqlgeneral2);
    querys('Create Index idpedido on temporalpagos'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////                       cobros en caja      ///////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //ahora siguen los cobros en caja... el dia depende del dia de la sem por ejemplo si es lunes, considera apertir del viernes y sab anteriores.
    cadena:='';                                     //  (1+p.piva)
    cadena:='INSERT INTO temporalpagos'+frmprincipal.idmaq+' (idusuario,inventariable,id,idcliente,idpedido,idremicion,idfactura,'+
            'nombre,moneda,TOTAL,Porcentaje,TotMn,FechaAlta,bloqueado,sector,Usuario,idpago) SELECT u.idusuario,a.inventariable,dp.id,'+
            'p.idcliente,dp.idpedido,pc.idremicion, p.idfactura,l.nombre,a.moneda,if((truncate(((dp.costo*dp.tc)*(1+p.piva))*dp.cant,3)>p.TotMn),'+
            'p.TotMn,(truncate(((dp.costo*dp.tc)*(1+p.piva))*dp.cant,3)) ) as TOTAL,'+
            'if((round(((((dp.costo*dp.tc)*(1+p.piva))*dp.cant)*100)/p.TotMn,2)) > 100,100,(round(((((dp.costo*dp.tc)*'+
            '(1+p.piva))*dp.cant)*100)/p.TotMn,2)) ) as Porcentaje,p.TotMn,pc.FechaAlta,if (c.bloqueado=0,''NO'',''SI'') AS bloqueado,c.sector, '+
            'concat(if (u.nombre is null,'' '',u.nombre),'' '', if (u.apaterno is null,'' '',u.apaterno),'' '','+
            'if(u.amaterno is null,'' '',u.amaterno)) as Usuario,pc.idpago '+
            ' FROM DetPedido as dp LEFT JOIN pedidos as p ON (p.idpedido=dp.idpedido) LEFT JOIN articulos as a  '+
            ' ON (a.cod_cve=dp.cod_cve) LEFT JOIN lineas as l ON (l.idlinea=a.idlinea) LEFT JOIN RemiFact as rm ON (rm.idpedido=dp.idpedido) '+
            ' LEFT JOIN PagosClientes as pc ON (pc.idpedido = dp.idpedido) LEFT JOIN clientes as c ON (p.idcliente=c.idcliente) '+
            ' LEFT JOIN UCTabUsers as lg ON (lg.UCLogin=pc.usuario) LEFT JOIN usuarios as u ON (u.idusuario=lg.UCIdUser) '+
            ' WHERE pc.FechaAlta between '''+datetostr(fecha1)+''' and '''+datetostr(fecha2)+''' and p.estatus in(3,4,5,6) and pc.movimiento =2 '+
            'and pc.TipoCobro =1 and pc.abono > 0 '+an;
    //si es por un usuario en especifico
    if ckbtodos = false then
      cadena:=cadena + ' and lg.UCIdUser = '+quotedstr(edusuario1)+' ';// and '+quotedstr(edusuario2.Text)+' ';
    cadena:=cadena + ' GROUP BY dp.id,u.idusuario ORDER BY dp.idpedido';
    //insertamos en tabla temporal de sumas por lineas
    querys(cadena,1,sqlgeneral2);
    querys('select idpedido from  temporalpagos'+frmprincipal.idmaq+' where Porcentaje = 100 group by idpedido',0,sqlgeneral2);
    while not sqlgeneral2.eof do
    begin
      querys(' delete from temporalpagos'+frmprincipal.idmaq+' where idpedido = '+sqlgeneral2.Fields.Fields[0].AsString+
             ' and Porcentaje < 100 ',1,sqlgeneral);
      sqlgeneral2.Next;
    end;
    // segunda creamos la tabla suma por pagos  con tipocobro 0   /// a.inventariable=1
    cadena:='';
    cadena:='CREATE TABLE temporalpagos100'+frmprincipal.idmaq+
            ' SELECT pc.idpedido,round(sum(pc.abono),2) as abono,u.idusuario ' +
            ' FROM PagosClientes as pc LEFT JOIN UCTabUsers as lg ON (lg.UCLogin=pc.usuario) '+
            ' LEFT JOIN usuarios as u ON (u.idusuario=lg.UCIdUser) '+
            ' WHERE pc.FechaAlta between '+''''+dfecha1+''' and '+''''+dfecha2+''' and pc.movimiento in(0,2) and pc.abono> 0 '+
            ' and pc.TipoCobro =0 ';
    if ckbtodos  = false then
      cadena:=cadena + ' and lg.UCLogin = '+quotedstr(edusuario1)+' '; // and '+quotedstr(edusuario2.Text)+' ';
    cadena:=cadena + ' GROUP BY idpedido,u.idusuario';
    //crea la tabla temporal suma por pagos tipocobro 0
    querys(cadena,1,sqlgeneral2);
    //insertamos en tabla con tipocobro 1
    // segunda creamos la tabla suma por pagos  con tipocobro 1   /// a.inventariable=1
    cadena:='';
    cadena:='INSERT INTO temporalpagos100'+frmprincipal.idmaq+'(idpedido,abono,idusuario) '+
            'SELECT pc.idpedido,round(sum(pc.abono),2) as abono,u.idusuario FROM PagosClientes as pc LEFT JOIN UCTabUsers as lg ON '+
            '(lg.UCLogin=pc.usuario) LEFT JOIN usuarios as u ON (u.idusuario=lg.UCIdUser) '+
            ' WHERE pc.FechaAlta between '''+datetostr(fecha1)+''' and '''+datetostr(fecha2)+
            ''' and pc.movimiento in(0,2) and pc.abono> 0 and pc.TipoCobro =1 ';
    if ckbtodos = false then
      cadena:=cadena + ' and lg.UCLogin = '+quotedstr(edusuario1)+' '; //and '+quotedstr(edusuario2.Text)+' ';
    cadena:=cadena + ' GROUP BY idpedido,u.idusuario';
    //crea la tabla temporal suma por pagos tipocobro 1
    querys(cadena,1,sqlgeneral2);
    querys('CREATE TABLE temporalpagos3'+frmprincipal.idmaq+' SELECT idpedido,sum(abono) as abono,idusuario FROM temporalpagos100'+
          frmprincipal.idmaq+' group by idpedido,idusuario',1,sqlgeneral2);
    querys('Create Index idpedido on temporalpagos3'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);
    //tercero de la tabla temporal creamos otra pero ya con totalse por linea
    querys('CREATE TABLE temporalpagos2'+frmprincipal.idmaq+' SELECT idusuario,idcliente,idpedido,idremicion,idfactura,nombre,'+
           'sum(TOTAL)AS TOTAL,TotMn,FechaAlta,bloqueado,sector,Usuario,idpago FROM temporalpagos'+frmprincipal.idmaq+
           ' GROUP BY nombre,idpedido,idusuario ORDER BY idpedido',1,sqlgeneral2);
    querys('CREATE INDEX idpedido on temporalpagos2'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);

    //creamos otra tabla donde se mostrara el reporte
    querys('CREATE TABLE temporalpagos4'+frmprincipal.idmaq+' SELECT t2.idusuario,t2.idcliente,t2.idpedido,t2.idremicion,t2.idfactura, t3.abono,'+
          't2.FechaAlta,t2.bloqueado,t2.sector,t2.Usuario, '+
          'if (t3.abono <> '''',t3.abono,0) as MONITOREO, if (t3.abono <> '''',t3.abono,0) as INTERESES,'+
          'if (t3.abono <> '''',t3.abono,0) as SERVICIO, if (t3.abono <> '''',t3.abono,0) as EQUIPO, '+
          'if (t3.abono <> '''',t3.abono,0) as OTROS, if (t3.abono <> '''',t3.abono,0) as LEGAL, '+
          'if (t3.abono <> '''',t3.abono,0) as VINOS, t2.idpago '+
          'FROM temporalpagos2'+frmprincipal.idmaq+' as t2 LEFT JOIN temporalpagos3'+frmprincipal.idmaq+
          ' as t3 ON (t3.idpedido=t2.idpedido) where abono <=0 GROUP BY t2.nombre,t2.idpedido,t2.idusuario ORDER BY t2.idpedido',1,sqlgeneral2);
          
    querys('Create Index idpedido on temporalpagos4'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);
    ///ahora insertamos a la tabla el pedido para poder comparar
    querys('INSERT INTO temporalpagos4'+frmprincipal.idmaq+' (idusuario,idpedido,idremicion,idfactura,FechaAlta,bloqueado,sector,Usuario,idpago) '+
           'SELECT idusuario,idpedido,idremicion,idfactura,FechaAlta,bloqueado,sector,Usuario,idpago FROM temporalpagos2'+frmprincipal.idmaq+
           ' GROUP BY idpedido,idusuario ORDER BY idpedido',1,sqlgeneral2);


      
    cadena :='SELECT t2.idcliente as cliente,t2.idpedido as pedido,t2.idremicion as remicion,t2.idfactura as factura,t2.nombre as linea,'+
           't3.abono as pago,ROUND(((t2.TOTAL*100)/t2.TotMn),2) as Porcentaje,ROUND((((t2.TOTAL*100)/t2.TotMn)/100)*t3.abono,2) as resultado,'+
           't3.idusuario as idusuario,t2.TOTAL as total,t2.TotMn as totpedido,t2.FechaAlta as FechaAlta,t2.bloqueado as bloqueado,'+
           't2.sector as sector,t2.Usuario as cobrador '+
           ' FROM temporalpagos2'+frmprincipal.idmaq+' as t2 LEFT JOIN temporalpagos3'+frmprincipal.idmaq+' as t3 ON (t3.idpedido=t2.idpedido) '+
           ' WHERE abono >0 GROUP BY t2.nombre,t2.idpedido,t3.idusuario ORDER BY t2.idpedido';
    querys(cadena,0,sqlgeneral);
    if sqlgeneral.FieldByName('cliente').AsString  <> '' then
    begin
      while not sqlgeneral.Eof do
      begin
        querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET idcliente='+quotedstr(sqlgeneral.fieldbyname('cliente').AsString)+' ,'+
        sqlgeneral.fieldbyname('linea').AsString+'=('+quotedstr(sqlgeneral.fieldbyname('linea').AsString)+
        '  +  ('+ sqlgeneral.fieldbyname('resultado').AsString+') ),  abono='+quotedstr(sqlgeneral.fieldbyname('pago').AsString)+
        '  WHERE idpedido='+quotedstr(sqlgeneral.fieldbyname('pedido').AsString)+' and idusuario='+
        quotedstr(sqlgeneral.fieldbyname('idusuario').AsString),1,sqlgeneral2);
        sqlgeneral.Next;
      end;

      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET MONITOREO=0 WHERE (MONITOREO IS NULL)' ,1,sqlgeneral2);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET INTERESES=0 WHERE (INTERESES IS NULL)' ,1,sqlgeneral2);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET SERVICIO=0 WHERE (SERVICIO IS NULL )' ,1,sqlgeneral2);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET EQUIPO=0 WHERE (EQUIPO IS NULL)' ,1,sqlgeneral2);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET OTROS=0 WHERE (OTROS IS NULL)' ,1,sqlgeneral2);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET LEGAL=0 WHERE (LEGAL IS NULL)' ,1,sqlgeneral2);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET VINOS=0 WHERE (VINOS IS NULL)' ,1,sqlgeneral2);
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////         SEGUNDA PARTE DE REPORTE          ////////////////////////////
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      querys('DROP TABLE IF EXISTS temporal_pagosxlinea'+frmprincipal.idmaq,1,sqlgeneral);
      querys('CREATE TABLE temporal_pagosxlinea'+frmprincipal.idmaq+' (sector varchar(30),clientes float default 0,'+
             //'equipo float default 0,intereses float default 0,servico float default 0,
             'otros float default 0,'+
             'anticipos float default 0,total float default 0,MV float default 0,MxV float default 0)',1,sqlgeneral);
      querys('INSERT INTO temporal_pagosxlinea'+frmprincipal.idmaq+' (sector) SELECT idsector FROM sectores ORDER BY idsector',1,sqlgeneral);
      //buscarmos los que sean pagos por clientes  que no son anticipos
      //para tipocobro =0
      cadena:='';
      cadena:='SELECT c.sector as sector,round(sum(pc.abono),2) as total FROM pedidos as p INNER JOIN PagosClientes AS pc ON (pc.idpedido=p.idpedido)  '+
              ' LEFT JOIN clientes as c ON (c.idcliente=p.idcliente)  LEFT JOIN TiposPagos as tps ON (tps.iniciales=pc.TipoPago)  '+
              ' LEFT JOIN UCTabUsers as uc ON (uc.UCLogin=pc.usuario) LEFT JOIN usuarios as u ON (u.idusuario=uc.UCIdUser)  '+
              ' LEFT JOIN UnidadNegocio as tp ON (tp.idUnidadNegocio=p.idUnidadNegocio) WHERE  '+
              ' pc.FechaAlta between '+''''+dfecha1+''' and '+''''+dfecha2+''' and pc.movimiento in(0,2) and p.estatus in(3,4,5,6) '+
              ' AND tps.nombre<>''ANTICIPO'' AND tp.nombre <> ''EQUIPO(2)''  and pc.TipoCobro =0 and pc.abono > 0 '+an;
      if ckbtodos = false then
        cadena:=cadena + '  and uc.UCLogin = '+quotedstr(edusuario1)+' '; //and '+quotedstr(edusuario2.Text)+' ';
      cadena:=cadena + ' GROUP BY sector';
      querys(cadena,0,sqlgeneral);
      while  not sqlgeneral.eof do
      begin
        querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set clientes ='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3);
        sqlgeneral.next;
      end;
      //para tipocobro = 1
      cadena:='';
      cadena:='SELECT c.sector as sector,round(sum(pc.abono),2) as total FROM pedidos as p INNER JOIN PagosClientes AS pc ON (pc.idpedido=p.idpedido)  '+
              ' LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) LEFT JOIN UCTabUsers as uc ON (uc.UCLogin=pc.usuario) '+
              ' LEFT JOIN usuarios as u ON (u.idusuario=uc.UCIdUser)  LEFT JOIN UnidadNegocio as tp ON (tp.idUnidadNegocio=p.idUnidadNegocio) '+
              ' WHERE pc.FechaAlta between '''+datetostr(fecha1)+''' and '''+datetostr(fecha2)+''' and '+
              ' pc.movimiento in(0,2) and p.estatus in(3,4,5,6) AND  TipoPago <> ''AT'' AND tp.nombre <> ''EQUIPO(2)''  and pc.TipoCobro =1  '+
              ' and pc.abono >0 '+an;
      if ckbtodos = false then
        cadena:=cadena + 'and uc.UCLogin = '+quotedstr(edusuario1)+' '; // and '+quotedstr(edusuario2.Text)+' ';
      cadena:=cadena + ' GROUP BY sector';
      querys(cadena,0,sqlgeneral);
      while  not sqlgeneral.eof do
      begin                                                                                                   // + clientes
        querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set clientes = '+quotedstr(sqlgeneral.fieldbyname('total').AsString)+
               ' + clientes  WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3);
        sqlgeneral.next;
      end;
      //buscarmos anticIpos del cliente
      //por tipocobro = 0
      cadena:='';
      cadena:='SELECT c.sector as sector,round(sum(pc.abono),2) as total FROM PagosClientes AS pc left join pedidos as p  ON (p.idpedido=pc.idpedido) '+
              'LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
              'LEFT JOIN UCTabUsers as uc ON (uc.UCLogin=pc.usuario) LEFT JOIN usuarios as u ON (u.idusuario=uc.UCIdUser)  '+
              'LEFT JOIN UnidadNegocio as tp ON (tp.idUnidadNegocio=p.idUnidadNegocio) WHERE '+
              'pc.FechaAlta between '+''''+dfecha1+''' and '+''''+dfecha2+''' and  pc.movimiento IN(0,2) and p.estatus in(3,4,5,6) '+
              ' AND TipoPago = ''AT'' AND tp.nombre <> ''EQUIPO(2)'' and sector<> '''' and pc.TipoCobro =0 and pc.abono >0  '+an;
      if ckbtodos = false then
        cadena:=cadena + 'and uc.UCLogin = '+quotedstr(edusuario1)+' '; //and '+quotedstr(edusuario2.Text)+' ';
      cadena:=cadena + ' GROUP BY sector';
      querys(cadena,0,sqlgeneral);
      while  not sqlgeneral.eof do
      begin
        querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set anticipos =  '+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3);
        sqlgeneral.next;
      end;
      //tipocobro 1
      cadena:='';
      cadena:='SELECT c.sector as sector,round(sum(pc.abono),2) as total FROM PagosClientes AS pc left join pedidos as p  ON (pc.idpedido=p.idpedido) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
            'LEFT JOIN UCTabUsers as uc ON (uc.UCLogin=pc.usuario) LEFT JOIN usuarios as u ON (u.idusuario=uc.UCIdUser)  LEFT JOIN UnidadNegocio as tp ON (tp.idUnidadNegocio=p.idUnidadNegocio) WHERE  '+
            'pc.FechaAlta between '''+datetostr(fecha1)+''' and '''+datetostr(fecha2)+''' and  pc.movimiento IN(0,2) and p.estatus in(3,4,5,6) '+
            'AND TipoPago = ''AT'' AND tp.nombre <> ''EQUIPO(2)'' and sector<> '''' and pc.TipoCobro =1 and pc.abono >0 '+an;
      if ckbtodos = false then
        cadena:=cadena + 'and uc.UCLogin = '+quotedstr(edusuario1)+'' ;// and '+quotedstr(edusuario2.Text)+' ';
      cadena:=cadena + ' GROUP BY sector';
      querys(cadena,0,sqlgeneral);
      while  not sqlgeneral.eof do
      begin
        querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set anticipos = anticipos+'+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3);
        sqlgeneral.next;
      end;
      ///buscar pagos de oportunidadas OTROS (equipo2)
      //tipocobro = 0
      cadena:='';
      cadena:='SELECT c.sector as sector,round(sum(pc.abono),2) as total FROM pedidos as p INNER JOIN PagosClientes AS pc ON (pc.idpedido=p.idpedido) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
            'LEFT JOIN UCTabUsers as uc ON (uc.UCLogin=pc.usuario) LEFT JOIN usuarios as u ON (u.idusuario=uc.UCIdUser) LEFT JOIN UnidadNegocio as tp ON (tp.idUnidadNegocio=p.idUnidadNegocio) WHERE  '+
            'pc.FechaAlta between '+''''+dfecha1+''' and '+''''+dfecha2+''' and  pc.movimiento in(0,2) and p.estatus in(3,4,5,6) '+
            'AND TipoPago <> ''AT'' AND tp.nombre=''EQUIPO(2)''  and sector<> '''' and TipoCobro = 0 and pc.abono > 0 '+an ;
      if ckbtodos = false then
        cadena:=cadena + 'and uc.UCLogin = '+quotedstr(edusuario1)+' '; // and '+quotedstr(edusuario2.Text)+' ';
      cadena:=cadena + ' GROUP BY sector';
      querys(cadena,0,sqlgeneral);
      while  not sqlgeneral.eof do
      begin
        querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set otros = '+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3);
        sqlgeneral.next;
      end;
      //tipocobro =1
      cadena:='';
      cadena:='SELECT c.sector as sector,round(sum(pc.abono),2) as total FROM pedidos as p INNER JOIN PagosClientes AS pc ON (pc.idpedido=p.idpedido) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
            'LEFT JOIN UCTabUsers as uc ON (uc.UCLogin=pc.usuario) LEFT JOIN usuarios as u ON (u.idusuario=uc.UCIdUser) LEFT JOIN UnidadNegocio as tp ON (tp.idUnidadNegocio=p.idUnidadNegocio) WHERE  '+
            'pc.FechaAlta between '+datetostr(fecha1)+' and '+datetostr(fecha2)+' and pc.movimiento in(0,2) and p.estatus in(3,4,5,6) '+
            'AND TipoPago <> ''AT'' AND tp.nombre=''EQUIPO(2)''  and sector<> '''' and TipoCobro = 1 and pc.abono > 0 '+an ;
      if ckbtodos = false then
        cadena:=cadena + 'and uc.UCLogin = '+quotedstr(edusuario1)+' '; // and '+quotedstr(edusuario2.Text)+' ';
      cadena:=cadena + ' GROUP BY sector';
      querys(cadena,0,sqlgeneral);
      while  not sqlgeneral.eof do
      begin
        querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set otros = otros + '+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3);
        sqlgeneral.next;
      end;
      ////actualizamos el total
      querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set total =(clientes+anticipos+otros)',1,sqlgeneral3);
      querys('SELECT distinct t.idpago,t.sector,t.abono,MONITOREO,t.FechaAlta,pa.idpago2,pa.pago,pc.FechaVence,pc.idpago,pc2.FechaVence,'+
             'IF (pc2.FechaVence > t.FechaAlta,0,1) AS condicion from temporalpagos4'+frmprincipal.idmaq+' as t '+
             ' left JOIN  PagosClientes as pc ON (pc.idpago=t.idpago) left join PagosAfecta as pa ON (pc.idpago=pa.idpago)  '+
             ' left join PagosClientes as pc2 ON (pa.idpago2=pc2.idpago) '+
             ' where t.idcliente is not null and pa.idpago2 is not null group by t.idpago ',0,sqlgeneral);
      while  not sqlgeneral.eof do
      begin
        if sqlgeneral.FieldByName('condicion').asstring = '1' then
          querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set MV ='+quotedstr(sqlgeneral.fieldbyname('abono').AsString)+' + MV WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3)
        else
          querys('UPDATE temporal_pagosxlinea'+frmprincipal.idmaq+' set MxV ='+quotedstr(sqlgeneral.fieldbyname('abono').AsString)+' + MxV WHERE sector='+quotedstr(sqlgeneral.fieldbyname('sector').AsString),1,sqlgeneral3);
        sqlgeneral.next;
      end;
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' set EQUIPO= (abono-(MONITOREO+INTERESES+SERVICIO+OTROS+VINOS+LEGAL))',1,sqlgeneral);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' set MONITOREO = IF ( EQUIPO < 1,MONITOREO + EQUIPO,MONITOREO)',1,sqlgeneral);
      querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET EQUIPO = IF ( EQUIPO < 1,0,EQUIPO)',1,sqlgeneral);

      

      /////////////////////////////FIN DE SEGUNDA PARTE DE REPORTE////////////////////////////////
      ////////////////////////////////////generar reportes       /////////////////////////////////
      dia1:='Del '+dfecha1+' al '+dfecha2;
      if guardar = false then
      begin
        querys('SELECT t.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'' ,'',de.estado) as DirEmpresa,'+
               'concat(''Tel : '',de.telefono,''            RFC :'',de.rfc ) as rfc,'+quotedstr(dia1)+' as periodo '+
               ' FROM temporalpagos4'+frmprincipal.idmaq+' as t join DatosEmpresa as de  WHERE abono >0 and idcliente <> '' '' '+
               ' order by idusuario,idfactura,FechaAlta asc ',0,sqlgeneral);
        querys('SELECT * FROM temporal_pagosxlinea'+frmprincipal.idmaq,0,sqlgeneral2);
        querys('select sector, round(sum(monitoreomv),2) as monitoreomv, round(sum(monitoreomxv),2) as monitoreomxv,' +
              'round(sum(equipomv),2) as equipomv, round(sum(equipomxv),2) as equipomxv, round(sum(interesesmv),2) as interesesmv, ' +
              'round(sum(interesesmxv),2) as interesesmxv,' +
              'round(sum(serviciomv),2) as serviciomv, round(sum(serviciomxv),2) as serviciomxv, round(sum(otrosmv),2) as otrosmv, round(sum(otrosmxv),2) as otrosmxv,' +
              'round(sum(monitoreomv) + sum(equipomv) + sum(interesesmv) + sum(serviciomv) + sum(otrosmv),2) as mv,' +
              'round(sum(monitoreomxv) + sum(equipomxv) + sum(interesesmxv) + sum(serviciomxv) + sum(otrosmxv),2)  as mxv,' +
              'round(sum(monitoreomv) + sum(monitoreomxv) + sum(equipomv) + sum(equipomxv) + sum(interesesmv) + sum(interesesmxv) +' +
              'sum(serviciomv) + sum(serviciomxv) + sum(otrosmv) + sum(otrosmxv),2)  as total ' + 
              'from (' +
              'select sector,if(condicion=1,sum(monitoreo),0) as monitoreomv,if(condicion=0,sum(monitoreo),0) as monitoreomxv,' +
              'if(condicion=1,sum(equipo),0) as equipomv,if(condicion=0,sum(equipo),0) as equipomxv,' +
              'if(condicion=1,sum(intereses),0) as interesesmv,if(condicion=0,sum(intereses),0) as interesesmxv,' +
              'if(condicion=1,sum(servicio),0) as serviciomv,if(condicion=0,sum(servicio),0) as serviciomxv,' +
              'if(condicion=1,sum(otros),0) as otrosmv,if(condicion=0,sum(otros),0) as otrosmxv' +
              '  from (' +
              'SELECT distinct t.idpago,sector,t.abono,round(MONITOREO,2) as monitoreo,round(equipo,2) as equipo,round(intereses,2) as intereses,' +
              'round(servicio,2) as servicio,round(otros,2) as otros,IF (pc2.FechaVence > t.FechaAlta,0,1) AS condicion ' +
              ' FROM temporalpagos4'+frmprincipal.idmaq+' as t ' +
              'left JOIN  PagosClientes as pc ON (pc.idpago=t.idpago) ' +
              'left join PagosAfecta as pa ON (pc.idpago=pa.idpago)  ' +
              'left join PagosClientes as pc2 ON (pa.idpago2=pc2.idpago) ' +
//              'where t.idcliente is not null and pa.idpago2 is not null ' +
              'group by t.idpago' +
              ') as t GROUP BY sector,condicion' +
              ') as tabla group by sector order by cast(sector as SIGNED) asc',0,sqlgeneral3);
        querys('select  round(sum(abono),2) as abono, idunidadnegocio, unidad from ( '+
               'SELECT distinct t.idpago,sector,t.abono, p.idunidadnegocio, u.nombre as unidad '+
               'FROM temporalpagos4'+frmprincipal.idmaq+' as t left JOIN  pedidos p on p.idpedido=t.idpedido '+
               'left join UnidadNegocio u on u.idUnidadNegocio=p.idUnidadNegocio '+
               'where t.idcliente is not null  and u.tipoenlace=1 group by t.idpago '+
               ') as t group by idunidadnegocio', 0, sqlgeneral4);

        querys('Select sector, sum(PLUS) PLUS, sum(BASICO) BASICO, sum(ECONOMICO) ECONOMICO, sum(TECNICO) TECNICO, sum(abono) as total '+
               'FROM ( Select  idtipo, sector, if(idtipo = 1, sum(abono), 0) as PLUS, if(idtipo = 2, sum(abono), 0) as BASICO, '+
               'if(idtipo = 3, sum(abono), 0) as ECONOMICO, if(idtipo = 4, sum(abono), 0) as TECNICO, sum(abono) as abono '+
               'from ( SELECT distinct t.idpago, t.sector, p.Anualidad, p.FechaRemision, t.abono, t.idpedido, cat.idtipomonitoreo as idtipo '+
               'FROM temporalpagos4'+frmprincipal.idmaq+' as t inner join pedidos p on p.idpedido=t.idpedido and p.Anualidad > 0 '+
               'left join clientes c on c.idcliente=t.idcliente left join categorias cat on cat.idcategoria=c.idcategoria '+
               ') as t group by idtipo, sector ) as t group by sector', 0, sqlgeneral5);
      end
      else
      begin
        if application.MessageBox(pchar('Esta seguro de generar reporte Pagos x Linea historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
        begin
          querys('insert into RepPagosXLinea SELECT t.*,'+''''+dia1+''' as periodo,'+''''+fecha+''' FROM temporalpagos4'+frmprincipal.idmaq+' as t WHERE abono >0 and idcliente <> '' '' order by idusuario,idfactura asc',1,sqlgeneral2);

          querys('Insert into RepPagosXLineaAnualidades (sector, PLUS, BASICO, ECONOMICO, TECNICO, total, periodo, usuario, fecha, hora) '+
               'Select sector, sum(PLUS) PLUS, sum(BASICO) BASICO, sum(ECONOMICO) ECONOMICO, sum(TECNICO) TECNICO, sum(abono) as total, '+
               ' "'+fecha+'", "'+frmprincipal.ucprincipal.CurrentUser.LoginName+'", curdate(), curtime() '+
               'FROM ( Select  idtipo, sector, if(idtipo = 1, sum(abono), 0) as PLUS, if(idtipo = 2, sum(abono), 0) as BASICO, '+
               'if(idtipo = 3, sum(abono), 0) as ECONOMICO, if(idtipo = 4, sum(abono), 0) as TECNICO, sum(abono) as abono '+
               'from ( SELECT distinct t.idpago, t.sector, p.Anualidad, p.FechaRemision, t.abono, t.idpedido, cat.idtipomonitoreo as idtipo '+
               'FROM temporalpagos4'+frmprincipal.idmaq+' as t inner join pedidos p on p.idpedido=t.idpedido and p.Anualidad > 0 '+
               'left join clientes c on c.idcliente=t.idcliente left join categorias cat on cat.idcategoria=c.idcategoria '+
               ') as t group by idtipo, sector ) as t group by sector', 1, sqlgeneral5);
          //GUARDAR EN COBRANZA PAGOS
          PagosFinMes(fecha2);
          application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
          Screen.Cursor := crDefault;
        end;
        exit;
      end;
      frmmensaje.Close;
      Screen.Cursor := crDefault;
      OperacionReporte('PagosXLinea','Reporte de pagos por linea',TipoImpresion, 1);
    end
    else
    begin
      Screen.Cursor := crDefault;
      frmmensaje.Close;
      application.MessageBox('No hay registro que mostrar','Atención',mb_iconwarning);
    end;
    BorrarTablasPagosTemp;
  end;//with
  Screen.Cursor := crDefault;
end;

//end;


procedure actualizarCobranza(fecha1,fecha2,campo:string);
begin
////no aparexcan pagos si tienen parcialidades

                                                                                 //INNER JOIN temporal_sectorvence0'+frmprincipal.idmaq+'
if campo <> 'condicion4' then                                                             //<> 3              <> 0
      querys('SELECT SUM(pc.restante) as total,pc.idcliente as cli,pc.idpedido FROM PagosClientes as pc LEFT JOIN pedidos as p ON(p.idpedido=pc.idpedido) WHERE pc.FechaVence between '+quotedstr(fecha2)+' AND '+quotedstr(fecha1)+' AND p.estatus in(3,4,6) AND pc.movimiento in(0,1,4) AND pc.restante <> 0  GROUP BY pc.idpedido',0,dmreportes.sqlgeneral2)

else
      querys('SELECT SUM(pc.restante) as total,pc.idcliente as cli,pc.idpedido FROM PagosClientes as pc LEFT JOIN pedidos as p ON(p.idpedido=pc.idpedido) WHERE pc.FechaVence < '+quotedstr(fecha1)+' AND p.estatus in(3,4,6) AND pc.movimiento in(0,1,4) AND pc.restante <> 0 GROUP BY pc.idpedido',0,dmreportes.sqlgeneral2);


while not dmreportes.sqlgeneral2.Eof do
  begin
     querys('UPDATE temporal_sectorvence'+frmprincipal.idmaq+' SET '+campo+'=('+campo+' + '+quotedstr(dmreportes.sqlgeneral2.fieldbyname('total').AsString)+') WHERE idcliente='+quotedstr(dmreportes.sqlgeneral2.fieldbyname('cli').AsString),1,dmreportes.sqlgeneral);
     dmreportes.sqlgeneral2.Next;
  end;

end;

procedure ConcentradoCobranza(fecha,tipo_actualizacion:string);
var cadena,fecha1,fecha2,dia,m,y,titulo1,fechabusqueda:string;
dias,diasInicio,tipo,ciclo,desfazados,mes,dias60999:integer;
fecha_date:TdateTime;
begin
fecha_date := strtodatetime(fecha);
desfazados := daysbetween(now,fecha_date);
dias := 0; diasInicio := 0; dias60999:=0;
dia:=formatdatetime('d',fecha_date);
m:=formatdatetime('m',fecha_date);
mes := strtoint(formatdatetime('m',fecha_date));
y:=formatdatetime('yyyy',fecha_date);
fechabusqueda:=datetostr(fecha_date);

fecha1:='';
fecha2:='';
//NombreMes := meses(mes);
//buscamos si ya hay registros en ese mes
with dmreportes do begin
//ciclo := 1;
tipo := 0;

for ciclo:=0 to 4 do begin

if ciclo =0 then
  begin
   diasInicio := 0  + desfazados;
   dias:=30 + desfazados;
   fecha1:=datetostr(now-desfazados);
   fecha2:=datetostr(now-9999);
   tipo:=0;
   titulo1:='COBRANZA ( 0 A 30 ) DIAS';
end;

if ciclo =1 then
  begin
     diasInicio := 0 + desfazados;
     dias:=59 + desfazados;
     fecha1:=datetostr(now-desfazados);
     fecha2:=datetostr(now-9999);
     tipo:=1;
     titulo1:='COBRANZA ( 0 A 59 ) DIAS';
  end;

if ciclo =2 then
   begin
    diasInicio := 60 + desfazados;
    dias:=9999 + desfazados;
    //no traer lo vencido del dia 28-31
    querys('select valor from configuraciones where concepto = "DiaReporteCobranza"',1,DMREPORTES.sqlgeneral6);
    dias60999 := dmreportes.sqlgeneral6.Fields.Fields[0].AsInteger;

    if(DayOfTheMonth(fecha_date) < dias60999 ) then
     begin
        fecha1:=datetostr(now-60-desfazados);
        fecha2:=datetostr(now-9999);

     end else
      begin

        fecha1:=datetostr(now-60-desfazados-(DayOfTheMonth(fecha_date) - (dias60999-1) ) );
        fecha2:=datetostr(now-9999);
      end;

    tipo:=2;
    titulo1:='COBRANZA EXTRA-JUD ( 60 A 9999 ) DIAS';
   end;

   if ciclo =3 then
   begin
    diasInicio := 0;
    dias:=9999;
    fecha1:=datetostr(now-desfazados);
    fecha2:=datetostr(now-9999);
    tipo:=3;
    titulo1:='CUENTAS CON ABOGADOS';
   end;

   if ciclo =4 then
   begin
    diasInicio := 0;
    dias:=9999;
    fecha1:=datetostr(now-desfazados);
    fecha2:=datetostr(now-9999);
    tipo:=4;
    titulo1:='COBRANZA 0-9999';
   end;

   if ciclo =5 then
   begin
    diasInicio := 0;
    dias:=9999;
    fecha1:=datetostr(now-desfazados);
    fecha2:=datetostr(now-9999);
    tipo:=4;
    titulo1:='COBRANZA 0-9999';
   end;

   querys('DROP TABLE IF EXISTS temporal_sectorvence'+frmprincipal.idmaq,1,dmaccesos.sqlgeneral);
   querys('DROP TABLE IF EXISTS temporal_sectorvence0'+frmprincipal.idmaq,1,dmaccesos.sqlgeneral);
   querys('CREATE TABLE temporal_sectorvence'+frmprincipal.idmaq+' (sector varchar(250),mov integer(11),idcliente integer(11),saldo float default 0,condicion1 float default 0,condicion2 float default 0,condicion3 float default 0,condicion4 float default 0,dias integer(11),tipo varchar(15),KEY idcliente(idcliente))',1,dmaccesos.sqlgeneral);


if(desfazados = 0) then
 begin                                                                                                                                                       //,nombre varchar(70)

        cadena:='';                                                                                                                                                                                                                                //and c.sector between 1 and 5  and p.idUnidadNegocio between 1 and 12
        if (( ciclo  < 3 ) OR (ciclo =4)) then
        cadena:='create table temporal_sectorvence0'+frmprincipal.idmaq+' SELECT pc.idpago,pc.idpedido,pc.movimiento,c.sector,(to_days('+''''+fecha+''') -to_days(pc.FechaVence)) as dias,pc.idcliente as cuenta  FROM PagosClientes as pc left join pedidos as p ON(p.idpedido=pc.idpedido) '+
                ' LEFT JOIN clientes as c ON(c.idcliente=pc.idcliente) LEFT JOIN  contratos as con ON(c.TipoCont=con.TipoCont)  ' +
                'LEFT JOIN sectores as s ON (s.idsector=c.sector) WHERE pc.FechaVence  BETWEEN  '+quotedstr(fecha2)+' AND '+quotedstr(fecha1)+'   and  p.estatus in(3,4,6) AND restante > 0.9 and pc.movimiento IN(0,1) and (c.idabogado = 0) and con.estatus=1 '   //c.bloqueado = 0 and
        else
        cadena:='create table temporal_sectorvence0'+frmprincipal.idmaq+' SELECT pc.idpago,pc.idpedido,pc.movimiento,concat(ifnull(a.nombre,'' ''),'' '',ifnull(a.apaterno,'' ''),'' '',ifnull(a.amaterno,'' '')) as Sector,(to_days('+''''+fecha+''') -to_days(pc.FechaVence)) as dias,pc.idcliente as cuenta  '+
        'FROM PagosClientes as pc left join pedidos as p ON(p.idpedido=pc.idpedido)    ' +                                                                   //and c.sector between 1 and 5  and p.idUnidadNegocio between 1 and 12
                'LEFT JOIN clientes as c ON(c.idcliente=pc.idcliente) LEFT JOIN  contratos as con ON(c.TipoCont=con.TipoCont) INNER JOIN abogados as a ON(a.idabogado=c.idabogado) LEFT JOIN sectores as s ON (s.idsector=c.sector) WHERE pc.FechaVence  BETWEEN  '+quotedstr(fecha2)+' AND '+quotedstr(fecha1)+' and  p.estatus in(3,4,6) AND restante > 0.9 and pc.movimiento IN(0,1)   and c.idabogado between 1 and 10000 ';   //c.bloqueado = 0 and
                                                                                                                                                                                                                                                                                                                                                                                         //and con.estatus=1

cadena:=cadena+' GROUP BY pc.idpago';
querys(cadena,1,dmaccesos.sqlgeneral);
querys('Create Index idpago on temporal_sectorvence0'+frmprincipal.idmaq+' (idpago) ',1,sqlgeneral);


if (( ciclo  < 3 ) OR (ciclo =4)) then
        querys('INSERT INTO temporal_sectorvence0'+frmprincipal.idmaq+' SELECT pc.idpago,pc.idpedido,pc.movimiento,c.sector,(to_days('+''''+fecha+''') -to_days(pc.FechaVence)) as dias,pc.idcliente as cuenta  FROM PagosClientes as pc left join pedidos as p ON(p.idpedido=pc.idpedido) '+
                ' LEFT JOIN clientes as c ON(c.idcliente=pc.idcliente) '+
                ' LEFT JOIN sectores as s ON (s.idsector=c.sector) WHERE pc.FechaVence  BETWEEN  '+quotedstr(fecha2)+' AND '+quotedstr(fecha1)+'   and  p.estatus in(3,4,6) AND restante > 0 and pc.movimiento IN(0,1)   and (c.idabogado = 0) and c.TipoCont =''SEN'' ',1,sqlgeneral);


querys('DELETE temporal_sectorvence0'+frmprincipal.idmaq+'  FROM temporal_sectorvence0'+frmprincipal.idmaq+' inner join PagosClientes ON(temporal_sectorvence0'+frmprincipal.idmaq+'.idpedido= PagosClientes.idpedido) where  temporal_sectorvence0'+frmprincipal.idmaq+'.movimiento = 0 and PagosClientes.movimiento =1 ',1,sqlgeneral);


querys('select cuenta from temporal_sectorvence0'+frmprincipal.idmaq+' where dias not between '+inttostr(diasInicio)+' and '+inttostr(dias)+'  ',0,sqlgeneral);
while not sqlgeneral.Eof do
  begin
      querys('DELETE  from temporal_sectorvence0'+frmprincipal.idmaq+' where cuenta = '+sqlgeneral.fieldbyname('cuenta').AsString ,1,dmreportes.sqlgeneral2);
      sqlgeneral.Next;
  end;

querys('INSERT INTO temporal_sectorvence'+frmprincipal.idmaq+' (idcliente,dias,sector) SELECT pc.idcliente,(to_days('+''''+fecha+''') -to_days(pc.FechaVence)) as dias,t1.sector FROM PagosClientes as pc '+
       'INNER JOIN temporal_sectorvence0'+frmprincipal.idmaq+' as t1 ON (t1.idpago=pc.idpago) GROUP BY pc.idcliente HAVING dias <= '+inttostr(dias),1,sqlgeneral);

//insertar todos los clientes con saldo vencido en la tabla temporal

if ciclo = 0 then
    begin
         fecha1:=datetostr(fecha_date-0);
         fecha2:=datetostr(fecha_date-30);
         actualizarCobranza(fecha1,fecha2,'condicion1');
    end;

if ciclo =1 then
    begin
         fecha1:=datetostr(fecha_date-0);
         fecha2:=datetostr(fecha_date-59);
         actualizarCobranza(fecha1,fecha2,'condicion1');
    end;

if ciclo =2 then
   begin
     if(DayOfTheMonth(fecha_date) >= dias60999 ) then
         fecha_date := fecha_date -  (DayOfTheMonth(fecha_date) - (dias60999-1));

                 fecha1:=datetostr(fecha_date-0);
                 fecha2:=datetostr(fecha_date-59);
                 actualizarCobranza(fecha1,fecha2,'condicion1');
                 fecha1:=datetostr(fecha_date-60);
                 fecha2:=datetostr(fecha_date-90);
                 actualizarCobranza(fecha1,fecha2,'condicion3');
                 fecha1:=datetostr(fecha_date-90);
                 fecha2:='';
                 actualizarCobranza(fecha1,fecha2,'condicion4');

     fecha_date := strtodatetime(fecha);
   end;

if ((ciclo =3) OR (ciclo =4)) then
    begin
         fecha1:=datetostr(fecha_date-0);
         fecha2:=datetostr(fecha_date-9999);
         actualizarCobranza(fecha1,fecha2,'condicion1');
    end;

end else
begin

///desaplicar los pagos generados desde la fecha desfasada

 querys('DROP TABLE IF EXISTS temporal_antiguedad2'+frmprincipal.idmaq,1,sqlgeneral3);

 cadena :='CREATE TABLE temporal_antiguedad2'+frmprincipal.idmaq+' SELECT distinct pc.idpago,pc.FechaAlta,pc.FechaVence,'+
          'pc.idpedido,pc.restante,c.idcliente,c.sector, '+UsuarioNombre('a')+' as abogado,c.FechaAbo,c.FechaCancelacion,'+
          'c.estatus,movimiento FROM PagosClientes as pc INNER JOIN  pedidos as p ON(p.idpedido=pc.idpedido) LEFT JOIN '+
          'clientes as c ON(c.idcliente=pc.idcliente) LEFT JOIN contratos as con on(con.TipoCont = c.TipoCont) LEFT JOIN '+
          'abogados as a ON (a.idabogado=c.idabogado) WHERE p.estatus in(3,4,6)  and pc.movimiento in (0,1) AND '+
          'pc.restante > 3';

 if (( ciclo  < 3 ) OR (ciclo =4)) then                                                                                                                 //and pc.FechaVence <= "'+fecha1+'"
     cadena := cadena + ' and con.estatus = 1'
 else
     cadena := cadena + ' and con.estatus = 0  and c.idabogado between 1 and 10000 ';


 querys(cadena + ' GROUP BY pc.idpago',1,sqlgeneral3);
                                                                                     //and
querys('Create Index idpedido on temporal_antiguedad2'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral3);
querys('Create Index movimiento on temporal_antiguedad2'+frmprincipal.idmaq+' (movimiento)',1,sqlgeneral3);

querys('DELETE temporal_antiguedad2'+frmprincipal.idmaq+' FROM temporal_antiguedad2'+frmprincipal.idmaq+' inner join PagosClientes ON(temporal_antiguedad2'+frmprincipal.idmaq+'.idpedido= PagosClientes.idpedido) where  temporal_antiguedad2'+frmprincipal.idmaq+'.movimiento = 0 and PagosClientes.movimiento =1 ',1,sqlgeneral);

   fecha1:=datetostr(now-desfazados);

 querys('DROP TABLE IF EXISTS TempAnt_DesAplicar1'+frmprincipal.idmaq,1,sqlgeneral3);
      cadena := '  Select pc.idcliente,pc.idpedido,pc.abono as pago,pa.idpago,pa.idpago2 as PagoAfecto,con.estatus,c.FechaCancelacion,c.FechaAbo, ';

       if (( ciclo  < 3 ) OR (ciclo =4)) then
           cadena := cadena + ' c.sector'
       else
           cadena := cadena + ' concat(ifnull(a.nombre,'' ''),'' '',ifnull(a.apaterno,'' ''),'' '',ifnull(a.amaterno,'' '')) as Sector';

      cadena := cadena + ' from PagosClientes as pc Inner Join PagosAfecta as pa on(pa.idpago=pc.idpago) Inner Join pedidos as p on (p.idpedido = pc.idpedido)  ';

      cadena := cadena + ' inner join clientes as c on(c.idcliente = pc.idcliente) LEFT JOIN ClientesFact as cf ON(cf.idfact=c.idfact) LEFT JOIN abogados as a ON (a.idabogado=c.idabogado) LEFT JOIN contratos as con ON (c.TipoCont=con.TipoCont) Where  pc.fecha > "'+fecha1+'"  and pc.movimiento in (0,2,10) ';

       if (( ciclo  < 3 ) OR (ciclo =4)) then
         cadena := cadena + ' and con.estatus = 1';
       if ( ciclo  = 3 ) then
          cadena := cadena + ' and c.idabogado between 1 and 10000 ';

   querys('CREATE TABLE TempAnt_DesAplicar1'+frmprincipal.idmaq+ cadena,1,sqlgeneral3);

   querys('Create Index PagoAfecto on TempAnt_DesAplicar1'+frmprincipal.idmaq+' (PagoAfecto)',1,sqlgeneral3);
   querys('Create Index idcliente on TempAnt_DesAplicar1'+frmprincipal.idmaq+' (idcliente)',1,sqlgeneral3);

    querys('Select te.idcliente,te.idpedido,te.pago as TotalDebe,pc.FechaVence,PagoAfecto,te.Sector from TempAnt_DesAplicar1'+frmprincipal.idmaq+' as te inner join PagosClientes as pc on(te.PagoAfecto=pc.idpago) Where pc.FechaVence <="'+fecha1+'"  order by te.idcliente ',0,sqlgeneral3);
                                                                                                                                                                                                                      // Where pc.fecha >= '+''''+fecha1+''' and pc.FechaVence <="'+fecha1+'"          and pc.FechaAlta <="'+fecha1+'"
    if sqlgeneral3.RecordCount >0 then
      begin
      querys('Create Index idpago on temporal_antiguedad2'+frmprincipal.idmaq+' (idpago)',1,sqlgeneral2);
      //Ahora ya tenemos los pagos realizados , hay que desaplicarlos para mostrar esas cantidades....

      while not sqlgeneral3.Eof do
        begin
        querys('Select idcliente from temporal_antiguedad2'+frmprincipal.idmaq+' where idpago ='+sqlgeneral3.fieldbyname('PagoAfecto').AsString+' ',0,sqlgeneral2);

        if sqlgeneral2.RecordCount >0 then
          begin
            querys('Update temporal_antiguedad2'+frmprincipal.idmaq+' set restante = restante +  '+sqlgeneral3.fieldbyname('TotalDebe').AsString+' where idpago =' +sqlgeneral3.fieldbyname('PagoAfecto').AsString+' ',1,sqlgeneral);
          end
        else
          begin

           querys(' INSERT INTO temporal_antiguedad2'+frmprincipal.idmaq+' (idpago,FechaVence,idpedido,restante,idcliente,sector)  values('+sqlgeneral3.fieldbyname('PagoAfecto').AsString+',"'+sqlgeneral3.fieldbyname('FechaVence').AsString+'",'+sqlgeneral3.fieldbyname('idpedido').AsString+', '+sqlgeneral3.fieldbyname('TotalDebe').AsString+','+sqlgeneral3.fieldbyname('idcliente').AsString+', "'+sqlgeneral3.fieldbyname('Sector').AsString+'")   ',1,sqlgeneral);
          end;
        sqlgeneral3.Next;
        end;
      end;

   querys('DROP TABLE IF EXISTS TempAnt_DesAplicar1'+frmprincipal.idmaq,1,sqlgeneral3);

   querys('DROP TABLE IF EXISTS TempConcCobranza'+frmprincipal.idmaq,1,sqlgeneral3);

    querys('CREATE TABLE TempConcCobranza'+frmprincipal.idmaq+' ( FechaVence date default "0000-00-00",restante double default "0",  idcliente int(11) default "0",  sector varchar(10) default NULL,  FechaAbo date default "0000-00-00",  FechaCancelacion date default "0000-00-00",  '+
           ' estatus tinyint(4) default "0",  VENCIDO30 double default "0",  VENCIDO59 double default "0", VENCIDO6090 double default "0",  VENCIDOTOTAL double default "0" ) ',1,sqlgeneral3);

   querys('insert into TempConcCobranza'+frmprincipal.idmaq+' SELECT FechaVence,restante,t1.idcliente as idcliente,t1.sector,FechaAbo,FechaCancelacion,estatus, '+
          ' if ( (to_days("'+fecha1+'")-to_days(FechaVence) between 0 and 30 ),restante,''0.00'' ) as VENCIDO30,if ( (to_days("'+fecha1+'")-to_days(FechaVence) BETWEEN 0 AND 59) ,restante,''0.00'' ) as VENCIDO59,'+
          ' if ( (to_days("'+fecha1+'")-to_days(FechaVence) BETWEEN 60 AND 9000) ,restante,''0.00'' ) as VENCIDO6090,if ( (to_days("'+fecha1+'")-to_days(FechaVence) BETWEEN 0 AND 9999) ,restante,''0.00'' ) as VENCIDOTOTAL  '+
          ' FROM temporal_antiguedad2'+frmprincipal.idmaq+' as t1 ',1,sqlgeneral3);
  if (( ciclo  < 3 ) OR (ciclo =4)) then
     querys('DELETE FROM TempConcCobranza'+frmprincipal.idmaq+' WHERE estatus = 0 and FechaCancelacion between "1990/01/02" and  "'+fecha1+'" ',1,sqlgeneral3);

  if (ciclo = 3) then
     querys('DELETE FROM TempConcCobranza'+frmprincipal.idmaq+' WHERE estatus = 1  ',1,sqlgeneral3);

  case ciclo of

        1: begin
               querys('select idcliente from TempConcCobranza'+frmprincipal.idmaq+' where VENCIDO6090 > 0  group by idcliente',0,sqlgeneral3); //querys('select idcliente from TempConcCobranza'+frmprincipal.idmaq+' where VENCIDO59 > 0 and idcliente  in(select idcliente from TempConcCobranza'+frmprincipal.idmaq+' where VENCIDO6090 > 0) group by idcliente',0,sqlgeneral3);
               while not sqlgeneral3.Eof do
                 begin
                     querys('DELETE FROM TempConcCobranza'+frmprincipal.idmaq+' where idcliente = '+sqlgeneral3.Fields.Fields[0].AsString,1,sqlgeneral2);
                     sqlgeneral3.Next;
                 end;
           end;


        2: begin
               querys('select idcliente from TempConcCobranza'+frmprincipal.idmaq+' where  VENCIDO6090  = 0 and idcliente not in(select idcliente from TempConcCobranza'+frmprincipal.idmaq+' where VENCIDO6090 > 0)  group by idcliente',0,sqlgeneral3);
               while not sqlgeneral3.Eof do
                 begin
                     querys('DELETE FROM TempConcCobranza'+frmprincipal.idmaq+' where idcliente = '+sqlgeneral3.Fields.Fields[0].AsString,1,sqlgeneral2);
                     sqlgeneral3.Next;
                 end;
           end;

    end;

      querys('INSERT INTO temporal_sectorvence'+frmprincipal.idmaq+' (idcliente,dias,sector,condicion1)  select idcliente,1,sector,Sum(VENCIDOTOTAL) from TempConcCobranza'+frmprincipal.idmaq+' group by idcliente',1,sqlgeneral3);
      querys('DROP TABLE IF EXISTS temporal_antiguedad2'+frmprincipal.idmaq,1,sqlgeneral3);
      querys('DROP TABLE IF EXISTS TempAnt_DesAplicar1'+frmprincipal.idmaq,1,sqlgeneral3);
      querys('DROP TABLE IF EXISTS TempConcCobranza'+frmprincipal.idmaq,1,sqlgeneral3);


 end;
////fin de la actualizacion de la fecha desfazada.

//actualizar saldo
querys('UPDATE temporal_sectorvence'+frmprincipal.idmaq+' SET saldo=condicion1+condicion2+condicion3+condicion4',1,dmaccesos.sqlgeneral);

if (tipo_actualizacion = '1') then begin

    querys('SELECT mes FROM Cobranza where mes = '+quotedstr(meses[mes])+' and  fecha = '+''''+y+''' and clasificacion='+inttostr(tipo)+'',0,sqlgeneral);
    if sqlgeneral.FieldByName('mes').AsString  = '' then
      begin  // SI NO HAY REGISTRO HAY QUE CREAR LOS REGISTRO Y ACTUALIZARLOS......

           if (( ciclo  < 3 ) OR (ciclo =4)) then
            begin

            querys('select idsector from sectores order by idsector asc',0,sqlgeneral);
              while not sqlgeneral.Eof do
                begin

                    if ((tipo < 2) OR (tipo =4)) then begin
                        querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''BLOQUEOS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,3,'+inttostr(tipo)+')',1,sqlgeneral2);
                        querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''TICKETS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,5,'+inttostr(tipo)+')',1,sqlgeneral2);
                    end;
                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''CUENTAS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,1,'+inttostr(tipo)+')',1,sqlgeneral2);
                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''SALDO'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,2,'+inttostr(tipo)+')',1,sqlgeneral2);
                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''LLAMADAS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,4,'+inttostr(tipo)+')',1,sqlgeneral2);
                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''BAJAS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,6,'+inttostr(tipo)+')',1,sqlgeneral2);

                    sqlgeneral.Next;
                end;
                   if ((tipo < 2) OR (tipo =4)) then begin
                       querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''TICKETS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,5,'+inttostr(tipo)+')',1,sqlgeneral2);
                       querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''BLOQUEOS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,3,'+inttostr(tipo)+')',1,sqlgeneral2);
                   end;

                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''LLAMADAS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,4,'+inttostr(tipo)+')',1,sqlgeneral2);
                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''SALDO'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,2,'+inttostr(tipo)+')',1,sqlgeneral2);
                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''CUENTAS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,1,'+inttostr(tipo)+')',1,sqlgeneral2);
                    querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''BAJAS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('idsector').AsString)+',0,0,6,'+inttostr(tipo)+')',1,sqlgeneral2);

            end else
             begin

                    querys('Select sector from temporal_sectorvence'+frmprincipal.idmaq+' group by sector',1,sqlgeneral);

                    while not sqlgeneral.Eof do
                      begin
                                  querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''CUENTAS'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+',0,0,1,'+inttostr(tipo)+')',1,sqlgeneral2);
                                  querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''DESGLOSADO'',''SALDO'','+quotedstr(meses[mes])+','+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+',0,0,2,'+inttostr(tipo)+')',1,sqlgeneral2);

                                  sqlgeneral.Next;
                      end;
                                  querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''SALDO'','+quotedstr(meses[mes])+','+''''+y+''','''',0,0,2,'+inttostr(tipo)+')',1,sqlgeneral2);
                                  querys('INSERT INTO Cobranza (tipo,concepto,mes,fecha,sector,D'+dia+',total,id,clasificacion) values(''CONSOLIDADO'',''CUENTAS'','+quotedstr(meses[mes])+','+''''+y+''','''',0,0,1,'+inttostr(tipo)+')',1,sqlgeneral2);

             end;
       end;

end;
            //TOTAL CUENTAS.
             querys('SELECT COUNT(idcliente) as total,sector  FROM temporal_sectorvence'+frmprincipal.idmaq+' where saldo > 2 group by sector ',0,sqlgeneral);

             while not sqlgeneral.Eof do begin
                  if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''CUENTAS'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) > 0) then
                      querys('update Cobranza set D'+dia+'='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where  mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''CUENTAS'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo)+'',1,sqlgeneral2)
                  else
                      querys('insert into Cobranza (concepto,mes,fecha,sector,tipo,clasificacion,D'+dia+') values(''CUENTAS'','+quotedstr(meses[mes])+', '+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+',''DESGLOSADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);

                    sqlgeneral.Next;
             end;

               //TOTAL SALDOS
               querys('SELECT sum(saldo) as total,sector FROM temporal_sectorvence'+frmprincipal.idmaq+' where saldo > 2 group by sector ',0,sqlgeneral);

               while not sqlgeneral.Eof do begin
                      if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''SALDO'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) >0) then
                           querys('UPDATE Cobranza  SET D'+dia+' ='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''SALDO'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo)+'',1,sqlgeneral2)
                      else
                           querys('insert into Cobranza (concepto,mes,fecha,sector,tipo,clasificacion,D'+dia+') values(''SALDO'','+quotedstr(meses[mes])+', '+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+',''DESGLOSADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);
                      sqlgeneral.Next;
              end;

              if ((tipo < 2) OR (tipo =4)) then begin
              //TOTAL BLOQUEADO.
              querys('select count(n.idnota) as total ,ts.sector as sector from notas as n  left join clientes as c ON(c.idnota=n.idnota) inner join temporal_sectorvence'+frmprincipal.idmaq+' as ts on(ts.idcliente=c.idcliente) where n.fecha='+quotedstr(fechabusqueda)+' and TipoNota=''BLOQUEO'' group by sector ',0,sqlgeneral);

              while not sqlgeneral.Eof do begin
                  if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''BLOQUEOS'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) > 0) then
                     querys('UPDATE Cobranza  SET D'+dia+' ='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''BLOQUEOS'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo)+'',1,sqlgeneral2)
                  else
                     querys('insert into Cobranza (concepto,mes,fecha,sector,tipo,clasificacion,D'+dia+') values(''BLOQUEOS'','+quotedstr(meses[mes])+', '+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+',''DESGLOSADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);
                      //querys('UPDATE Cobranza set D'+dia+'='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where  mes = '+quotedstr(cbomeses.Text)+' and fecha = '+quotedstr(cboano.Text)+ ' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''BLOQUEOS'' AND tipo =''CONSOLIDADO'' ',1,sqlgeneral2);
                      sqlgeneral.Next;
              end;


             //TOTAL LLAMADAS.
              querys('select count(n.idnota) as total ,ts.sector as sector from notas as n left join clientes as c ON (c.idnota=n.idnota) inner join temporal_sectorvence'+frmprincipal.idmaq+' as ts on(ts.idcliente=c.idcliente)  where n.fecha='+quotedstr(fechabusqueda)+' and TipoNota=''LLAMADA'' group by sector ',0,sqlgeneral);
                while not sqlgeneral.Eof do begin
                  if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''LLAMADAS'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) >0) then
                       querys('UPDATE Cobranza SET D'+dia+' ='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and sector = '+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+'  and  concepto =''LLAMADAS'' AND tipo =''DESGLOSADO'' and clasificacion='+inttostr(tipo)+'',1,sqlgeneral2)
                  else
                       querys('insert into Cobranza (concepto,mes,fecha,sector,tipo,clasificacion,D'+dia+') values(''LLAMADAS'','+quotedstr(meses[mes])+', '+''''+y+''','+quotedstr(sqlgeneral.fieldbyname('sector').AsString)+',''DESGLOSADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);
                      sqlgeneral.Next;
                end;

                end;

              //TOTAL CONSOLIDADO----TODOS LOS CONCEPTOS...................
              //TOTAL CUENTAS.
              querys('SELECT COUNT(idcliente) as total FROM temporal_sectorvence'+frmprincipal.idmaq+' where saldo > 2  ',0,sqlgeneral);
               while not sqlgeneral.Eof do begin
                  if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+'''   and  concepto =''CUENTAS'' AND tipo =''CONSOLIDADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) >0) then
                     querys('UPDATE Cobranza set D'+dia+'='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where  mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+'''   and  concepto =''CUENTAS'' AND tipo =''CONSOLIDADO'' and clasificacion='+inttostr(tipo)+' ',1,sqlgeneral2)
                  else
                     querys('insert into Cobranza (concepto,mes,fecha,tipo,clasificacion,D'+dia+') values(''LLAMADAS'','+quotedstr(meses[mes])+', '+''''+y+''',''CONSOLIDADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);

                    sqlgeneral.Next;
               end;
               //TOTAL SALDOS
               querys('SELECT sum(saldo) as total FROM temporal_sectorvence'+frmprincipal.idmaq+' where saldo > 2 ',0,sqlgeneral);

               while not sqlgeneral.Eof do begin
                  if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+'''   and  concepto =''SALDO'' AND tipo =''CONSOLIDADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) >0) then
                      querys('UPDATE Cobranza SET D'+dia+'='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where  mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and  concepto =''SALDO'' AND tipo =''CONSOLIDADO'' and clasificacion ='+inttostr(tipo)+' ',1,sqlgeneral2)
                 else
                      querys('INSERT INTO Cobranza (concepto,mes,fecha,tipo,clasificacion,D'+dia+') VALUES(''SALDO'','+quotedstr(meses[mes])+', '+''''+y+''',''CONSOLIDADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);

                      sqlgeneral.Next;
              end;
              if ((tipo < 2) OR (tipo =4)) then begin
              //TOTAL BLOQUEADO.
              querys('select count(n.idnota) as total  from notas as n left join clientes as c ON (c.idnota=n.idnota) inner join temporal_sectorvence'+frmprincipal.idmaq+' as ts on(ts.idcliente=c.idcliente) where n.fecha='+quotedstr(fechabusqueda)+' and TipoNota=''BLOQUEO''  ',0,sqlgeneral);
                while not sqlgeneral.Eof do begin
                 if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+'''   and  concepto =''BLOQUEOS'' AND tipo =''CONSOLIDADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) >0) then
                      querys('UPDATE Cobranza set D'+dia+'='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where  mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and concepto =''BLOQUEOS'' AND tipo =''CONSOLIDADO'' and clasificacion ='+inttostr(tipo)+'',1,sqlgeneral2)
                else
                      querys('INSERT INTO Cobranza (concepto,mes,fecha,tipo,clasificacion,D'+dia+') VALUES(''BLOQUEOS'','+quotedstr(meses[mes])+', '+''''+y+''',''CONSOLIDADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);

                      sqlgeneral.Next;
                end;
             //TOTAL LLAMADAS.
              querys('select count(n.idnota) as total  from notas as n left join clientes as c ON (c.idnota=n.idnota) inner join temporal_sectorvence'+frmprincipal.idmaq+' as ts on(ts.idcliente=c.idcliente) where n.fecha='+quotedstr(fechabusqueda)+' and TipoNota=''LLAMADA'' ',0,sqlgeneral);
                while not sqlgeneral.Eof do begin
                 if(querys('select D1 from Cobranza where mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+'''   and  concepto =''LLAMADAS'' AND tipo =''CONSOLIDADO'' and clasificacion='+inttostr(tipo),0,sqlgeneral7) >0) then
                    querys('UPDATE Cobranza set D'+dia+'='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where  mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+'''  and  concepto =''LLAMADAS'' AND tipo =''CONSOLIDADO'' and clasificacion='+inttostr(tipo)+'',1,sqlgeneral2)
                 else
                    querys('INSERT INTO Cobranza (concepto,mes,fecha,tipo,clasificacion,D'+dia+') VALUES(''LLAMADAS'','+quotedstr(meses[mes])+', '+''''+y+''',''CONSOLIDADO'','+inttostr(tipo)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2);

                      sqlgeneral.Next;
                end;
                end;

querys('UPDATE Cobranza  SET total =(D1+D2+D3+D4+D5+D6+D7+D8+D9+D10+D11+D12+D13+D14+D15+D16+D18+D17+D19+D20+D21+D22+D23+D24+D25+D26+D27+D28+D29+D30+D31)  WHERE  mes = '+quotedstr(meses[mes])+' and fecha = '+''''+y+''' and id > 2 and clasificacion ='+inttostr(tipo)+'',1,sqlgeneral2);
querys('DROP TABLE IF EXISTS temporal_sectorvence0'+frmprincipal.idmaq,1,sqlgeneral);
querys('DROP TABLE IF EXISTS temporal_sectorvence'+frmprincipal.idmaq,1,sqlgeneral);
 frmmensaje.Close;
end;
end;//reportes




end;


function ActualizarSaldoCliente(idcliente,idpedido,fecha:string):integer;
   var regreso:integer;
begin
   regreso := 0;
   with dmreportes do
   begin
      querys('DROP TABLE IF EXISTS TempPago'+frmprincipal.idmaq,1,sqlgeneral);
      //pedido remisionado o facturado y sin saldar
      querys('create table TempPago'+frmprincipal.idmaq+' select pc.idpago,pc.movimiento as movimiento,pc.idpedido as '+
             'idpedido,p.concepto from PagosClientes as pc left join  pedidos as p on (p.idpedido=pc.idpedido) ' +
             'where p.estatus in(3,4) and pc.idcliente ='+quotedstr(idcliente)+'  and pc.movimiento in(0,1) and restante >0',1,sqlgeneral);
      querys('DELETE TempPago'+frmprincipal.idmaq+' FROM TempPago'+frmprincipal.idmaq+' inner join PagosClientes '+
             'ON(TempPago'+frmprincipal.idmaq+'.idpedido= PagosClientes.idpedido) where  TempPago'+frmprincipal.idmaq+
             '.movimiento = 0 and PagosClientes.movimiento =1 ',1,sqlgeneral);
      querys('SELECT truncate(sum(pc.restante),2) as total from PagosClientes as pc '+
             'inner join TempPago'+frmprincipal.idmaq+' as p ON (p.idpago=pc.idpago) '+
             'where pc.restante > 0  and pc.idcliente ='+quotedstr(idcliente),0,sqlgeneral8);
      bpcambios('clientes', idcliente, 'idcliente');
      if (sqlgeneral8.FieldByName('total').asstring <> '') then
         querys('UPDATE clientes SET saldo='+quotedstr(sqlgeneral8.FieldByName('total').asstring)+
                ' WHERE idcliente='+idcliente,1,sqlgeneral)
      else
         querys('UPDATE clientes SET saldo=0 WHERE idcliente='+quotedstr(idcliente),1,sqlgeneral);
                                                                                 //left envez de inner
      querys('SELECT truncate(sum(pc.restante),2) as total from PagosClientes as pc inner join TempPago'+frmprincipal.idmaq+
             ' as p ON (p.idpago=pc.idpago) where pc.restante > 0  and pc.idpedido = '+quotedstr(idpedido)+
             ' and pc.idcliente ='+quotedstr(idcliente),0,sqlgeneral8);
      if (sqlgeneral8.FieldByName('total').AsFloat < 2)  then    //por si las decimales jijiji
      begin
         querys('UPDATE pedidos SET saldado =1,Saldo=0,FechaLiquidacion="'+fecha+'" WHERE idpedido='+quotedstr(idpedido),1,sqlgeneral);
         regreso:=1;
      end
      else
         querys('UPDATE pedidos SET saldado =0,Saldo='+''''+sqlgeneral8.FieldByName('total').AsString+
                ''' WHERE idpedido='+quotedstr(idpedido),1,sqlgeneral);
      querys('DROP TABLE IF EXISTS TempPago'+frmprincipal.idmaq,1,sqlgeneral);
      apcambios('idcliente', idcliente, 'clientes', 'ActualizarSaldoCliente');
   end;
   result := regreso;
end;


function CuentaLibre : integer;
var //i : integer;
    sqlgeneral : tmyquery;
begin
sqlgeneral := tmyquery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
//Trae el numero de cuenta menor disponible
result := 0;

{
For i:= 1 to 9999 do
  begin
  querys('Select idcliente from clientes where idcliente='+quotedstr(inttostr(i)), 0, sqlgeneral);
  if sqlgeneral.recordcount = 0 then
    begin
    result:=i;
    break;
    end;
  end;}

if querys('Select * from ( select idcliente, @c := @c +1 as c from ( '+
       'select idcliente, @c := 0 from clientes where idcliente < 10000 order by idcliente asc '+
       ') as t ) as t having idcliente <> c limit 1', 0, sqlgeneral) > 0 then
  result := sqlgeneral.fieldbyname('c').asinteger;


if result = 0 then
  begin
  querys('select max(idcliente) from clientes',0,SqlGeneral);
  result:=SqlGeneral.Fields.Fields[0].AsInteger + 1;
  end;
  sqlgeneral.Free;
end;

{var i : integer;
begin
sql1.Close;
sql1.SQL.Clear;
sql1.SQL.Add('delete from dummy');
sql1.Execute;
for i:= 1 to 9999 do
 begin
  sql1.Close;
  sql1.SQL.Clear;
  sql1.SQL.Add('select idcliente from clientes where idcliente='+inttostr(i));
  sql1.open;
 if sql1.RecordCount = 0 then
  begin
   sql1.Close;
   sql1.SQL.Clear;
   sql1.SQL.Add('insert into dummy (cuenta) values ('+inttostr(i)+')');
   sql1.Execute;
  end;
end;
self.Caption := 'Listo';}

  {

if(usuarios.apaterno is NULL or usuarios.apaterno='''', usuarios.nombre, if(usuarios.amaterno is NULL or usuarios.amaterno='''', concat(usuarios.nombre, '' '', usuarios.apaterno), concat(usuarios.nombre, '' '', usuarios.apaterno, '' '', usuarios.amaterno)) as Nombre,

}

procedure Parcializa(saldo,TipoCambio:double;fecha:tdate;idpedido,cantpart,idcliente:integer;frecuencia:string);
var dia,mes,ano,DiaPago : word;  finmes:boolean;
i : integer;  //  ,j
{pago,restante : double;}
parcialidad : double;
CodBarras,CodBBVA,CodBanorte,CodBanamex,FechaVence, referencia : string;     // cvecte,cvevta, Banco,Temp,
sqlgeneral : tmyquery;
begin
sqlgeneral := tmyquery.create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
//trae el restante del pedido
querys('select restante,FechaVence from PagosClientes where idpedido='+inttostr(idpedido)+' and movimiento=0',0,sqlgeneral);
//restante := strtofloat(format('%8.2f',[sqlgeneral.fieldbyname('restante').AsFloat*(-1)]));}
FechaVence:=sqlgeneral.fieldbyname('FechaVence').AsString;
//si campo movimiento = 1 es para indicar que se esta parcializando, movimiento = 0 venta y movimiento = 5 cobro
//fecha:=FechaInicio.date;
decodedate(fecha,ano,mes,DiaPago);
//showmessage(inttostr(DiaPago));
parcialidad := strtofloat(format('%8.2f',[saldo/cantpart]));
//inserta el abono por el total del cargo para saldarla e introducir las parcialidades
querys('insert into PagosClientes(movimiento,idcliente,idpedido,FechaAlta,abono,restante,usuario,fecha,hora,'+
       'TipoCambio,FechaVence) values (4,'+inttostr(idcliente)+','+inttostr(idpedido)+','+
       quotedstr(datetostr(FechaServidor))+','+format('%8.2f',[saldo])+',-'+format('%8.2f',[saldo])+
       ','+quotedstr(frmprincipal.ucprincipal.CurrentUser.LoginName)+','+quotedstr(datetostr(FechaServidor))+
       ','+quotedstr(FormatDateTime('HH:mm:ss',Time))+','+format('%8.2f',[TipoCambio])+','+quotedstr(FechaVence)+')',1,sqlgeneral);
decodedate(fecha,ano,mes,dia);
if dia = daysinmonth(fecha) then
  finmes := true;
for i := 0 to cantpart-1 do
  begin
  if i <> 0 then
    begin
  
    if frecuencia = 'M' then
      begin
      fecha := IncMonth(fecha,1);
      if finmes then
        begin
        DecodeDate(fecha, ano, mes, dia);
        fecha:=encodedate(ano,mes,daysinmonth(fecha));
        end;
      end;
  
    if frecuencia = 'Q' then
      if dayof(fecha) = 15 then
        begin
        DecodeDate(fecha, ano, mes, dia);
        fecha:=encodedate(ano,mes,daysinmonth(fecha));
        end
      else
        begin
        DecodeDate(fecha, ano, mes, dia);
        fecha := encodedate(ano,mes,15);
        fecha := IncMonth(fecha,1);
        end;
  
    if frecuencia = 'S' then
      fecha := IncDay(fecha,7);
    end;
{for i:=0 to cantpart-1 do
 begin
  CodBarras := ''; Banco := '';
  if mes <= 12 then
   begin
    if DiaPago > 28 then
     begin
      if (mes+i) <= 12 then
       begin
        if daysinmonth(encodedate(ano,mes+i,1)) >= DiaPago then
         fecha:=encodedate(ano,mes+i,DiaPago)
        else
         fecha:=encodedate(ano,mes+i,daysinmonth(encodedate(ano,mes+i,1)));
       end
      else
       begin
        if daysinmonth(encodedate(ano+1,(mes+i)-12,1)) >= DiaPago then
         fecha:=encodedate(ano+1,(mes+i)-12,DiaPago)
        else
         fecha:=encodedate(ano+1,(mes+i)-12,daysinmonth(encodedate(ano+1,(mes+i)-12,1)));
       end;
     end
    else
     begin
      if (mes+i) <= 12 then
       fecha:=encodedate(ano,mes+i,DiaPago)
      else
       fecha:=encodedate(ano+1,(mes+i)-12,DiaPago);
     end;
   end
  else
   begin
    inc(ano);mes:=1;
    if DiaPago > 28 then
     begin
     if daysinmonth(encodedate(ano,mes,1)) <= DiaPago then
      fecha:=encodedate(ano,mes,DiaPago)
     else
      fecha:=encodedate(ano,mes,daysinmonth(encodedate(ano,mes,1)));
     end
    else
     fecha:=encodedate(ano,mes,DiaPago);
     mes := 1;
   end;   }
     //para el codigo de barras de las boletas se saca cuenta + idpedido +  cargo + relleno para que sean 10 caracteres

     referencia := ReferenciaBanco(inttostr(idcliente), inttostr(idpedido));
     //querys('select CtaBanco from DatosEmpresa',0,sqlgeneral);

     CodBarras := CodBarrasOxxo(inttostr(idcliente), inttostr(idpedido), floattostr(parcialidad), fechavence);
     CodBBVA := CodBarrasBBVA(inttostr(idcliente), inttostr(idpedido), floattostr(parcialidad), fechavence);
     CodBanorte := CodBarrasBanorte(inttostr(idcliente), inttostr(idpedido), floattostr(parcialidad), fechavence);
     CodBanamex := CodBarrasBanamex(inttostr(idcliente), inttostr(idpedido), floattostr(parcialidad), fechavence);

                                                                                                     //,FechaLarga,CodBarras,CodBanco                                                                                                                                                                                                                                                                                                                                                                                                                                 //+','+quotedstr(meses[monthof(Fecha)]+' '+inttostr(dayof(Fecha))+' de '+inttostr(yearof(Fecha)))+','+quotedstr(CodBarras)+','+quotedstr(Banco)+                                                                                                                                                                    //quotedstr(meses[monthof(Fecha)]+' '+inttostr(yearof(Fecha)))+}
     querys('insert into PagosClientes(movimiento,idcliente,idpedido,FechaAlta,cargo,FechaVence,usuario,fecha,hora,'+
             'restante,TipoCambio,frecuencia,notas) values (1,'+inttostr(idcliente)+','+inttostr(idpedido)+',"'+
             datetostr(date)+'",'+format('%8.2f',[parcialidad])+',"'+datetostr(Fecha)+'","'+
             frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+
             timetostr(Time)+'",'+format('%8.2f',[parcialidad])+','+format('%8.2f',[TipoCambio])+',"'+
             frecuencia+'","'+'Parcialidad '+inttostr(i+1)+' de '+inttostr(cantpart)+'")',1,sqlgeneral);

      querys('insert into boletas(idcliente,idpedido,FechaAlta,cargo,FechaVence,usuario,fecha,hora,frecuencia,'+
             'FechaLarga,CodBarras,CodBanco,codBBVA,codBanorte,codBanamex,tipo) values ('+inttostr(idcliente)+','+inttostr(idpedido)+',"'+
             datetostr(date)+'",'+format('%8.2f',[parcialidad])+',"'+datetostr(Fecha)+
             '","'+frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+
             '","'+timetostr(Time)+'","'+frecuencia+'","'+meses[monthof(Fecha)]+' '+
             inttostr(dayof(fecha))+' de '+inttostr(yearof(Fecha))+'","'+CodBarras+'","'+referencia+
             '","'+CodBBVA+'","'+CodBanorte+'","'+CodBanamex+'","P")',1,sqlgeneral);
  end;
sqlgeneral.Free;
end;


//solo hasta que no se haga el cambio con lo nuevo de presupuestos.
//sync
procedure InsertaCliente(NumOportunidad,NumCta:string);
VAR rsocial,nombre,apaterno,amaterno:string;
   sqlgeneral : tmyquery;
   idtel:integer;
begin
   sqlgeneral := tmyquery.create(nil);
   sqlgeneral.Connection := dmaccesos.conexion;
   //verifica si la rsocial es <> '' para traerse el primer contacto
    if querys('select if(rsocial is null,"",rsocial) as rsocial,if(nombre is null,"",nombre) '+
          'as nombre,if(apaterno is null,"",apaterno) as apaterno,if(amaterno is null,"",amaterno) as amaterno'+
          ' from oportunidades where idoportunidad='+NumOportunidad,0,sqlgeneral)>0 then
   begin
      rsocial:=sqlgeneral.fieldbyname('rsocial').asstring;
      nombre:=sqlgeneral.fieldbyname('nombre').asstring;
      apaterno:=sqlgeneral.fieldbyname('apaterno').asstring;
      amaterno:=sqlgeneral.fieldbyname('amaterno').asstring;
   end
   else
   begin
      application.MessageBox('Fatan datos en la oportunidad...NO prodra crear una Cuenta','Aviso',MB_OK+MB_ICONWARNING);
      exit;
   end;

   if ConectadaServidor then
   begin
      //traspasa los datos de prospectos a clientes
      querys('insert into clientes (idcliente) values ('+numcta+')',1,sqlgeneral);
      querys('select o.dir,o.numero,o.ciudad,o.estado,o.cp,o.entre,o.idtipo,o.idcol,o.idgiro,o.idtel,'+
             ' o.idcategoria,o.idorigen,o.idfuente,cs.idsector,o.rsocial,2 as estatus,deducible,av.idvendedor,1, '+
             ' idprovtel,idprovcel,lineatel,basecel,prepago '+
             ' from oportunidades o left join  col_sector cs on o.idcol = cs.idcol left join agenda_vendedores '+
             ' av on o.idoportunidad=av.idoportunidad where o.idoportunidad='+NumOportunidad+' limit 1',1,SqlGeneral);
      bpcambios('clientes', NumCta, 'idcliente');
      querys('update clientes set nombre='+quotedstr(nombre)+
            ' ,apaterno='+quotedstr(apaterno)+
            ',amaterno='+quotedstr(amaterno)+
            ',dir="'+sqlgeneral.fieldbyname('dir').asstring+'"'+
            ',numero="'+sqlgeneral.fieldbyname('numero').asstring+'"'+
            ',ciudad="'+sqlgeneral.fieldbyname('ciudad').asstring+'"'+
            ',estado="'+sqlgeneral.fieldbyname('estado').asstring+'"'+
            ',cp="'+sqlgeneral.fieldbyname('cp').asstring+'"'+
            ',refs="'+sqlgeneral.fieldbyname('entre').asstring+'"'+
            ',idtipo='+sqlgeneral.fieldbyname('idtipo').asstring+
            ',idcol='+sqlgeneral.fieldbyname('idcol').asstring+
            ',st_date="'+datetostr(date)+'"'+
            ',idgiro='+sqlgeneral.fieldbyname('idgiro').asstring+
            ',idtel='+sqlgeneral.fieldbyname('idtel').asstring+
            ',idcategoria='+sqlgeneral.fieldbyname('idcategoria').asstring+
            ',idorigen='+sqlgeneral.fieldbyname('idorigen').asstring+
            ',idfuente='+sqlgeneral.fieldbyname('idfuente').asstring+
            ',sector='+sqlgeneral.fieldbyname('idsector').asstring+
            ',rsocial="'+rsocial+'",estatus=2'+
            ',deducible='+sqlgeneral.fieldbyname('deducible').asstring+
            ',idvendedor='+sqlgeneral.fieldbyname('idvendedor').asstring+
            ',PruebaSema=1,NotaUbicacion= "", '+
            'idprovtel='+sqlgeneral.fieldbyname('idprovtel').asstring+', '+
            'idprovcel='+sqlgeneral.fieldbyname('idprovcel').asstring+', '+
            'lineatel='+sqlgeneral.fieldbyname('lineatel').asstring+', '+
            'basecel='+sqlgeneral.fieldbyname('basecel').asstring+', '+
            'prepago='+sqlgeneral.fieldbyname('prepago').asstring+' '+
            'where idcliente ='+numcta,1,sqlgeneral);

      apcambios('idcliente', numcta, 'clientes', 'InsertaCliente');
   end
   else
   begin
      //traspasa los datos de prospectos a clientes
      querys('select o.dir,o.numero,o.ciudad,o.estado,o.cp,o.entre,o.idtipo,'+
             'o.idcol,o.idgiro,o.idtel,o.idcategoria,o.idorigen,'+
             'o.idfuente,cs.idsector,o.rsocial,deducible,av.idvendedor, 1, '+
             ' idprovtel,idprovcel,lineatel,basecel,prepago '+
             ' from oportunidades o left join col_sector cs on o.idcol=cs.idcol left join '+
             ' agenda_vendedores av on o.idoportunidad=av.idoportunidad '+
             ' where o.idoportunidad='+NumOportunidad+' limit 1',1,SqlGeneral);
      bpcambios('clientes', NumCta, 'idcliente');
      querys('update clientes set nombre='+quotedstr(nombre)+',apaterno='+quotedstr(apaterno)+',amaterno='+quotedstr(amaterno)+
            ',dir='+quotedstr(sqlgeneral.fieldbyname('dir').asstring)+',numero='+quotedstr(sqlgeneral.fieldbyname('numero').asstring)+',ciudad='+
            quotedstr(sqlgeneral.fieldbyname('ciudad').asstring)+',estado='+quotedstr(sqlgeneral.fieldbyname('estado').asstring)+','+
            'cp='+quotedstr(sqlgeneral.fieldbyname('cp').asstring)+',refs='+quotedstr(sqlgeneral.fieldbyname('entre').asstring)+',idtipo='+
            quotedstr(sqlgeneral.fieldbyname('idtipo').asstring)+',idcol='+quotedstr(sqlgeneral.fieldbyname('idcol').asstring)+',st_date='+
            quotedstr(datetostr(date))+',idgiro='+quotedstr(sqlgeneral.fieldbyname('idgiro').asstring)+',idtel='+quotedstr(sqlgeneral.fieldbyname('idtel').asstring)+
            ',idcategoria='+quotedstr(sqlgeneral.fieldbyname('idcategoria').asstring)+',idorigen='+quotedstr(sqlgeneral.fieldbyname('idorigen').asstring)+
            ',idfuente='+quotedstr(sqlgeneral.fieldbyname('idfuente').asstring)+','+'sector='+quotedstr(sqlgeneral.fieldbyname('idsector').asstring)+
            ',rsocial='+quotedstr(sqlgeneral.fieldbyname('rsocial').asstring)+',estatus=2,deducible='+quotedstr(sqlgeneral.fieldbyname('deducible').asstring)+
            ',idvendedor='+quotedstr(sqlgeneral.fieldbyname('idvendedor').asstring)+',PruebaSema=1,Sincronizado=1, '+
            'idprovtel='+sqlgeneral.fieldbyname('idprovtel').asstring+', '+
            'idprovcel='+sqlgeneral.fieldbyname('idprovcel').asstring+', '+
            'lineatel='+sqlgeneral.fieldbyname('lineatel').asstring+', '+
            'basecel='+sqlgeneral.fieldbyname('basecel').asstring+', '+
            'prepago='+sqlgeneral.fieldbyname('prepago').asstring+' '+
            ' where idcliente='+numcta,1,sqlgeneral);
      apcambios('idcliente', numcta, 'clientes', 'InsertaCliente');
   end;
   //Verifica que se hayan pasado bien los datos
   querys('Select if((c.rsocial=o.rsocial) and (c.nombre='+quotedstr(nombre)+') and (c.apaterno= '+quotedstr(apaterno)+') and (c.amaterno= '+
   quotedstr(amaterno)+') , "OK", "X") as bien,o.idfact as FacturaOportunidad,o.idtel as tel,o.idcontacto as contacto,o.idusuario as '+
   ' usuario,o.idreferencia as referencia from clientes as c join oportunidades as o where idcliente='+
   quotedstr(NumCta)+' and o.idoportunidad='+quotedstr(NumOportunidad), 0, sqlgeneral);
   if sqlgeneral.fieldbyname('bien').asstring <> 'OK' then
   begin
      if application.messagebox(pchar('Ocurrio un error en los datos del cliente: '+NumCta+''+char(#13)+'El nombre no coincide con el de la oportunidad.'+char(#13)+'Deseas continuar?'), 'Atencion', MB_ICONINFORMATION+MB_YESNO) <> idyes then
        exit;
   end;

   //////////////////////////////pasar los datos de la nueva cuenta/////////////////////////////////

   /////////////////////////pasar datos de facturacion///////////////
   if sqlgeneral.fieldbyname('FacturaOportunidad').AsInteger > 0 then
   begin
      querys('select NuevosDatos from OportunidadesFact where idfact='+sqlgeneral.fieldbyname('FacturaOportunidad').AsString,0,dmreportes.sqlgeneral6);
      if(dmreportes.sqlgeneral6.Fields.Fields[0].AsString = '1') then
      begin
         querys('select p.*,col.nombre as nomcolonia from OportunidadesFact as p left join colonias as col '+
         'on(p.idcol=col.idcol) where idfact='+sqlgeneral.fieldbyname('FacturaOportunidad').AsString,0,dmreportes.sqlgeneral3);
         with dmreportes do
         begin
            if(sqlgeneral3.RecordCount >0) then
            begin
               querys('select max(idfact) as consecutivo from ClientesFact ',0,sqlgeneral4);
               if(sqlgeneral3.FieldByName('rsocial').AsString <> '' ) then
                  querys('INSERT into ClientesFact(idfact,rsocial,dir,numero,idcol,ciudad,cp,rfc,telefono,casa,idcliente,DirCres,'+
                         'ColCres,CdCres,CpCres,RFCCres,NombreCres,EstadoCres) values('+inttostr(sqlgeneral4.fieldbyname('consecutivo').AsInteger+1)+
                         ', '+''''+sqlgeneral3.fieldbyname('rsocial').asstring +''','+' '+''''+sqlgeneral3.fieldbyname('dir').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('numero').asstring +''','+''''+sqlgeneral3.fieldbyname('idcol').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('ciudad').asstring +''','+''''+sqlgeneral3.fieldbyname('cp').asstring +''','+
                         ' '+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+''''+sqlgeneral3.fieldbyname('telefono').asstring +''','+
                         ''''+sqlgeneral3.fieldbyname('casa').asstring +''','+NumCta+','+quotedstr(sqlgeneral3.fieldbyname('dir').asstring +
                         ' '+sqlgeneral3.fieldbyname('numero').asstring)+','+' '+''''+sqlgeneral3.fieldbyname('nomcolonia').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('ciudad').asstring+''','+''''+sqlgeneral3.fieldbyname('cp').asstring+''','+''''+
                         sqlgeneral3.fieldbyname('rfc').asstring +''','+''''+sqlgeneral3.fieldbyname('rsocial').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('estado').asstring +''' )',1,sqlgeneral2)
               else
                  querys('INSERT into ClientesFact(idfact,nombre,apaterno,amaterno,dir,numero,idcol,ciudad,cp,rfc,telefono,casa,'+
                         'idcliente,DirCres,ColCres,CdCres,CpCres,RFCCres,NombreCres,EstadoCres) values('+inttostr(sqlgeneral4.fieldbyname('consecutivo').AsInteger+1)+
                         ','+''''+sqlgeneral3.fieldbyname('nombre').asstring +''' , '+''''+sqlgeneral3.fieldbyname('apaterno').asstring +''' ,'+''''+
                         sqlgeneral3.fieldbyname('amaterno').asstring +''', '+' '+''''+sqlgeneral3.fieldbyname('dir').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('numero').asstring +''','+''''+sqlgeneral3.fieldbyname('idcol').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('ciudad').asstring +''','+''''+sqlgeneral3.fieldbyname('cp').asstring +''','+
                         ' '+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+''''+sqlgeneral3.fieldbyname('telefono').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('casa').asstring +''','+NumCta+','+quotedstr(sqlgeneral3.fieldbyname('dir').asstring +' '+
                         sqlgeneral3.fieldbyname('numero').asstring)+','+' '+''''+sqlgeneral3.fieldbyname('nomcolonia').asstring +''','+''''+
                         sqlgeneral3.fieldbyname('ciudad').asstring+''','+''''+sqlgeneral3.fieldbyname('cp').asstring+''','+''''+
                         sqlgeneral3.fieldbyname('rfc').asstring +''','+quotedstr(sqlgeneral3.fieldbyname('nombre').asstring + ' '+
                         sqlgeneral3.fieldbyname('apaterno').asstring +' '+ sqlgeneral3.fieldbyname('amaterno').asstring) +','+''''+
                         sqlgeneral3.fieldbyname('estado').asstring +''' )',1,sqlgeneral2);
               bpcambios('clientes', NumCta, 'idcliente');
               querys('update clientes set idfact='+inttostr(sqlgeneral4.fieldbyname('consecutivo').AsInteger+1)+' where idcliente='+NumCta,1,sqlgeneral2);
               apcambios('idcliente', numcta, 'clientes', 'InsertaCliente');
            end;
         end;
      end
      else
      begin
         //actualizar idfact
         bpcambios('clientes', NumCta, 'idcliente');
         querys('update clientes set idfact='+sqlgeneral.fieldbyname('FacturaOportunidad').AsString+' where idcliente='+
         NumCta,1,dmreportes.sqlgeneral2);
         apcambios('idcliente', numcta, 'clientes', 'InsertaCliente');
      end;
   end;

    ////////////////////////Pasar telefonos//////////////////////////////////
    if sqlgeneral.fieldbyname('tel').AsInteger > 0 then
    begin
      querys('select max(idtel) from telefonos',0,dmreportes.sqlgeneral2);
      querys('INSERT into telefonos(idtel,telefono,tipo_tel,procedencia,extencion) select '+
      inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger + 1)+',telefono,tipo_tel,''clientes'',extencion from telefonos '+
      'where idtel='+sqlgeneral.fieldbyname('tel').AsString,1,dmreportes.sqlgeneral3);
      bpcambios('clientes', NumCta, 'idcliente');
      querys('update clientes set idtel='+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger+1)+' where idcliente='+
      NumCta,1,dmreportes.sqlgeneral3);
      apcambios('idcliente', numcta, 'clientes', 'InsertaCliente');
    end;

    ////////////////////////Pasar usuarios/////////////////////////////////
    if sqlgeneral.fieldbyname('usuario').AsInteger > 0 then
    begin
      querys('select max(idcontacto) from contactos',0,dmreportes.sqlgeneral2);
      querys('select *  from contactos where idcontacto='+sqlgeneral.fieldbyname('usuario').AsString,0,dmreportes.sqlgeneral5);
      while not  dmreportes.sqlgeneral5.eof do
      begin
         querys('INSERT into contactos(idcontacto,nombre,apaterno,amaterno,procedencia,nivel,cuenta,tipo_referencia,'+
                'usuario,fecha,hora,cargo,area) select '+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger + 1)+
                ',nombre,apaterno,amaterno,"clientes/usuarios",nivel,cuenta,tipo_referencia,usuario,fecha,hora,cargo,area from contactos '+
                ' where idcontador='+dmreportes.sqlgeneral5.fieldbyname('idcontador').AsString+' and procedencia="oportunidades/usuarios"',1,dmreportes.sqlgeneral3);
         dmreportes.sqlgeneral5.Next;
      end;
      bpcambios('clientes', NumCta, 'idcliente');
      querys('update clientes set idusuario='+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger+1)+' where idcliente='+NumCta,1,dmreportes.sqlgeneral3);
      apcambios('idcliente', numcta, 'clientes', 'InsertaCliente');
    end;
    //////////////////Pasar Contactos///////////////////////////////////
    if sqlgeneral.fieldbyname('contacto').AsInteger > 0 then
    begin
      querys('select max(idcontacto) from contactos',0,dmreportes.sqlgeneral2);
      querys('select *  from contactos where idcontacto='+sqlgeneral.fieldbyname('contacto').AsString,0,dmreportes.sqlgeneral5);
      while not  dmreportes.sqlgeneral5.eof do
      begin
         idtel:=0;
         if dmreportes.sqlgeneral5.fieldbyname('idtel').AsInteger > 0 then
         begin
            querys('select max(idtel) from telefonos',0,dmreportes.sqlgeneral4);
            querys('INSERT into telefonos(idtel,telefono,tipo_tel,procedencia,extencion) select '+
            inttostr(dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1)+',telefono,tipo_tel,''contactos'',extencion '+
            'from telefonos where idtel='+dmreportes.sqlgeneral5.fieldbyname('idtel').AsString,1,dmreportes.sqlgeneral3);
            idtel := dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1;
         end;
         querys('INSERT into contactos(idcontacto,idtel,nombre,apaterno,amaterno,procedencia,nivel,cuenta,tipo_referencia,usuario,fecha,hora,relacion,cargo,area)'+
                ' select '+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger + 1)+','+inttostr(idtel)+',nombre,apaterno,amaterno,''clientes'','+
                ' nivel,cuenta,tipo_referencia,usuario,fecha,hora,relacion,cargo,area from contactos where idcontador='+dmreportes.sqlgeneral5.fieldbyname('idcontador').AsString+
                ' and procedencia="oportunidades"',1,dmreportes.sqlgeneral3);
         dmreportes.sqlgeneral5.Next;
      end;
      bpcambios('clientes', NumCta, 'idcliente');
      querys('update clientes set idcontacto='+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger+1)+' where idcliente='+
      NumCta,1,dmreportes.sqlgeneral3);
      apcambios('idcliente', numcta, 'clientes', 'InsertaCliente');
    end;
    try
        querys('insert into DetClientes (idcliente) values('+NumCta+')',1,sqlgeneral);
    except
    end;
   application.MessageBox(pchar('Se han pasado los datos de la oportunidad '+NumOportunidad+' a la cuenta '+NumCta),'Aviso',mb_iconinformation);
   //actualiza el numero de cuenta de la tabla de oportunidades
   querys('update oportunidades set cuenta='+quotedstr(NumCta)+' WHERE idoportunidad='+quotedstr(NumOportunidad),1,SqlGeneral);
   sqlgeneral.Free;
end;



{ //liberar hasta que funcione lo de oportunidaes y presupuestos
procedure InsertaCliente(NumOportunidad,NumCta:string);
VAR rsocial,nombre,apaterno,amaterno:string;idtel:integer;sqlgeneral : tmyquery;
begin
sqlgeneral := tmyquery.create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
//verifica si la rsocial es <> '' para traerse el primer contacto
querys('select rsocial,idcontacto from oportunidades where idoportunidad='+NumOportunidad,0,sqlgeneral);
if sqlgeneral.FieldByName('rsocial').AsString<>'' then
 begin
  querys('select nombre,apaterno,amaterno from contactos where idcontacto='+sqlgeneral.FieldByName('idcontacto').AsString,0,sqlgeneral);
  nombre:=sqlgeneral.FieldByName('nombre').AsString;
  apaterno:=sqlgeneral.FieldByName('apaterno').AsString;
  amaterno:=sqlgeneral.FieldByName('amaterno').AsString;
  if (nombre = null) or (nombre ='') then
    begin
    querys('select nombre,apaterno,amaterno from oportunidades where idoportunidad='+quotedstr(NumOportunidad),0,sqlgeneral);
    nombre:=sqlgeneral.FieldByName('nombre').AsString;
    apaterno:=sqlgeneral.FieldByName('apaterno').AsString;
    amaterno:=sqlgeneral.FieldByName('amaterno').AsString;
    end;

    //traspasa los datos de prospectos a clientes
    querys('insert into clientes (idcliente,nombre,apaterno,amaterno,dir,numero,ciudad,estado,cp,refs,idtipo,idcol,st_date,idgiro,idtel,idcategoria,idorigen,idfuente,sector,rsocial,estatus,TipoCont,MontoCont,DesdeCont,HastaCont) ' +
           'select '+NumCta+','+quotedstr(nombre)+' as nombre,'+quotedstr(apaterno)+' as apaterno,'+quotedstr(amaterno)+' as amaterno,oportunidades.dir,oportunidades.numero,oportunidades.ciudad,oportunidades.estado,oportunidades.cp,oportunidades.entre,oportunidades.idtipo,'+
           'oportunidades.idcol,"'+datetostr(date)+'",oportunidades.idgiro,oportunidades.idtel,oportunidades.idcategoria,oportunidades.idorigen,oportunidades.idfuente,col_sector.idsector,oportunidades.rsocial,2 as estatus,TipoCont,MontoCont,DesdeCont,HastaCont '+
           ' from oportunidades left join  col_sector on oportunidades.idcol = col_sector.idcol where oportunidades.idoportunidad='+NumOportunidad,1,SqlGeneral);

    //Verifica que se hayan pasado bien los datos
    querys('Select if((c.rsocial=o.rsocial) and (c.nombre='+quotedstr(nombre)+') and (c.apaterno= '+quotedstr(apaterno)+') and (c.amaterno= '+
           quotedstr(amaterno)+') , "OK", "X") as bien,o.idfact as FacturaOportunidad,o.idtel as tel,o.idcontacto as contacto,o.idusuario as usuario,o.idreferencia as referencia from clientes as c join oportunidades as o where idcliente='+
           quotedstr(NumCta)+' and o.idoportunidad='+quotedstr(NumOportunidad), 0, sqlgeneral);
 end
else
 begin
  //traspasa los datos de prospectos a clientes
  querys('insert into clientes (idcliente,nombre,apaterno,amaterno,dir,numero,ciudad,estado,cp,refs,idtipo,idcol,st_date,idgiro,idtel,idcategoria,idorigen,idfuente,sector,rsocial,estatus,TipoCont,MontoCont,DesdeCont,HastaCont) ' +
         'select '+NumCta+',oportunidades.nombre,oportunidades.apaterno,oportunidades.amaterno,oportunidades.dir,oportunidades.numero,oportunidades.ciudad,oportunidades.estado,oportunidades.cp,oportunidades.entre,oportunidades.idtipo,'+
         'oportunidades.idcol,"'+datetostr(date)+'",oportunidades.idgiro,oportunidades.idtel,oportunidades.idcategoria,oportunidades.idorigen,oportunidades.idfuente,col_sector.idsector,oportunidades.rsocial,2 as estatus,TipoCont,MontoCont,DesdeCont,HastaCont '+
         ' from oportunidades left join  col_sector on oportunidades.idcol = col_sector.idcol where oportunidades.idoportunidad='+NumOportunidad,1,SqlGeneral);

//Verifica que se hayan pasado bien los datos
  querys('Select if((c.rsocial=o.rsocial) and (c.nombre=o.nombre) and (c.apaterno= o.apaterno) and (c.amaterno= '+
         'o.amaterno) , "OK", "X") as bien,o.idfact as FacturaOportunidad,o.idtel as tel,o.idcontacto as contacto,o.idusuario as usuario,o.idreferencia as referencia  from clientes as c join oportunidades as o where idcliente='+
          quotedstr(NumCta)+' and o.idoportunidad='+quotedstr(NumOportunidad), 0, sqlgeneral);

 end;

//Verifica que se hayan pasado bien los datos
//querys('Select if((c.rsocial=o.rsocial) and (c.nombre=o.nombre) and (c.apaterno= o.apaterno) and (c.amaterno= '+
//       'o.amaterno) , "OK", "X") as bien from clientes as c join oportunidades as o where idcliente='+
//       quotedstr(NumCta)+' and o.idoportunidad='+quotedstr(NumOportunidad), 0, sqlgeneral);


if sqlgeneral.fieldbyname('bien').asstring <> 'OK' then
  begin
  NumCta:=inttostr(CuentaLibre);
  InsertaCliente(NumOportunidad,NumCta);
  end else
    begin
        //pasar datos de facturacion.....
        if sqlgeneral.fieldbyname('FacturaOportunidad').AsInteger > 0 then
          begin
              //querys('select max(idfact) as idfact from ClientesFact',0,sqlgeneral);


              querys('select p.*,col.nombre as colonia from OportunidadesFact as p left join colonias as col on(p.idcol=col.idcol) where idfact='+sqlgeneral.fieldbyname('FacturaOportunidad').AsString,0,dmreportes.sqlgeneral3);
              with dmreportes do begin
              if(sqlgeneral3.RecordCount >0) then
                begin
                querys('select max(idfact) as consecutivo from ClientesFact ',0,sqlgeneral4);
                   if(sqlgeneral3.FieldByName('rsocial').AsString <> '' ) then
                        querys('INSERT into ClientesFact(idfact,rsocial,dir,numero,idcol,ciudad,cp,rfc,telefono,casa,idcliente,DirCres,ColCres,CdCres,CpCres,RFCCres,NombreCres) values('+inttostr(sqlgeneral4.fieldbyname('consecutivo').AsInteger+1)+', '+''''+sqlgeneral3.fieldbyname('rsocial').asstring +''' , '+
                               ' '+''''+sqlgeneral3.fieldbyname('dir').asstring +''','+''''+sqlgeneral3.fieldbyname('numero').asstring +''','+''''+sqlgeneral3.fieldbyname('idcol').asstring +''','+''''+sqlgeneral3.fieldbyname('ciudad').asstring +''','+''''+sqlgeneral3.fieldbyname('cp').asstring +''','+
                               ' '+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+''''+sqlgeneral3.fieldbyname('telefono').asstring +''','+''''+sqlgeneral3.fieldbyname('casa').asstring +''','+NumCta+','+quotedstr(sqlgeneral3.fieldbyname('dir').asstring +' '+sqlgeneral3.fieldbyname('numero').asstring)+','+
                               ' '+''''+sqlgeneral3.fieldbyname('colonia').asstring +''','+''''+sqlgeneral3.fieldbyname('ciudad').asstring+''','+''''+sqlgeneral3.fieldbyname('cp').asstring+''','+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+''''+sqlgeneral3.fieldbyname('rsocial').asstring +''' )',1,sqlgeneral2)
                    else

                        querys('INSERT into ClientesFact(idfact,nombre,apaterno,amaterno,dir,numero,idcol,ciudad,cp,rfc,telefono,casa,idcliente,DirCres,ColCres,CdCres,CpCres,RFCCres,NombreCres) values('+inttostr(sqlgeneral4.fieldbyname('consecutivo').AsInteger+1)+','+''''+sqlgeneral3.fieldbyname('nombre').asstring +''' , '+''''+sqlgeneral3.fieldbyname('apaterno').asstring +''' ,'+''''+sqlgeneral3.fieldbyname('amaterno').asstring +''', '+
                               ' '+''''+sqlgeneral3.fieldbyname('dir').asstring +''','+''''+sqlgeneral3.fieldbyname('numero').asstring +''','+''''+sqlgeneral3.fieldbyname('idcol').asstring +''','+''''+sqlgeneral3.fieldbyname('ciudad').asstring +''','+''''+sqlgeneral3.fieldbyname('cp').asstring +''','+
                               ' '+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+''''+sqlgeneral3.fieldbyname('telefono').asstring +''','+''''+sqlgeneral3.fieldbyname('casa').asstring +''','+NumCta+','+quotedstr(sqlgeneral3.fieldbyname('dir').asstring +' '+sqlgeneral3.fieldbyname('numero').asstring)+','+
                               ' '+''''+sqlgeneral3.fieldbyname('colonia').asstring +''','+''''+sqlgeneral3.fieldbyname('ciudad').asstring+''','+''''+sqlgeneral3.fieldbyname('cp').asstring+''','+''''+sqlgeneral3.fieldbyname('rfc').asstring +''','+quotedstr(sqlgeneral3.fieldbyname('nombre').asstring + ' '+sqlgeneral3.fieldbyname('apaterno').asstring +' '+ sqlgeneral3.fieldbyname('amaterno').asstring) +' )',1,sqlgeneral2);


                  querys('update clientes set idfact='+inttostr(sqlgeneral4.fieldbyname('consecutivo').AsInteger+1)+' where idcliente='+NumCta,1,sqlgeneral2);
                 end;


              end;
          end;
          //*******************Pasar telefonos***************************/
          if sqlgeneral.fieldbyname('tel').AsInteger > 0 then
             begin
                 querys('select max(idtel) from telefonos',0,dmreportes.sqlgeneral2);
                 querys('INSERT into telefonos(idtel,telefono,tipo_tel,procedencia,extencion) select '+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger + 1)+',telefono,tipo_tel,''clientes'',extencion from telefonos where idtel='+sqlgeneral.fieldbyname('tel').AsString,1,dmreportes.sqlgeneral3);

                 querys('update clientes set idtel='+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger+1)+' where idcliente='+NumCta,1,dmreportes.sqlgeneral3);


             end;
          //***********************************************************//

          //*********************Pasar usuarios***********************//
           if sqlgeneral.fieldbyname('usuario').AsInteger > 0 then
             begin
                 querys('select max(idcontacto) from contactos',0,dmreportes.sqlgeneral2);
                 //  idc:=SQLcambios.Fields.Fields[0].AsInteger + 1;

                 querys('select *  from contactos where idcontacto='+sqlgeneral.fieldbyname('usuario').AsString,0,dmreportes.sqlgeneral5);
                 while not  dmreportes.sqlgeneral5.eof do
                   begin
                   idtel:=0;
                    if dmreportes.sqlgeneral5.fieldbyname('idtel').AsInteger > 0 then
                        begin
                            querys('select max(idtel) from telefonos',0,dmreportes.sqlgeneral4);
                            querys('INSERT into telefonos(idtel,telefono,tipo_tel,procedencia,extencion) select '+inttostr(dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1)+',telefono,tipo_tel,''usuarios'',extencion from telefonos where idtel='+dmreportes.sqlgeneral5.fieldbyname('idtel').AsString,1,dmreportes.sqlgeneral3);
                            idtel := dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1;
                        end;


                           querys('INSERT into contactos(idcontacto,idtel,nombre,apaterno,amaterno,procedencia,tipo,cuenta,tipo_referencia,usuario,fecha,hora) select '+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger + 1)+','+inttostr(idtel)+',nombre,apaterno,amaterno,''clientes/usuarios'',tipo,cuenta,tipo_referencia,usuario,fecha,hora from contactos where idcontador='+dmreportes.sqlgeneral5.fieldbyname('idcontador').AsString,1,dmreportes.sqlgeneral3);

                       dmreportes.sqlgeneral5.Next;
                   end;

                   querys('update clientes set idusuario='+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger+1)+' where idcliente='+NumCta,1,dmreportes.sqlgeneral3);
             end;
          //***********************************************************//


           //*********************Pasar Contactos***********************//
           if sqlgeneral.fieldbyname('contacto').AsInteger > 0 then
             begin
                 querys('select max(idcontacto) from contactos',0,dmreportes.sqlgeneral2);
                 //  idc:=SQLcambios.Fields.Fields[0].AsInteger + 1;

                 querys('select *  from contactos where idcontacto='+sqlgeneral.fieldbyname('contacto').AsString,0,dmreportes.sqlgeneral5);
                 while not  dmreportes.sqlgeneral5.eof do
                   begin
                   idtel:=0;
                    if dmreportes.sqlgeneral5.fieldbyname('idtel').AsInteger > 0 then
                        begin
                            querys('select max(idtel) from telefonos',0,dmreportes.sqlgeneral4);
                            querys('INSERT into telefonos(idtel,telefono,tipo_tel,procedencia,extencion) select '+inttostr(dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1)+',telefono,tipo_tel,''contactos'',extencion from telefonos where idtel='+dmreportes.sqlgeneral5.fieldbyname('idtel').AsString,1,dmreportes.sqlgeneral3);
                            idtel := dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1;
                        end;


                           querys('INSERT into contactos(idcontacto,idtel,nombre,apaterno,amaterno,procedencia,tipo,cuenta,tipo_referencia,usuario,fecha,hora) select '+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger + 1)+','+inttostr(idtel)+',nombre,apaterno,amaterno,''clientes'',tipo,cuenta,tipo_referencia,usuario,fecha,hora from contactos where idcontador='+dmreportes.sqlgeneral5.fieldbyname('idcontador').AsString,1,dmreportes.sqlgeneral3);

                       dmreportes.sqlgeneral5.Next;
                   end;

                   querys('update clientes set idcontacto='+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger+1)+' where idcliente='+NumCta,1,dmreportes.sqlgeneral3);
             end;
          //***********************************************************//

          //*********************Pasar Referencias***********************//
           if sqlgeneral.fieldbyname('referencia').AsInteger > 0 then
             begin
                 querys('select max(idcontacto) from contactos',0,dmreportes.sqlgeneral2);
                 //  idc:=SQLcambios.Fields.Fields[0].AsInteger + 1;

                 querys('select *  from contactos where idcontacto='+sqlgeneral.fieldbyname('referencia').AsString,0,dmreportes.sqlgeneral5);
                 while not  dmreportes.sqlgeneral5.eof do
                   begin
                   idtel:=0;
                    if dmreportes.sqlgeneral5.fieldbyname('idtel').AsInteger > 0 then
                        begin
                            querys('select max(idtel) from telefonos',0,dmreportes.sqlgeneral4);
                            querys('INSERT into telefonos(idtel,telefono,tipo_tel,procedencia,extencion) select '+inttostr(dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1)+',telefono,tipo_tel,''clientes/referencias'',extencion from telefonos where idtel='+dmreportes.sqlgeneral5.fieldbyname('idtel').AsString,1,dmreportes.sqlgeneral3);
                            idtel := dmreportes.sqlgeneral4.Fields.Fields[0].AsInteger + 1;
                        end;


                           querys('INSERT into contactos(idcontacto,idtel,nombre,apaterno,amaterno,procedencia,tipo,cuenta,tipo_referencia,usuario,fecha,hora) select '+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger + 1)+','+inttostr(idtel)+',nombre,apaterno,amaterno,''clientes/referencias'',tipo,cuenta,tipo_referencia,usuario,fecha,hora from contactos where idcontador='+dmreportes.sqlgeneral5.fieldbyname('idcontador').AsString,1,dmreportes.sqlgeneral3);

                       dmreportes.sqlgeneral5.Next;
                   end;

                   querys('update clientes set idreferencia='+inttostr(dmreportes.sqlgeneral2.Fields.Fields[0].AsInteger+1)+' where idcliente='+NumCta,1,dmreportes.sqlgeneral3);
             end;
          //***********************************************************//



    end;//nuevo cliente



application.MessageBox(pchar('Se han pasado los datos de la oportunidad '+NumOportunidad+' a la cuenta '+NumCta),'Aviso',mb_iconinformation);
//actualiza el numero de cuenta de la tabla de oportunidades
querys('update oportunidades set cuenta='+quotedstr(NumCta)+' WHERE idoportunidad='+quotedstr(NumOportunidad),1,SqlGeneral);
sqlgeneral.Free;
end;
  }

procedure AuditoriaAntiguedadSaldos(mes,ano,TipoImpresion:string;factura:boolean);
  var {titulo,titulo2,}tabla,titulo:string;
  xvencer,vencido : double;
begin
xvencer := 0;
vencido := 0;
with dmreportes do
  begin

  if(factura= false) then
   begin
      tabla := 'RepAntiguedadSaldos';
      titulo := 'Reporte de antiguedad de saldos (Rem-Fact). Periodo :'+mes+' '+ano;

   end else
     begin
      tabla := 'RepAntiguedadSaldosFacturas';
      titulo := 'Reporte de antiguedad de saldos (Facturas). Periodo :'+mes+' '+ano;
      end;

        querys('Select TXVencer as total from  '+tabla+' where mes ="'+mes+'" and ano="'+ano+'" group by sector' ,0,sqlgeneral3);
        while not sqlgeneral3.Eof do
          begin
               xvencer := xvencer  + sqlgeneral3.fieldbyname('total').asfloat;

               sqlgeneral3.Next;
          end;

        querys('Select TVencidos as total from  '+tabla+' where mes ="'+mes+'" and ano="'+ano+'" group by sector' ,0,sqlgeneral3);

          while not sqlgeneral3.Eof do
          begin
               vencido := vencido  + sqlgeneral3.fieldbyname('total').asfloat;

               sqlgeneral3.Next;
          end;

        querys('SELECT * FROM '+tabla+' where mes ='+quotedstr(mes)+' and ano='+quotedstr(ano)+' order by sector,idcliente asc ',0,sqlgeneral);
        querys('SELECT "" as periodo,"'+titulo+'" as titulo,'+floattostr(xvencer)+' as TVENC,'+floattostr(vencido)+' as TVENCIDO',0,sqlgeneral2);
        //#dalyla agregye
        querys('select l.nombre as linea,count(t.idcliente) as clientes,sum(vencido) as vencido,sum(columna2) columna2,sum(columna3) as columna3,'+
         ' sum(columna4) as columna4,sum(xvencer) as xvencer from '+tabla+
         ' as t left join pedidos p on p.idpedido=t.idpedido'+
         ' left join UnidadNegocio u on p.idunidadnegocio=u.idunidadnegocio '+
         ' left join lineas l on l.idlinea=u.idlinea '+
         ' where mes ='+quotedstr(mes)+' and ano='+quotedstr(ano)+' GROUP BY l.idlinea ',0,dmreportes.sqlgeneral4);

        OperacionReporte('RepAntiguedadSaldos', '', TipoImpresion, 1);

  end;
end;



procedure RepAntiguedadSaldos(tReporte:integer;sqlgeneral,sqlgeneral2,sqlgeneral3:TMyQuery;ckbnormales,ckbforzosos,chkbcancelados,ckbabogado:TRzCheckBox;cbomovimientos,cbosector1,cbosector2:TRzComboBox;TipoImpresion,UN1,UN2,dfecha1,dfecha2:string;Guardar,chkDesAplicar,SinEnlance:boolean);
  var fe,titulo,vencido,xvencer,d2,m2,ano,tabla,_inicioSQL,_finalSQL,_medioSQL,_campos,cadena:string;
      entro:bool;
begin

ano := formatdatetime('yyyy',strtodate(dfecha2));
d2 := formatdatetime('d',strtodate(dfecha2));
m2 := formatdatetime('m',strtodate(dfecha2));

if(Guardar = true) then
  begin
  if cbomovimientos.Text = 'RF' then
    tabla := 'RepAntiguedadSaldos'
  else
    tabla := 'RepAntiguedadSaldosFacturas';

  querys('SELECT * FROM '+tabla+' where mes ='+quotedstr(meses[strtoint(m2)])+' and ano='+quotedstr(ano)+' ',0,sqlgeneral);
  if sqlgeneral.FieldByName('mes').AsString <> '' then
    begin
    application.MessageBox('Ya fue generado el corte del mes y año!','Atención',MB_ICONINFORMATION);
    exit;
    end;
  end;

querys('DROP TABLE IF EXISTS temporal_antiguedad'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temporal_antiguedad2'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS TempNotas'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temp1'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalclientes'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalvencidos1'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalvencidos2'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalvencidos3'+frmprincipal.idmaq,1,sqlgeneral3);

_campos := 'comentario,idpago,FechaAlta,FechaVence,idpedido,restante,idcliente,sector,dir,nombre,telefono,tipo_tel,'+
           'NumEmbargo,NumDemanda,abogado,contrato,movimiento,idnota,FechaAbo,UnidadNegocio,Factura';

_inicioSQL := ' SELECT distinct pc.notas as comentario, pc.idpago,pc.FechaAlta,pc.FechaVence,pc.idpedido,pc.restante, '+
              'c.idcliente,c.sector,concat_ws(",",cf.DirCres,cf.ColCres,c.cp,cf.ciudad) as dir,cf.NombreCres as nombre, '+
              't.telefono,t.tipo_tel,c.NumEmbargo,c.NumDemanda,';

_inicioSQL := _inicioSQL+'concat_ws(",",a.nombre,a.apaterno,a.amaterno) as abogado,con.nombre as contrato,pc.movimiento, '+
              'c.idnota,c.FechaAbo,left(un.nombre,4) as UnidadNegocio,p.idfactura as Factura FROM PagosClientes as pc '+
              'INNER JOIN  pedidos as p  ON(p.idpedido=pc.idpedido) LEFT JOIN clientes as c ON(c.idcliente=pc.idcliente) '+
              'LEFT JOIN ClientesFact as cf ON(cf.idfact=c.idfact) LEFT JOIN abogados as a ON (a.idabogado=c.idabogado) ';

_inicioSQL := _inicioSQL+' LEFT JOIN telefonos as t ON (t.idtel=c.idtel) LEFT JOIN contratos as con ON '+
              'c.TipoCont=con.TipoCont LEFT JOIN UnidadNegocio as un on(un.idUnidadNegocio=p.idUnidadNegocio) WHERE';

_finalSQL := ' pc.FechaVence >= "'+dfecha1+'" and pc.movimiento in (0,1)  and c.sector between '+cbosector1.text+' '+
             'and '+cbosector2.text+' ';

_finalSQL := _finalSQL+' and p.idUnidadNegocio between "'+UN1+'" and "'+UN2+'"';
if chkbcancelados.Checked = false then
  _finalSQL :=  _finalSQL+' and c.bloqueado = 0 '
else
  _finalSQL := _finalSQL+' and c.bloqueado in(0,1) ';

if ckbabogado.checked = true then
  _finalSQL := _finalSQL+'and c.idabogado > 0 '
else
  begin
  if (ckbnormales.Checked) and (ckbforzosos.Checked) then  //para activos
    _finalSQL := _finalSQL+' and con.estatus in (0,1) '
  else
    begin
    if ckbforzosos.Checked then //para inactivos
      _finalSQL := _finalSQL+' and con.estatus=0 ';

    if ((ckbnormales.Checked) and (SinEnlance = true)) then
      _finalSQL := _finalSQL+'  and (con.estatus = 1 or c.TipoCont =''SEN'') and (c.idabogado = 0) '
    else
      _finalSQL := _finalSQL+'  and (con.estatus = 1 ) and (c.idabogado = 0) ';
    end;
  end;

if cbomovimientos.Text <> 'RF' then
  begin
  if cbomovimientos.Text ='REMISION' then
    _medioSQL := ' p.estatus= 3 and '
  else
    _medioSQL := ' p.estatus in(4,6)  and p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and ';
  end
else
  _medioSQL :=  ' p.estatus in(3,4,6) and ';

querys('CREATE TABLE temporal_antiguedad2'+frmprincipal.idmaq+ _inicioSQL+_medioSQL+' pc.restante > 3 and'+_finalSQL+
       ' GROUP BY pc.idpago',1,sqlgeneral3);

querys('Create Index idpedido on temporal_antiguedad2'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral3);
querys('Create Index movimiento on temporal_antiguedad2'+frmprincipal.idmaq+' (movimiento)',1,sqlgeneral3);

if ((SinEnlance= false) and (ckbforzosos.Checked = true)) then
  querys('DELETE temporal_antiguedad2'+frmprincipal.idmaq+' FROM temporal_antiguedad2'+frmprincipal.idmaq+' inner join clientes as c on (c.idcliente = temporal_antiguedad2'+frmprincipal.idmaq+'.idcliente) where c.TipoCont = ''SEN'' ',1,sqlgeneral);

querys('DELETE temporal_antiguedad2'+frmprincipal.idmaq+'  FROM temporal_antiguedad2'+frmprincipal.idmaq+' inner join PagosClientes ON(temporal_antiguedad2'+frmprincipal.idmaq+'.idpedido= PagosClientes.idpedido) where  temporal_antiguedad2'+frmprincipal.idmaq+'.movimiento = 0 and PagosClientes.movimiento =1 ',1,sqlgeneral);

//regresar pedidos Cancelados

querys('select rf.idpedido,p.idfactura from RemiFact as rf inner join pedidos as p on(p.idpedido = rf.idpedido) '+
       'where FechaBaja between ADDDATE("'+dfecha2+'", INTERVAL 1 DAY) and "'+datetostr(date)+'" and p.estatus=1 '+
       'group by rf.idpedido',0,sqlgeneral);
while not sqlgeneral.Eof do
  begin
  if cbomovimientos.Text = 'RF' then
    entro:=true
  else
    begin
    if cbomovimientos.Text ='REMISION' then
      begin
      if sqlgeneral.FieldByName('idfactura').AsString = '0' then
        entro:=true
      else
        entro:=false;
      end
    else
      begin
      if sqlgeneral.FieldByName('idfactura').AsString <> '0' then
        entro:=true
      else
        entro:=false;
      end;
    end;

  if entro then
    begin
    querys('INSERT INTO temporal_antiguedad2'+frmprincipal.idmaq+ ' ('+_campos+')  '+_inicioSQL+_finalSQL+
           ' and pc.idpedido = '+sqlgeneral.FieldByName('idpedido').AsString+' GROUP BY pc.idpago',1,sqlgeneral3);

    //actualizar saldo.....
    querys('Select pc2.abono,pc2.idpago from PagosClientes as pc2 Inner Join PagosAfecta as pa on(pa.idpago=pc2.idpago) '+
           'Where pc2.idpedido='+sqlgeneral.FieldByName('idpedido').AsString +' and pc2.FechaAlta >= "'+dfecha1+'" and '+
           'pc2.movimiento in (0,2,10)',0,sqlgeneral3);
    while not sqlgeneral3.Eof do
      begin
      querys('Update temporal_antiguedad2'+frmprincipal.idmaq+ ' set restante = restante + '+sqlgeneral3.Fields.Fields[0].AsString+
             ' where idpedido= '+sqlgeneral.FieldByName('idpedido').AsString,1,sqlgeneral2);
      sqlgeneral3.Next;
      end;
    end;
  sqlgeneral.next;
  end;

//otra vez por el ciclo anterior ni pedo......
querys('DELETE temporal_antiguedad2'+frmprincipal.idmaq+'  FROM temporal_antiguedad2'+frmprincipal.idmaq+' inner join '+
       'PagosClientes ON(temporal_antiguedad2'+frmprincipal.idmaq+'.idpedido= PagosClientes.idpedido) where '+
       'temporal_antiguedad2'+frmprincipal.idmaq+'.movimiento = 0 and PagosClientes.movimiento =1 ',1,sqlgeneral);

//********CREAR TABLAS TEMPORALES PARA DESAPLICAR PAGOS QUE FUERON GENERADOS DE LA FECHA DOS HASTA LA FECHA ACTUAL(CIERRE DE MES REAL) *********/

if chkDesAplicar = true then
  begin
  //aqui ay que quitar todos los remisionados que no entran en el rango de fechas especificados
  if((cbomovimientos.Text = 'RF') or (cbomovimientos.Text = 'REMISION')) then
    querys('DELETE temporal_antiguedad2'+frmprincipal.idmaq+'  from temporal_antiguedad2'+frmprincipal.idmaq+', RemiFact   where temporal_antiguedad2'+frmprincipal.idmaq+'.idpedido =  RemiFact.idpedido and  RemiFact.FechaAlta between ADDDATE("'+dfecha2+'", INTERVAL 1 DAY) and "'+datetostr(date)+'" and idfactura = "0" ',1,sqlgeneral);

  querys('DROP TABLE IF EXISTS TempAnt_DesAplicar1'+frmprincipal.idmaq,1,sqlgeneral3);

  _inicioSQL := ' Select pc.idcliente,pc.idpedido,pc.abono as pago,pa.idpago,pa.idpago2 as PagoAfecto from PagosClientes '+
                'as pc Inner Join PagosAfecta as pa on(pa.idpago=pc.idpago) Inner Join pedidos as p on (p.idpedido = '+
                'pc.idpedido)  ';
  _inicioSQL := _inicioSQL +' inner join clientes as c on(c.idcliente = pc.idcliente)  LEFT JOIN ClientesFact as cf '+
               'ON(cf.idfact=c.idfact) LEFT JOIN abogados as a ON (a.idabogado=c.idabogado) LEFT JOIN contratos as con '+
               'ON (c.TipoCont=con.TipoCont) Where';
  _finalSQL  := '  pc.fecha > "'+dfecha2+'"  and pc.movimiento in (0,2,10) and c.sector between '+cbosector1.text+' and '+
                ''+cbosector2.text+' and p.idUnidadNegocio between "'+UN1+'" and "'+UN2+'"  ';
                
  if ckbabogado.checked = true then
    _finalSQL := _finalSQL + 'and c.idabogado > 0 '
  else
    begin
    if (ckbnormales.Checked) and (ckbforzosos.Checked) then  //para activos
      _finalSQL := _finalSQL+ ' and con.estatus in (0,1)  '
    else
      begin
      if ckbforzosos.Checked then //para inactivos
        _finalSQL := _finalSQL +' and con.estatus=0 ';
      if ((ckbnormales.Checked) and  (SinEnlance = false)) then
        _finalSQL := _finalSQL +' and con.estatus=1 and (c.idabogado = 0) '
      else
        _finalSQL := _finalSQL +' and (con.estatus = 1 or c.TipoCont =''SEN'') and (c.idabogado = 0) ';

      end;
    end;
               _medioSQL := '';

    if cbomovimientos.Text <> 'RF' then
      begin
         if cbomovimientos.Text ='REMISION' then
              _medioSQL := ' p.estatus= 3 and '
         else
              _medioSQL := ' p.estatus in(4,6)  and p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and ';
      end else
           _medioSQL :=  ' p.estatus in (3,4,6) and ';

   querys('CREATE TABLE TempAnt_DesAplicar1'+frmprincipal.idmaq+ _inicioSQL+_medioSQL+_finalSQL,1,sqlgeneral3);
{_campos := 'idcliente,idpedido,pago,idpago,PagoAfecto';
   if(cbomovimientos.Text = 'RF') then
     begin
         _medioSQL := ' p.estatus= 4  and p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and ';
         querys('INSERT INTO TempAnt_DesAplicar1'+frmprincipal.idmaq+ ' ('+_campos+')  '+_inicioSQL+_medioSQL+_finalSQL+
         ' and pc.idpedido not in (select idpedido from TempAnt_DesAplicar1'+frmprincipal.idmaq+' )',1,sqlgeneral3);
     end;
                
        }
  querys('Create Index PagoAfecto on TempAnt_DesAplicar1'+frmprincipal.idmaq+' (PagoAfecto)',1,sqlgeneral3);
  querys('Create Index idcliente on TempAnt_DesAplicar1'+frmprincipal.idmaq+' (idcliente)',1,sqlgeneral3);

    querys('Select te.idcliente,te.idpedido,te.pago as TotalDebe,pc.FechaVence,PagoAfecto from TempAnt_DesAplicar1'+frmprincipal.idmaq+' as te inner join PagosClientes as pc on(te.PagoAfecto=pc.idpago) Where pc.fecha >= '+''''+dfecha1+''' order by te.idcliente ',0,sqlgeneral3);

    if sqlgeneral3.RecordCount >0 then
      begin
      querys('Create Index idpago on temporal_antiguedad2'+frmprincipal.idmaq+' (idpago)',1,sqlgeneral2);
      //Ahora ya tenemos los pagos realizados , hay que desaplicarlos para mostrar esas cantidades....

      while not sqlgeneral3.Eof do
        begin
        querys('Select idcliente from temporal_antiguedad2'+frmprincipal.idmaq+' where idpago ='+sqlgeneral3.fieldbyname('PagoAfecto').AsString+' ',0,sqlgeneral2);
        if sqlgeneral2.RecordCount >0 then
          begin
          querys('Update  temporal_antiguedad2'+frmprincipal.idmaq+' set restante = restante +  '+sqlgeneral3.fieldbyname('TotalDebe').AsString+' where idpago =' +sqlgeneral3.fieldbyname('PagoAfecto').AsString+' ',1,sqlgeneral);
          end
        else
          begin
          querys(' INSERT INTO temporal_antiguedad2'+frmprincipal.idmaq+' SELECT distinct pc.notas as comentario, pc.idpago,pc.FechaAlta,pc.FechaVence,pc.idpedido,'+sqlgeneral3.fieldbyname('TotalDebe').AsString+',c.idcliente,c.sector,concat_ws(",",cf.DirCres,cf.ColCres,c.cp,cf.ciudad) as dir,cf.NombreCres as nombre,'+
                 ' t.telefono,t.tipo_tel,c.NumEmbargo,c.NumDemanda,concat_ws(",",a.nombre,a.apaterno,a.amaterno) as abogado,con.nombre as contrato,pc.movimiento,c.idnota,c.FechaAbo,p.idfactura,left(un.nombre,4) as UnidadNegocio FROM PagosClientes as pc '+
                 ' INNER JOIN  pedidos as p  ON(p.idpedido=pc.idpedido) LEFT JOIN clientes as c ON(c.idcliente=pc.idcliente) LEFT JOIN ClientesFact as cf ON(cf.idfact=c.idfact) LEFT JOIN abogados as a ON (a.idabogado=c.idabogado) '+
                 ' LEFT JOIN telefonos as t ON (t.idtel=c.idtel) LEFT JOIN contratos as con ON (c.TipoCont=con.TipoCont) LEFT JOIN UnidadNegocio as un on(un.idUnidadNegocio=p.idUnidadNegocio)  where pc.idpago='+sqlgeneral3.fieldbyname('PagoAfecto').AsString+' and pc.fecha <= '+''''+dfecha2+''' group by pc.idpago ',1,sqlgeneral);
          end;
        sqlgeneral3.Next;
        end;
      end;
    //querys('DROP TABLE IF EXISTS TempAnt_DesAplicar1'+frmprincipal.idmaq,1,sqlgeneral3);
    //*********FIN CREAR TABLAS TEMPORALES PARA CIERRE DE MES REAL********//
    querys('Delete from temporal_antiguedad2'+frmprincipal.idmaq+' where FechaAlta >  '+''''+dfecha2+''' ',1,sqlgeneral);
    end;

  //crear tabla notas para sacar la ultima nota del cliente.....
  querys('CREATE TABLE TempNotas'+frmprincipal.idmaq+' select idcliente,nota,max(id),n.idnota from notas as n left join temporal_antiguedad2'+frmprincipal.idmaq+' as t1 ON(t1.idnota=n.idnota) where TipoNota=''GENERALES'' and t1.movimiento <> 100 group by n.idnota,idcliente ',1,sqlgeneral3);
  querys('Create Index idcliente on TempNotas'+frmprincipal.idmaq+' (idcliente)',1,sqlgeneral3);

  querys('create table temp1'+frmprincipal.idmaq+' select idcliente,sector from temporal_antiguedad2'+frmprincipal.idmaq+' group by idcliente',1,sqlgeneral3);
  querys('create table temptotalclientes'+frmprincipal.idmaq+' select count(idcliente) as TotalClientes,sector from temp1'+frmprincipal.idmaq+' group by sector',1,sqlgeneral3);

  querys('Create table temptotalvencidos1'+frmprincipal.idmaq+'  SELECT t1.idcliente as idcliente,t1.sector,sum( if ( to_days('+quotedstr(dfecha2)+') >  to_days(FechaVence),restante,0 ) ) as vencido FROM temporal_antiguedad2'+frmprincipal.idmaq+' as t1  group by idcliente ORDER BY t1.SECTOR,idcliente ASC ',1,sqlgeneral3);
  querys('Create table temptotalvencidos2'+frmprincipal.idmaq+' select count(idcliente) as TXVencer,sector from temptotalvencidos1'+frmprincipal.idmaq+' where  vencido <  2  group by sector ',1,sqlgeneral3);
  querys('Create table temptotalvencidos3'+frmprincipal.idmaq+' select count(idcliente) as TVencidos,sector from temptotalvencidos1'+frmprincipal.idmaq+' where  vencido  > 2  group by sector ',1,sqlgeneral3);

  querys('Select sum(TXVencer) as total from  temptotalvencidos2'+frmprincipal.idmaq,0,sqlgeneral3);
  xvencer := sqlgeneral3.fieldbyname('total').AsString;
  querys('Select sum(TVencidos) as total from  temptotalvencidos3'+frmprincipal.idmaq,0,sqlgeneral3);
  vencido := sqlgeneral3.fieldbyname('total').AsString;

   fe:='Del '+dfecha1+' al '+dfecha2;
   case cbomovimientos.ItemIndex of
      0: titulo:='(REMISIONES Y FACTURAS) del '+ cbosector1.Text+' al '+cbosector2.Text;
      1: titulo:='(REMISIONES) del '+ cbosector1.Text+' al '+cbosector2.Text;
      2: titulo:='(FACTURAS) del '+ cbosector1.Text+' al '+cbosector2.Text;
      end;

   {if cbomovimientos.ItemIndex = -1 then
     titulo:='(REMISIONES Y FACTURAS) del '+ cbosector1.Text+' al '+cbosector2.Text
   else
     if cbomovimientos.ItemIndex = 0 then
       titulo:='(REMISIONES) del '+ cbosector1.Text+' al '+cbosector2.Text
     else
       titulo:='(FACTURAS) del '+ cbosector1.Text+' al '+cbosector2.Text;     }

                                                                                                                                                                             //,idremicion,idfactura
  cadena :='SELECT tt2.TXVencer,tt3.TVencidos,idpago,FechaAlta,FechaVence,idpedido,restante,t1.idcliente as idcliente,t1.sector,dir,nombre,telefono,tipo_tel,NumEmbargo,NumDemanda,abogado,contrato,movimiento,FechaAbo,tn.nota as comentario,'+
         'if ( (to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) > 90 ) ,restante,''0.00'' )*1 as columna2,if ( (to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) <= 90  and to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) > 30) ,restante,''0.00'' )*1 as columna3, '+
         ' if ( (to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) <= 30 and to_days('+quotedstr(dfecha2)+') -to_days(FechaVence) > 0),restante,''0.00'')*1 as columna4,'+
         ' if ( to_days('+quotedstr(dfecha2)+') >  to_days(FechaVence) ,restante,''0.00'' )*1 as VENCIDO,if ( to_days('+quotedstr(dfecha2)+') <='+
         ' to_days(FechaVence),restante,''0.00'')*1 as  XVENCER,Factura,UnidadNegocio FROM temporal_antiguedad2'+frmprincipal.idmaq+' as t1 left join TempNotas'+frmprincipal.idmaq+' as tn on(tn.idcliente=t1.idcliente) left join temptotalclientes'+frmprincipal.idmaq+' as ttotal ON(ttotal.sector=t1.SECTOR) '+
         ' left join temptotalvencidos2'+frmprincipal.idmaq+' as tt2 ON (tt2.sector=t1.sector) left join temptotalvencidos3'+frmprincipal.idmaq+' as tt3 ON (tt3.sector=t1.sector) '+
         'ORDER BY t1.sector,idcliente ASC';
  querys(cadena,0,sqlgeneral);
  querys('select l.nombre as linea,count(t.idcliente) as clientes,sum(vencido) as vencido,sum(columna2) columna2,sum(columna3) as columna3,'+
         ' sum(columna4) as columna4,sum(xvencer) as xvencer from('+cadena+
         ') as t left join pedidos p on p.idpedido=t.idpedido'+
         ' left join UnidadNegocio u on p.idunidadnegocio=u.idunidadnegocio '+
         ' left join lineas l on l.idlinea=u.idlinea GROUP BY l.idlinea ',0,dmreportes.sqlgeneral4);
  if(tReporte = 0) then begin
  querys('SELECT "'+fe+'" as periodo,"'+titulo+'" as titulo,"'+xvencer+'" as TVENC,"'+vencido+'" as TVENCIDO',0,sqlgeneral2);
  end
  else
    querys('SELECT "'+fe+'" as periodo,"'+titulo+'" as titulo,tt2.TXVencer,tt3.TVencidos,t1.sector,sum(if ( to_days('+quotedstr(dfecha2)+') >  to_days(FechaVence) ,restante,''0.00'' )) as VENCIDO,sum(if ( to_days('+quotedstr(dfecha2)+') <= to_days(FechaVence),restante,''0.00'')) as  XVENCER FROM temporal_antiguedad2'+frmprincipal.idmaq+' as t1 '+
         ' left join TempNotas'+frmprincipal.idmaq+' as tn on(tn.idcliente=t1.idcliente) left join temptotalclientes'+frmprincipal.idmaq+' as ttotal ON(ttotal.sector=t1.SECTOR) left join temptotalvencidos2'+frmprincipal.idmaq+' as tt2 ON (tt2.sector=t1.sector) left join temptotalvencidos3'+frmprincipal.idmaq+' as tt3 ON (tt3.sector=t1.sector) '+
         'GROUP BY t1.sector ORDER BY t1.sector ASC',0,sqlgeneral3);


  if sqlgeneral.RecordCount > 0 then
  begin
    //generar reporte rave
    if guardar = true then
    begin
      if application.MessageBox(pchar('Esta seguro de generar reporte Antiguedad X Linea historico del año '+ano+' del mes '+meses[strtoint(m2)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
      begin
       querys('INSERT INTO '+tabla+' (TXVencer, TVencidos, idpago, FechaAlta, FechaVence, idpedido, restante, idcliente, sector, dir, '+
              'nombre, telefono, tipo_tel, NumEmbargo, NumDemanda, abogado, contrato, movimiento, FechaAbo,  comentario, '+
              'columna2, columna3, columna4, VENCIDO, XVENCER, mes, ano, Factura, UnidadNegocio) SELECT tt2.TXVencer,tt3.TVencidos,idpago,FechaAlta,FechaVence,idpedido,restante,t1.idcliente as idcliente,t1.sector,dir,nombre,telefono,tipo_tel, '+
              'NumEmbargo,NumDemanda,abogado,contrato,movimiento,FechaAbo,tn.nota as comentario,if ( to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) > 90 ,restante,''0.00'' ) as columna2,'+
              'if ( (to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) <= 90  and to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) > 30) ,restante,''0.00'' ) as columna3, '+
              'if ( (to_days('+quotedstr(dfecha2)+')-to_days(FechaVence) <= 30 and to_days('+quotedstr(dfecha2)+') -to_days(FechaVence) > 0),restante,''0.00'') as columna4,'+
              'if ( to_days('+quotedstr(dfecha2)+') >  to_days(FechaVence) ,restante,''0.00'' ) as VENCIDO,if ( to_days('+quotedstr(dfecha2)+') <= to_days(FechaVence),restante,''0.00'') as  XVENCER,'+quotedstr(meses[strtoint(m2)])+','+quotedstr(ano)+',Factura,UnidadNegocio '+
              'FROM temporal_antiguedad2'+frmprincipal.idmaq+' as t1 left join TempNotas'+frmprincipal.idmaq+' as tn on(tn.idcliente=t1.idcliente) left join temptotalclientes'+frmprincipal.idmaq+' as ttotal ON(ttotal.sector=t1.SECTOR) '+
              ' left join temptotalvencidos2'+frmprincipal.idmaq+' as tt2 ON (tt2.sector=t1.sector) left join temptotalvencidos3'+frmprincipal.idmaq+' as tt3 ON (tt3.sector=t1.sector)  where movimiento <>100 ORDER BY t1.sector,idcliente ASC',1,sqlgeneral3);

       application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
      end;
     exit;
     end;


  if(tReporte = 0) then
  begin //detallado
   {dmreportes.RVP.SetParam('total1',xvencer);
   dmreportes.RVP.SetParam('total',vencido);
   dmreportes.RVP.ProjectFile:=uprincipal.my_path+'Reportes_sysalarm.rav';
   dmreportes.RVP.SetParam('fechaini',fe);
   dmreportes.RVP.SetParam('titulo1',titulo); }
   CerrarVentanaMensaje;

   //OperacionReporte('RepAntxlinea','Reporte de antiguedad por linea',TipoImpresion, 0);
   OperacionReporte('RepAntiguedadSaldos','Reporte de antiguedad por linea',TipoImpresion, 1);
//   dmreportes.rvp.close;
  end else
   begin   //concentrado
        OperacionReporte('RepAntxLineaConcen','Reporte de antiguedad por linea Concentrado',TipoImpresion, 1);

   end;

   end
else
  begin
  frmmensaje.Close;
  application.MessageBox('No hay datos a mostrar','Atención',mb_IconInformation);
  end;

querys('DROP TABLE IF EXISTS temporal_antiguedad2'+frmprincipal.idmaq,1,sqlgeneral);
querys('DROP TABLE IF EXISTS temporal_antiguedad'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS TempNotas'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temp1'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalclientes'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalvencidos1'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalvencidos2'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS temptotalvencidos3'+frmprincipal.idmaq,1,sqlgeneral3);
querys('DROP TABLE IF EXISTS TempAnt_DesAplicar1'+frmprincipal.idmaq,1,sqlgeneral3);
end;

function VerificarReporte(dfecha1,dfecha2:string):boolean;
var
ano,d1,d2,m1,m2:string;
diasxmes:integer;
begin

      ano := formatdatetime('yyyy',strtodate(dfecha1));  //el mes

      d1 := formatdatetime('d',strtodate(dfecha1));
      d2 := formatdatetime('d',strtodate(dfecha2));
      m1 := formatdatetime('m',strtodate(dfecha1));
      m2 := formatdatetime('m',strtodate(dfecha2));
      diasxmes := DiasMes(m1);

      if ((d1='1') and (d2=inttostr(diasxmes)) and (m1=m2)) then
        result := true
      else
        result := false;

end;

procedure AuditoriaFacturasCanceladas(mes,ano,TipoImpresion:string);
begin
with dmreportes do
  begin
     querys('SELECT * FROM RepFactCanceladas where periodo='+quotedstr(mes+'-'+ano)+' ',0,sqlgeneral2);
      if sqlgeneral2.FieldByName('PERIODO').AsString <> '' then
        begin
               ///generar reporte concentrado......
               querys('SELECT t1.* FROM RepFactCanceladas as t1  WHERE periodo='+quotedstr(mes+'-'+ano)+' ',0,sqlgeneral2);
               OperacionReporte('FacturasCanceladas','Reporte de facturas canceladas',TipoImpresion, 1);
               Screen.Cursor := crDefault;
               CerrarVentanaMensaje;
               Abort;

        end else
            application.MessageBox(pchar('No exiten datos , se necesita generar corte del mes:'+mes+' del año :'+ano+'!'),'Atención',MB_ICONINFORMATION);

  end;

end;


procedure RepFacturasCanceladas(sqlgeneral2,sqlgeneral3:TMyQuery;TipoImpresion,dfecha1,dfecha2:string;Guardar:boolean);
var ano,m1,fecha:string;
begin
   Screen.Cursor := crHourglass;
   if Guardar = true then
   begin
      m1 := formatdatetime('m',strtodate(dfecha1));
      ano := formatdatetime('yyyy',strtodate(dfecha1));  //el mes
      fecha := meses[strtoint(m1)]+'-'+ano;
      querys('SELECT * FROM RepFactCanceladas where periodo='+quotedstr(fecha)+' ',0,sqlgeneral2);
      if sqlgeneral2.FieldByName('PERIODO').AsString <> '' then
      begin
         application.MessageBox('Ya fue generado el corte del mes y año de este reporte !','Atención',MB_ICONINFORMATION);
         exit;
      end;
   end;

   querys('DROP TABLE IF EXISTS TemporalFactCAN'+frmprincipal.idmaq,1,sqlgeneral3);
   
   querys('CREATE TABLE TemporalFactCAN'+frmprincipal.idmaq+' (idcliente int(11),FechaCreacion date,FechaFactura date,FechaBaja date, '+
         'idremicion int(11),idfactura varchar(30),SubTotal double default 0, IVA double default 0, IVA2 double default 0, IVA3 double default 0, IVA4 double default 0,'+
         'TotMn double default 0,UsuarioBaja varchar(100), UnidadNegocio varchar(30))' ,1,sqlgeneral3);

   querys('INSERT INTO TemporalFactCAN'+frmprincipal.idmaq+'(idcliente,FechaCreacion,FechaFactura,FechaBaja,idremicion,idfactura, '+
         'SubTotal, IVA, IVA2, IVA3, IVA4, TotMn,UsuarioBaja, UnidadNegocio) SELECT p.idcliente as idcliente,p.FechaRemision, '+
         'rm.fechaalta,rm.FechaBaja,rm.idremicion,p.idfactura, p.SubTotal, '+
         'if(piva=0.10, p.iva, 0) as iva, if(piva=0.11, p.iva, 0) as iva2, if(piva=0.15, p.iva, 0) as iva3, if(piva=0.16, p.iva, 0) as iva4,'+
         'p.TotMn,rm.UsuarioBaja,u.nombre FROM RemiFact as rm left JOIN pedidos as p ON p.idfactura=rm.idfactura '+
         'left join UnidadNegocio as u on p.idunidadnegocio=u.idunidadnegocio WHERE rm.FechaBaja BETWEEN "'+dfecha1+'" '+
         'and "'+dfecha2+'" and p.estatus = 1 and p.idfactura is not null and p.idfactura<>"0" GROUP BY p.idfactura ORDER BY p.idfactura',1,sqlgeneral2);

   querys('INSERT INTO TemporalFactCAN'+frmprincipal.idmaq+'(idcliente,FechaCreacion,FechaFactura,FechaBaja,idremicion,idfactura,SubTotal, '+
         'IVA, IVA2, IVA3, IVA4, TotMn,UsuarioBaja, UnidadNegocio) SELECT p.idcliente as idcliente,p.FechaRemision,p.fechafactura,fp.Fecha,''0'','+
         'p.idfactura,p.SubTotal, '+
         'if(piva=0.10, p.iva, 0) as iva, if(piva=0.11, p.iva, 0) as iva2, if(piva=0.15, p.iva, 0) as iva3, if(piva=0.16, p.iva, 0) as iva4,'+
         'p.TotMn,fp.usuario, '+
         'u.nombre FROM FacturaPedido as fp left JOIN pedidos as p ON (p.idpedido=fp.idpedido1) left join UnidadNegocio '+
         'as u on(p.idunidadnegocio=u.idunidadnegocio) WHERE fp.Fecha BETWEEN "'+dfecha1+'" and "'+dfecha2+'" and '+
         'p.estatus = 1  and p.idfactura is not null and p.idfactura<>"0" GROUP BY p.idfactura ORDER BY p.idfactura',1,sqlgeneral2);
   if guardar = false then
      querys('SELECT * FROM TemporalFactCAN'+frmprincipal.idmaq+' GROUP BY idfactura ORDER BY UnidadNegocio, idfactura asc',0,sqlgeneral2)
   else
   begin
      if application.MessageBox(pchar('Esta seguro de generar reporte Facturas Canceladas historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
      begin
         querys('INSERT INTO RepFactCanceladas SELECT idcliente,FechaCreacion,FechaFactura,FechaBaja,idremicion,idfactura,TotMn,UsuarioBaja,'+quotedstr(fecha)+',Subtotal,'+
         'IVA,IVA2,IVA3,IVA4, UnidadNegocio FROM TemporalFactCAN'+frmprincipal.idmaq+' GROUP BY idfactura ORDER BY idfactura asc  ' ,1,sqlgeneral2);
         application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
         Screen.Cursor := crDefault;
      end;
      exit;
   end;

   if sqlgeneral2.FieldByName('idcliente').AsString <> '' then
   begin
      Screen.Cursor := crDefault;
      CerrarVentanaMensaje;
      OperacionReporte('FacturasCanceladas','Reporte de facturas canceladas',TipoImpresion, 1);
   end
   else
   begin
      Screen.Cursor := crDefault;
      CerrarVentanaMensaje;
      application.MessageBox('No hay datos a mostrar','Atención',mb_IconInformation);
   end;
   querys('DROP TABLE IF EXISTS TemporalFactCAN'+frmprincipal.idmaq,1,sqlgeneral3);
end;

procedure AuditoriaAnalisisVentas(mes,ano,tipo,TipoImpresion:string);
begin
with dmreportes do
  begin
                 ///generar reporte concentrado......
               querys('SELECT * FROM RepAnaliticoVentas WHERE PERIODO='+quotedstr(mes+'-'+ano)+' and CLASIFICACION='+quotedstr(tipo)+' ',0,sqlgeneral2);
               if sqlgeneral2.FieldByName('PERIODO').AsString = '' then
               begin
                   application.MessageBox(pchar('No exiten datos , se necesita generar corte del mes:'+mes+' del año :'+ano+'!'),'Atención',MB_ICONINFORMATION);
                   Abort;
               end;
               OperacionReporte('AnaliticoVentas','Reporte de analisis de ventas',TipoImpresion, 1);

  end;
end;


procedure RepAnalisisVentas(sqlgeneral,sqlgeneral2:TMyQuery;gbanalisisvta:TRzRadioGroup;TipoImpresion,dfecha1,dfecha2:string;Guardar:boolean);
var fecha,ano,d1,d2,m1,m2:string;
ban,ban2:integer;
total:double;
//diasxmes:integer;
begin
{ban:=0;
ban2:=0;}

Screen.Cursor := crHourglass;

      ano := formatdatetime('yyyy',strtodate(dfecha1));  //el mes

      d1 := formatdatetime('d',strtodate(dfecha1));
      d2 := formatdatetime('d',strtodate(dfecha2));
      m1 := formatdatetime('m',strtodate(dfecha1));
      m2 := formatdatetime('m',strtodate(dfecha2));
      //diasxmes := DiasMes(m1);

if gbanalisisvta.ItemIndex = 2 then
  begin
  ban:=1;
  ban2:=1;
  end
else
  begin
  if gbanalisisvta.ItemIndex = 0 then
    begin
    ban:=1;
    ban2:=0;
    end
  else
    begin
    ban:=0;
    ban2:=1;
    end;
  end;


if guardar = false then
  fecha:='Del '+dfecha1+ ' al '+dfecha2
else
  fecha := meses[strtoint(m1)]+'-'+ano;  //el mes

if Guardar = true then
  begin
  querys('SELECT * FROM RepAnaliticoVentas where PERIODO='+quotedstr(fecha)+' and CLASIFICACION='+
         inttostr(gbanalisisvta.ItemIndex)+' ',0,sqlgeneral);
  if sqlgeneral.FieldByName('PERIODO').AsString <> '' then
    begin
    application.MessageBox('Ya fue generado el corte del mes y año de este reporte !','Atención',MB_ICONINFORMATION);
    exit;
    end;
  end;

////////VENTAS TOTALES ........
if ban = 1 then
  begin
  querys('DROP TABLE IF EXISTS temporalanaliticot'+frmprincipal.idmaq,1,sqlgeneral);
  querys('CREATE TABLE temporalanaliticot'+frmprincipal.idmaq+' (PERIODO varchar(100),TIPO varchar(15),LINEA varchar(50), '+
         'BRUTO decimal(11,2) default 0, IVA decimal(11,2) default 0,IVA2 decimal(11,2) default 0, IVA3 decimal(11,2) default 0,IVA4 decimal(11,2) default 0, TOTAL decimal(11,2) '+
         'default 0,PORCENTAJE decimal(11,2) default 0)',1,sqlgeneral);
  querys('Insert into temporalanaliticot'+frmprincipal.idmaq+' (PERIODO,TIPO,LINEA) select '+quotedstr(fecha)+' as PERIODO, '+
         '"VENTAS TOTALES" AS TIPO,nombre AS LINEA  from lineas ',1,sqlgeneral);
  querys('select tipo, linea, sum(bruto) as bruto, sum(iva) as iva, sum(iva2) as iva2, sum(iva3) as iva3, sum(iva4) as iva4, sum(total) as total, porcentaje from ('+
         'SELECT distinct '+quotedstr(fecha)+' as PERIODO,"VENTAS TOTALES" AS TIPO, l.nombre AS LINEA, '+
         'if(p.estatus = 1, 0, sum(if(dp.cant > 0, (dp.cant*dp.costo)*dp.tc,(dp.piezas*dp.costo)*dp.tc)))  as BRUTO,'+
         'if(p.estatus = 1, 0, if(p.piva=0.10, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA,'+
         'if(p.estatus = 1, 0, if(p.piva=0.11, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA2,'+
         'if(p.estatus = 1, 0, if(p.piva=0.15, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA3,'+
         'if(p.estatus = 1, 0, if(p.piva=0.16, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA4,'+
         'if(p.estatus = 1, 0, sum(if(dp.cant > 0,(dp.cant*dp.costo)*dp.tc+(((dp.cant*dp.costo)*dp.tc)*p.pIVA),(dp.cant*dp.costo)* dp.tc + '+
         '(((dp.piezas*dp.costo)*dp.tc)*p.pIVA))))  as TOTAL, dp.costo AS PORCENTAJE, dp.cod_cve '+
         'from DetPedido as dp LEFT JOIN pedidos as p ON (p.idpedido=dp.idpedido) LEFT JOIN articulos as a ON a.cod_cve=dp.cod_cve '+
         'LEFT JOIN lineas as l ON (l.idlinea=a.idlinea) '+
         'WHERE p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and '+
         'p.estatus in(1,4,6)group by l.nombre,  p.piva '+
         //'p.estatus in(4,6)group by l.nombre,  p.piva '+
         'UNION '+
         'SELECT distinct '+quotedstr(fecha)+' as PERIODO, "VENTAS TOTALES" AS TIPO, l.nombre AS LINEA, '+
         'if(p.estatus = 1, 0, sum(if(dp.cant > 0, (dp.cant*dp.costo)*dp.tc,(dp.piezas*dp.costo)*dp.tc))) as BRUTO,'+
         'if(p.estatus = 1, 0, if(p.piva=0.10, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA,'+
         'if(p.estatus = 1, 0, if(p.piva=0.11, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA2,'+
         'if(p.estatus = 1, 0, if(p.piva=0.15, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA3,'+
         'if(p.estatus = 1, 0, if(p.piva=0.16, sum(if(dp.cant > 0,((dp.cant*dp.costo)*dp.tc)*p.pIVA,((dp.piezas*dp.costo)*dp.tc)*p.pIVA)),0)) as IVA4,'+
         'if(p.estatus = 1, 0, sum(if(dp.cant > 0,(dp.cant*dp.costo)*dp.tc+(((dp.cant*dp.costo)*dp.tc)*p.pIVA),(dp.cant*dp.costo)*dp.tc+(((dp.piezas*'+
         'dp.costo)*dp.tc)*p.pIVA))))  as TOTAL, dp.costo AS PORCENTAJE, dp.cod_cve '+
         'from NoDetPedido as dp LEFT JOIN NoPedidos as p ON (p.idpedido=dp.idpedido) LEFT JOIN articulos as a ON a.cod_cve = '+
         'dp.cod_cve LEFT JOIN lineas as l ON l.idlinea=a.idlinea '+
         'WHERE p.FechaFactura between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+'  '+
         'and p.estatus in(1,4,6) '+
         //'and p.estatus in(4,6) '+
         'group by l.nombre, p.piva ) as t group by linea',1,sqlgeneral);

  while not sqlgeneral.eof do
    begin
    querys('UPDATE temporalanaliticot'+frmprincipal.idmaq+' set BRUTO = "'+sqlgeneral.fieldbyname('BRUTO').asstring+'", '+
           'IVA = "'+sqlgeneral.fieldbyname('IVA').asstring+'",IVA2 = "'+sqlgeneral.fieldbyname('IVA2').asstring+'", '+
           'IVA3 = "'+sqlgeneral.fieldbyname('IVA3').asstring+'",IVA4 = "'+sqlgeneral.fieldbyname('IVA4').asstring+'", '+
           'TOTAL = "'+sqlgeneral.fieldbyname('TOTAL').asstring+'", PORCENTAJE="'+sqlgeneral.fieldbyname('PORCENTAJE').asstring+
           '"  WHERE  LINEA = "'+sqlgeneral.fieldbyname('LINEA').asstring+'" ',1,sqlgeneral2);
    sqlgeneral.next;
    end;

  querys('SELECT SUM(TOTAL) AS TOT FROM temporalanaliticot'+frmprincipal.idmaq+' ',0,sqlgeneral);
  total:= sqlgeneral.fieldbyname('TOT').AsFloat;

  querys('UPDATE temporalanaliticot'+frmprincipal.idmaq+' SET PORCENTAJE=ROUND((TOTAL*100)/'+floattostr(total)+',2) ',1,sqlgeneral);

  if gbanalisisvta.ItemIndex <> 2 then begin
    Screen.Cursor := crDefault;
    if guardar = false then
        querys('SELECT * FROM  temporalanaliticot'+frmprincipal.idmaq+' ' ,0,sqlgeneral2)
    else
       begin
         if application.MessageBox(pchar('Esta seguro de generar reporte Analisis de Ventas historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
            begin
                querys('INSERT INTO RepAnaliticoVentas SELECT *,0 FROM  temporalanaliticot'+frmprincipal.idmaq+' ' ,1,sqlgeneral2);
                application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
            end;
            exit;

       end;
    CerrarVentanaMensaje;
    OperacionReporte('AnaliticoVentas','Reporte de analisis de ventas',TipoImpresion, 1);
    end;
  end;
///////////////////////////////////////

///////////////NOTAS DE CREDITO
if ban2 = 1 then begin

    querys('DROP TABLE IF EXISTS temporalanaliticonc'+frmprincipal.idmaq,1,sqlgeneral);

    querys('CREATE TABLE temporalanaliticonc'+frmprincipal.idmaq+' '+
           'select periodo, tipo, linea, sum(bruto) as bruto, sum(iva) as iva, sum(iva2) as iva2, sum(iva3) as iva3, sum(iva4) as iva4, sum(total) as total, porcentaje from ('+
           'SELECT distinct "'+fecha+'" as PERIODO, "NOTAS DE CREDITO" '+
           'AS TIPO,l.nombre AS LINEA, sum(if(dnc.cant > 0,if (dnc.tc>0, (dnc.cant*dnc.costo)*dnc.tc,(dnc.cant*dnc.costo)), '+
           'if(dnc.tc>0,((dnc.piezas*dnc.costo) )*dnc.tc,(dnc.piezas*dnc.costo)) )) as BRUTO, '+
           //'sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           //'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))) as IVA, '+
           'if(nc.piva=0.10, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA, '+
           'if(nc.piva=0.11, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA2, '+
           'if(nc.piva=0.15, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA3, '+
           'if(nc.piva=0.16, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA4, '+

           'sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*(1+nc.piva))*dnc.tc,(dnc.cant*dnc.costo)*(1+nc.piva)),if (dnc.tc>0, ((dnc.piezas*dnc.costo)*(1+nc.piva))*dnc.tc,(dnc.piezas*dnc.costo)*(1+nc.piva)))) as TOTAL, '+
           'dnc.costo AS PORCENTAJE, dnc.cod_cve '+
           ' from DetNotasCredito as dnc LEFT JOIN NotasCredito as nc ON (dnc.idnc=nc.idnc) and dnc.serie=nc.serie LEFT JOIN articulos as a ON (a.cod_cve=dnc.cod_cve) LEFT JOIN lineas as l ON (l.idlinea=a.idlinea) '+
           'WHERE nc.FechaNc between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+'  group by l.nombre,  nc.piva '+
           'UNION '+
           'SELECT distinct '+quotedstr(fecha)+' as PERIODO,''NOTAS DE CREDITO'' AS TIPO,l.nombre AS LINEA, '+
           'sum(if(dnc.cant > 0,if (dnc.tc>0, (dnc.cant*dnc.costo)*dnc.tc,(dnc.cant*dnc.costo)) ,if (dnc.tc>0,((dnc.piezas*dnc.costo) )*dnc.tc,(dnc.piezas*dnc.costo)) )) as BRUTO, '+
           //'sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva) ,if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))) as IVA, '+
           'if(nc.piva=0.10, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA, '+
           'if(nc.piva=0.11, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA2, '+
           'if(nc.piva=0.15, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA3, '+
           'if(nc.piva=0.16, sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*nc.piva)*dnc.tc,(dnc.cant*dnc.costo)*nc.piva), '+
           'if (dnc.tc>0,((dnc.piezas*dnc.costo)*nc.piva)*dnc.tc,(dnc.piezas*dnc.costo)*nc.piva))), 0) as IVA4, '+

           'sum(if(dnc.cant > 0,if (dnc.tc>0,((dnc.cant*dnc.costo)*(1+nc.piva))*dnc.tc,(dnc.cant*dnc.costo)*(1+nc.piva)),if (dnc.tc>0, ((dnc.piezas*dnc.costo)*(1+nc.piva))*dnc.tc,(dnc.piezas*dnc.costo)*(1+nc.piva)))) as TOTAL, '+
           'dnc.costo AS PORCENTAJE, dnc.cod_cve '+
           'from NoDetNotasCredito as dnc LEFT JOIN NoNotasCredito as nc ON (dnc.idnc=nc.idnc) and dnc.serie=nc.serie LEFT JOIN articulos as a ON (a.cod_cve=dnc.cod_cve) LEFT JOIN lineas as l ON (l.idlinea=a.idlinea) '+
           'WHERE nc.FechaNc between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+'  group by l.nombre,  nc.piva ) as t group by linea ',1,sqlgeneral);
    querys('SELECT SUM(TOTAL) AS TOT FROM temporalanaliticonc'+frmprincipal.idmaq+' ',0,sqlgeneral);
    total:= sqlgeneral.fieldbyname('TOT').AsFloat;

    querys('UPDATE temporalanaliticonc'+frmprincipal.idmaq+' SET PORCENTAJE=ROUND((TOTAL*100)/'+floattostr(total)+',2) ',1,sqlgeneral);

    if gbanalisisvta.ItemIndex <> 2 then begin
                 Screen.Cursor := crDefault;
                 if guardar = false then
                        querys('SELECT * FROM  temporalanaliticonc'+frmprincipal.idmaq+' ' ,0,sqlgeneral2)
                 else
                    begin
                      if application.MessageBox(pchar('Esta seguro de generar Analisis de Notas de Credito reporte historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
                         begin
                             querys('INSERT INTO RepAnaliticoVentas SELECT *,1 FROM  temporalanaliticonc'+frmprincipal.idmaq+' ' ,1,sqlgeneral2);
                             application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
                         end;
                         exit;

                    end;
                 CerrarVentanaMensaje;
                 OperacionReporte('AnaliticoVentas','Reporte de analisis de ventas',TipoImpresion, 1);

     end;

end;
/////////////////////////////

 ////VENTAS - NOTAS DE CREDITO

             if gbanalisisvta.ItemIndex =2 then begin  //sacar reporte con totales menos notas de credito

                 querys('UPDATE temporalanaliticot'+frmprincipal.idmaq+' AS T6,temporalanaliticonc'+frmprincipal.idmaq+' AS T5 SET T6.TIPO=''TOTALES DESGLOSANDO NOTAS DE CREDITO'', '+
                        'T6.BRUTO=(T6.BRUTO - T5.BRUTO),T6.IVA=(T6.IVA - T5.IVA), T6.IVA2=(T6.IVA2 - T5.IVA2), '+
                        ' T6.IVA3=(T6.IVA3 - T5.IVA3),  T6.IVA4=(T6.IVA4 - T5.IVA4),'+
                        'T6.TOTAL=(T6.TOTAL - T5.TOTAL) WHERE T6.LINEA=T5.LINEA ',1,sqlgeneral);
                 querys('SELECT SUM(TOTAL) AS TOT FROM temporalanaliticot'+frmprincipal.idmaq+' ',0,sqlgeneral);
                 total:= sqlgeneral.fieldbyname('TOT').AsFloat;

                 querys('UPDATE temporalanaliticot'+frmprincipal.idmaq+' SET PORCENTAJE=ROUND((TOTAL*100)/'+floattostr(total)+',2) ',1,sqlgeneral);

                  if guardar = false then
                       querys('SELECT * FROM  temporalanaliticot'+frmprincipal.idmaq+' ' ,0,sqlgeneral2)
                  else
                    begin
                      if application.MessageBox(pchar('Esta seguro de generar Totales Analisis de Ventas reporte historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
                         begin
                             querys('INSERT INTO RepAnaliticoVentas SELECT *,2 FROM  temporalanaliticot'+frmprincipal.idmaq+' ' ,1,sqlgeneral2);
                             application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
                         end;
                         exit;

                    end;
                       Screen.Cursor := crDefault;
                       CerrarVentanaMensaje;
                       OperacionReporte('AnaliticoVentas','Reporte de analisis de ventas',TipoImpresion, 1);

              end;

////////////////////////////////////////

    querys('DROP TABLE IF EXISTS temporalanaliticot'+frmprincipal.idmaq,1,sqlgeneral);
    querys('DROP TABLE IF EXISTS temporalanaliticonc'+frmprincipal.idmaq,1,sqlgeneral);

end;

procedure AuditoriaDiarioVentas(mes,ano,TipoImpresion:string);
begin
with dmreportes do begin

         querys('SELECT t1.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM RepDiarioVentas as t1 join DatosEmpresa as de  WHERE titulo2 = '+quotedstr(mes)+' and titulo1='+quotedstr(ano)+' ',0,sqlgeneral2);
         if sqlgeneral2.FieldByName('titulo1').AsString <> '' then
            OperacionReporte('DiarioVentaSimple','Reporte de diario de ventas simple',TipoImpresion, 1)
         else
            application.MessageBox(pchar('No exiten datos , se necesita generar corte del mes:'+mes+' del año :'+ano+'!'),'Atención',MB_ICONINFORMATION);
end;
end;

procedure RepDiarioVentas(sqlgeneral,sqlgeneral2:TMyQuery;ckbRsimple:TRzCheckBox;cbomovimientos,cbosector1,cbosector2:TRzComboBox;chkgfolios:TRzCheckGroup;TipoImpresion,UN1,UN2,dfecha1,dfecha2:string;Guardar:boolean);
  var fecha,titulo,tempo,cadena,ano,d1,d2,m1,m2:string;
begin
   ano := formatdatetime('yyyy',strtodate(dfecha1));  //el mes
   d1 := formatdatetime('d',strtodate(dfecha1));
   d2 := formatdatetime('d',strtodate(dfecha2));
   m1 := formatdatetime('m',strtodate(dfecha1));
   m2 := formatdatetime('m',strtodate(dfecha2));
   cadena:='';
   Screen.Cursor := crHourglass;

   if guardar = false then
      fecha:='Del '+dfecha1+ ' al '+dfecha2
   else
      fecha := meses[strtoint(m1)];  //el mes

   if Guardar = true then
   begin
      querys('SELECT * FROM RepDiarioVentas where titulo2='+quotedstr(meses[strtoint(m1)])+' and titulo1='+quotedstr(ano),0,sqlgeneral);
      if sqlgeneral.FieldByName('titulo1').AsString <> '' then
      begin
         application.MessageBox('Ya fue generado el corte del mes y año de este reporte !','Atención',MB_ICONINFORMATION);
         exit;
      end;
   end;

   if ckbRsimple.Checked = true  then
   begin
      if cbomovimientos.Text =  'RF' then
      begin
         titulo:='Remisionado y Facturado';
         querys('DROP TABLE IF EXISTS TempRemiFact'+frmprincipal.idmaq,1,sqlgeneral2);
         //primero creamos una tabla temporal con las ventas que fueron facturadas
         querys('CREATE TABLE TempRemiFact'+frmprincipal.idmaq+' SELECT '+quotedstr(titulo)+' as titulo1,'+quotedstr(fecha)+' as titulo2, '+
           'rf.idremicion,p.idpedido,p.idfactura,p.FechaRemision as FechaCreacion,p.FechaFactura as Fecha,'+
           'if(p.estatus=1, 0, p.SubTotal) as Importe,'+
           'if(p.estatus=1, 0,if(p.piva=0.10, p.Iva, 0)) as Iva, if(p.estatus=1, 0,if(p.piva=0.11, p.Iva, 0)) as Iva2, '+
           'if(p.estatus=1, 0,if(p.piva=0.15, p.Iva, 0)) as Iva3, if(p.estatus=1, 0,if(p.piva=0.16, p.Iva, 0)) as Iva4, '+
           'if(p.estatus=1, 0,p.TotMn) as Total,if(p.estatus=1, 0,p.Saldo) as Saldo,p.idcliente as Cuenta, '+
           'u.codigo as VND,  '+UsuarioNombre('u')+' as Nombre,p.idUnidadNegocio, if(p.estatus=1, "C","F") as E, '+ClienteNombre('cf')+' as Cliente, '+
           'c.sector FROM pedidos as p LEFT JOIN RemiFact as rf ON(rf.idpedido=p.idpedido) LEFT JOIN usuarios as u ON (u.idusuario = '+
           'p.idvendedor) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) INNER JOIN sectores as s on(s.idsector = c.sector) '+
           'Left join ClientesFact cf on cf.idfact=c.idfact '+
           'WHERE p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and p.idUnidadNegocio between "'+UN1+'" and "'+UN2+'" and '+
           's.idsector between '+cbosector1.Text+' and '+cbosector2.Text+'  '+
           'and p.estatus in(1,4,6) GROUP BY p.idpedido ORDER '+
           'BY p.FechaFactura ',1,sqlgeneral2);

         //despues con la ventas que solo estan en remision.....
         querys('INSERT INTO TempRemiFact'+frmprincipal.idmaq+'(titulo1,titulo2,idpedido,idfactura,FechaCreacion,Fecha,Importe,Iva,Iva2,Iva3, Iva4, '+
           'Total,Saldo,Cuenta,VND,Nombre,idUnidadNegocio,E,Cliente,sector)  '+
           'SELECT "'+titulo+'" as titulo1, "'+fecha+'" as titulo2, p.idpedido, rf.idfactura, p.FechaRemision, rf.FechaAlta as Fecha, '+
           'if(p.estatus=1, 0, p.SubTotal) as Importe,'+
           'if(p.estatus=1, 0,if(p.piva=0.10, p.Iva, 0)) as Iva, if(p.estatus=1, 0,if(p.piva=0.11, p.Iva, 0)) as Iva2, '+
           'if(p.estatus=1, 0,if(p.piva=0.15, p.Iva, 0)) as Iva3, if(p.estatus=1, 0,if(p.piva=0.16, p.Iva, 0)) as Iva4, '+
           'if(p.estatus=1, 0,p.TotMn) as Total,if(p.estatus=1, 0,p.Saldo) as Saldo,'+
           'p.idcliente as Cuenta,u.codigo as VND, '+UsuarioNombre('u')+' as Nombre,p.idUnidadNegocio,"R" as E, '+
           ClienteNombre('cf')+' as Cliente, c.sector FROM pedidos as p LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido) LEFT '+
           'JOIN usuarios as u ON (u.idusuario=p.idvendedor) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) INNER JOIN '+
           'sectores as s on(s.idsector = c.sector) '+
           'Left join ClientesFact cf on cf.idfact=c.idfact '+
           'WHERE p.FechaRemision between "'+dfecha1+'" and "'+dfecha2+'" and p.estatus = 3 '+
           'and rf.idremicion <> ''0'' and p.idUnidadNegocio between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' and s.idsector between '+quotedstr(cbosector1.Text)+' and '+quotedstr(cbosector2.Text)+' GROUP BY p.idpedido ORDER BY rf.FechaAlta',1,sqlgeneral2);
      end
      else
      begin
         if cbomovimientos.Text ='REMISION' then
         begin
            titulo:='Remisionado';
            //primero creamos una tabla temporal con las ventas que fueron facturadas
            querys('DROP TABLE IF EXISTS TempRemiFact'+frmprincipal.idmaq,1,sqlgeneral2);
            querys('CREATE TABLE TempRemiFact'+frmprincipal.idmaq+' SELECT "'+titulo+'" as titulo1, "'+fecha+'" as titulo2, rf.idremicion, '+
             'p.idpedido, p.idfactura, p.FechaRemision as FechaCreacion, p.FechaFactura as Fecha, if(p.estatus=1, 0, p.SubTotal) as Importe,'+
             'if(p.estatus=1, 0,if(p.piva=0.10, p.Iva, 0)) as Iva, if(p.estatus=1, 0,if(p.piva=0.11, p.Iva, 0)) as Iva2, '+
             'if(p.estatus=1, 0,if(p.piva=0.15, p.Iva, 0)) as Iva3, if(p.estatus=1, 0,if(p.piva=0.16, p.Iva, 0)) as Iva4, '+
             'if(p.estatus=1, 0,p.TotMn) as Total,if(p.estatus=1, 0,p.Saldo) as Saldo, p.idcliente as Cuenta, '+
             'u.codigo as VND, '+UsuarioNombre('u')+' as Nombre, p.idUnidadNegocio, if(p.estatus=1, "C","F") as E, '+ClienteNombre('cf')+' as Cliente, c.sector '+
             'FROM pedidos as p LEFT JOIN RemiFact as rf ON(rf.idpedido=p.idpedido) LEFT JOIN usuarios as u ON u.idusuario=p.idvendedor '+
             'LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) INNER JOIN sectores as s on(s.idsector = c.sector) '+
             'Left join ClientesFact cf on cf.idfact=c.idfact '+
             'WHERE p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and p.idUnidadNegocio between "'+UN1+'" and "'+UN2+'" and '+
             's.idsector between '+cbosector1.Text+' and '+cbosector2.Text+'  and p.estatus in(1,4) GROUP BY p.idpedido ORDER BY '+
             'p.FechaFactura ',1,sqlgeneral2);

            //despues con la ventas que solo estan en remision.....
            querys('INSERT INTO TempRemiFact'+frmprincipal.idmaq+'(titulo1,titulo2,idpedido,idfactura,FechaCreacion,Fecha,Importe,Iva,Iva2,Iva3,Iva4, '+
            'Total,Saldo,Cuenta,VND,Nombre,idUnidadNegocio,E,Cliente,sector) '+
            'SELECT "'+titulo+'" as titulo1, "'+fecha+'" as titulo2,p.idpedido,rf.idfactura,p.FechaRemision,rf.FechaAlta as Fecha,'+
            'if(p.estatus=1, 0, p.SubTotal) as Importe,'+
            'if(p.estatus=1, 0,if(p.piva=0.10, p.Iva, 0)) as Iva, if(p.estatus=1, 0,if(p.piva=0.11, p.Iva, 0)) as Iva2, '+
            'if(p.estatus=1, 0,if(p.piva=0.15, p.Iva, 0)) as Iva3, if(p.estatus=1, 0,if(p.piva=0.16, p.Iva, 0)) as Iva4, '+
            'if(p.estatus=1, 0,p.TotMn) as Total,if(p.estatus=1, 0,p.Saldo) as Saldo,'+
            'p.idcliente as Cuenta,u.codigo as VND, '+UsuarioNombre('u')+' as Nombre, p.idUnidadNegocio, "R" as E, '+ClienteNombre('cf')+
            ' as Cliente, c.sector FROM pedidos as p LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido) LEFT JOIN usuarios as u ON '+
            'u.idusuario=p.idvendedor LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) INNER JOIN sectores as s on s.idsector = '+
            'c.sector '+
            'Left join ClientesFact cf on cf.idfact=c.idfact '+
            'WHERE rf.FechaAlta between "'+dfecha1+'" and "'+dfecha2+'" and p.estatus in(3,5) and rf.idremicion <> "0" and '+
            'p.idUnidadNegocio between "'+UN1+'" and "'+UN2+'" and s.idsector between '+cbosector1.Text+' and '+cbosector2.Text+' '+
            'GROUP BY p.idpedido ORDER BY rf.FechaAlta',1,sqlgeneral2);
            cadena := 'SELECT distinct t.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa, '+
              'concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM TempRemiFact'+frmprincipal.idmaq+' as t join '+
              'DatosEmpresa as de ORDER BY idfactura, fecha';
         end
         else
         begin
            if cbomovimientos.Text ='REMISION2' then
            begin
               {titulo:='Remisionado2';
               cadena:='SELECT '+quotedstr(titulo)+' as titulo1,'+quotedstr(fecha)+' as titulo2,p.idpedido,p.idfactura,p.FechaCreacion,rf.FechaAlta as Fecha,p.SubTotal as Importe,p.Iva,p.TotMn as Total,p.Saldo,p.idcliente as Cuenta,u.codigo as VND, '+
               UsuarioNombre('u')+' as Nombre,p.idUnidadNegocio,''R'' as E, '+
               ClienteNombre('c')+' as Cliente,c.sector   '+
              'FROM pedidos as p  join DatosEmpresa as de LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido) LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) INNER JOIN sectores as s on(s.idsector = c.sector) '+
              'WHERE rf.FechaAlta between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+' and p.estatus in(3,5) and rf.idremicion <> ''0'' and p.idUnidadNegocio between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' and s.idsector between '+quotedstr(cbosector1.Text)+' and '+quotedstr(cbosector2.Text)+' and p.anualidad = 0 GROUP BY p.idpedido ORDER BY rf.FechaAlta, idcliente';}
            end
            else
            begin
               titulo:='Facturado';
               tempo := 'and (';
               if chkgfolios.ItemChecked[0] then
                  tempo := tempo+'p.idfactura like '+quotedstr('C%');
               if (chkgfolios.ItemChecked[1]) and (tempo <>'and (') then
                  tempo := tempo + ' or p.idfactura like '+quotedstr('D%');
               if (chkgfolios.ItemChecked[1]) and (tempo = 'and (') then
                  tempo := tempo + 'p.idfactura like '+quotedstr('D%');
               if (chkgfolios.ItemChecked[2]) and (tempo <>'and (') then
                  tempo := tempo + ' or p.idfactura like '+quotedstr('P%');
               if (chkgfolios.ItemChecked[2]) and (tempo = 'and (') then
                  tempo := tempo + 'p.idfactura like '+quotedstr('P%');
               tempo := tempo+')';
               if tempo = 'and ()' then
                  tempo :='';
               cadena:='SELECT "'+titulo+'" as titulo1, "'+fecha+'" as titulo2, rf.idremicion, p.idpedido, p.idfactura, p.FechaRemision, '+
                       'p.FechaFactura as Fecha, if(p.estatus=1, 0,p.SubTotal) as Importe, '+
                       //'if(p.piva='+piva+', p.Iva, 0) as Iva, if(p.piva='+piva2+', p.Iva, 0) as Iva2, '+
                       'if(p.estatus=1, 0,if(p.piva=0.10, p.Iva, 0)) as Iva, if(p.estatus=1, 0,if(p.piva=0.11, p.Iva, 0)) as Iva2, '+
                       'if(p.estatus=1, 0,if(p.piva=0.15, p.Iva, 0)) as Iva3, if(p.estatus=1, 0,if(p.piva=0.16, p.Iva, 0)) as Iva4, '+
                       'if(p.estatus=1, 0,p.TotMn) as Total,if(p.estatus=1, 0,p.Saldo) as Saldo,p.idcliente as Cuenta,u.codigo as VND, '+UsuarioNombre('u')+' as Nombre,p.idUnidadNegocio, '+
                       'if(p.estatus=1, "C","F") as E, '+ClienteNombre('cf')+' as Cliente,c.sector,de.nombre as Empresa, '+
                       'concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa ,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc  '+
                       'FROM pedidos as p join DatosEmpresa as de LEFT JOIN RemiFact as rf ON rf.idpedido=p.idpedido LEFT JOIN usuarios as u '+
                       'ON u.idusuario=p.idvendedor LEFT JOIN clientes as c ON c.idcliente=p.idcliente INNER JOIN sectores as s on s.idsector=c.sector '+
                       'Left join ClientesFact cf on cf.idfact=c.idfact '+
                       'WHERE p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and p.idUnidadNegocio between "'+UN1+'" and "'+UN2+'" and '+
                       's.idsector between '+cbosector1.Text+' and '+cbosector2.Text+' '+
                       'and p.estatus in(1,4,6) '+tempo+' GROUP BY p.idpedido '+
                       //'and p.estatus in(4,6) '+tempo+' GROUP BY p.idpedido '+
                       'ORDER BY p.idfactura, fecha ';
            end;
         end;
         //crear reporte
      end;

      if cbomovimientos.Text =  'RF' then
         querys('SELECT t.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa, '+
               'concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM TempRemiFact'+frmprincipal.idmaq+' as t '+
               'join DatosEmpresa as de ORDER BY idfactura, fecha',0,sqlgeneral2)
      else
         if Guardar = false then
            querys(cadena,0,sqlgeneral2)
         else
         begin
            if application.MessageBox(pchar('Esta seguro de generar reporte Diario de Ventas historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
            begin
               querys('INSERT INTO RepDiarioVentas SELECT "'+ano+'", "'+fecha+'" as titulo2, rf.idremicion, p.idpedido, p.idfactura, '+
                     'p.FechaRemision, p.FechaFactura as Fecha, if(p.estatus=1, 0, p.SubTotal) as Importe,'+
                     'if(p.estatus=1, 0,if(p.piva=0.10, p.Iva, 0)) as Iva, if(p.estatus=1, 0,if(p.piva=0.11, p.Iva, 0)) as Iva2, '+
                     'if(p.estatus=1, 0,if(p.piva=0.15, p.Iva, 0)) as Iva3, if(p.estatus=1, 0,if(p.piva=0.16, p.Iva, 0)) as Iva4, '+
                     'if(p.estatus=1, 0,p.TotMn) as Total,if(p.estatus=1, 0,p.Saldo) as Saldo,p.idcliente as Cuenta,u.codigo as VND, '+UsuarioNombre('u')+' as Nombre, p.idUnidadNegocio, '+
                     'if(p.estatus=1, "C","F") as E, '+ClienteNombre('cf')+' as Cliente,c.sector FROM pedidos as p LEFT JOIN RemiFact as rf ON rf.idpedido = '+
                     'p.idpedido LEFT JOIN usuarios as u ON u.idusuario=p.idvendedor LEFT JOIN clientes as c ON c.idcliente=p.idcliente '+
                     'INNER JOIN sectores as s on s.idsector = c.sector '+
                     'Left join ClientesFact cf on cf.idfact=c.idfact '+
                     'WHERE p.FechaFactura between "'+dfecha1+'" and "'+dfecha2+'" and '+
                     'p.idUnidadNegocio between "'+UN1+'" and "'+UN2+'" '+
                     'and s.idsector between '+cbosector1.Text+' and '+cbosector2.Text+' and p.estatus in(1,4,6) '+tempo+' GROUP BY p.idpedido ORDER BY p.FechaFactura,p.idfactura ',1,sqlgeneral2);
               application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
            end;
            CerrarVentanaMensaje;
            Exit;
         end;
      if sqlgeneral2.FieldByName('idpedido').AsString <> '' then
      begin
         OperacionReporte('DiarioVentaSimple','Reporte de diario de ventas simple',TipoImpresion, 1);
         if cbomovimientos.Text = 'RF' then
            querys('DROP TABLE IF EXISTS TempRemiFact'+frmprincipal.idmaq,1,sqlgeneral2)
      end
      else
      begin
         CerrarVentanaMensaje;
         application.MessageBox('No hay datos a mostrar','Atención',mb_IconInformation);
      end;
      Screen.Cursor := crDefault;
   end
   else
   begin // DETALLADO
      fecha:='Del '+dfecha1+' al '+dfecha2;
      if cbomovimientos.Text =  'RF' then
      begin
         titulo:='Remisionado y Facturado';
         //primero creamos una tabla temporal con las ventas que fueron facturadas
         querys('DROP TABLE IF EXISTS TempRemiFact'+frmprincipal.idmaq,1,sqlgeneral2);                                                                                                                                                                                                                //inner 2nd line  pedidos
         querys('CREATE TABLE TempRemiFact'+frmprincipal.idmaq+' SELECT "'+titulo+'" as titulo1, "'+fecha+'" as titulo2, dp.idpedido, '+
         'dp.cant as Cant, dp.piezas as Piezas, a.cod_cve, a.nombre,truncate((dp.costo*dp.tc),3) as Precio, '+
         'if(dp.cant > 0, truncate((dp.costo*dp.tc)*dp.cant,3), truncate((dp.costo*dp.tc)*dp.piezas,3)) as Iva, '+
         'if (dp.cant > 0,truncate(((dp.costo*dp.tc)*dp.cant),3),truncate(((dp.costo*dp.tc)*dp.piezas),3)) as ImportNeto, '+
         'rf.FechaAlta FROM DetPedido as dp LEFT JOIN pedidos as p ON  ' +
         '(p.idpedido=dp.idpedido) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido)LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) INNER JOIN sectores as s on(s.idsector = c.sector) '+
         ' WHERE p.FechaFactura between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+' and p.estatus in (1,4) and p.idUnidadNegocio between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' and s.idsector between '+quotedstr(cbosector1.Text)+' and '+quotedstr(cbosector2.Text)+' group by dp.id ORDER BY p.FechaFactura',1,sqlgeneral2);
         querys('INSERT INTO TempRemiFact'+frmprincipal.idmaq+'(titulo1,titulo2,FechaAlta,idpedido,Cant,Piezas,cod_cve,nombre,Precio,Iva,ImportNeto) SELECT '+quotedstr(titulo)+' as titulo1,'+quotedstr(fecha)+' as titulo2,rf.FechaAlta,dp.idpedido,dp.cant as Cant,dp.piezas as Piezas,a.cod_cve,a.nombre, '+
         'truncate((dp.costo*dp.tc),3) as Precio,if (dp.cant > 0, truncate((dp.costo*dp.tc)*dp.cant,3),truncate((dp.costo*dp.tc)*dp.piezas,3)) as Iva,if (dp.cant > 0,truncate(((dp.costo*dp.tc)*dp.cant),3),truncate(((dp.costo*dp.tc)*dp.piezas),3)) as ImportNeto  '+
         'FROM DetPedido as dp INNER JOIN pedidos as p ON (p.idpedido=dp.idpedido) LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido) LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
         ' INNER JOIN sectores as s on(s.idsector = c.sector) WHERE rf.FechaAlta between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+' and p.estatus =3 and rf.idremicion <> ''0''  and p.idUnidadNegocio between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' '+
         'and s.idsector between '+cbosector1.Text+' and '+cbosector2.Text+' GROUP BY dp.id ORDER BY rf.FechaAlta ',1,sqlgeneral2);
      end
      else
      begin
         if cbomovimientos.Text ='REMISION' then
         begin
            querys('DROP TABLE IF EXISTS TempRemiFact'+frmprincipal.idmaq,1,sqlgeneral2);  //primero creamos una tabla temporal con las ventas que fueron facturadas
            querys('CREATE TABLE TempRemiFact'+frmprincipal.idmaq+' SELECT '+quotedstr(titulo)+' as titulo1,'+quotedstr(fecha)+' as titulo2,dp.idpedido,dp.cant as Cant,dp.piezas as Piezas,a.cod_cve,a.nombre,truncate((dp.costo*dp.tc),3) as Precio,if (dp.cant > 0, truncate((dp.costo*dp.tc)*dp.cant,3), '+
                   'truncate((dp.costo*dp.tc)*dp.piezas,3)) as Iva, if (dp.cant > 0,truncate(((dp.costo*dp.tc)*dp.cant),3),truncate(((dp.costo*dp.tc)*dp.piezas),3)) as ImportNeto,rf.FechaAlta FROM DetPedido as dp LEFT JOIN pedidos as p ON  ' +
                   '(p.idpedido=dp.idpedido) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido)LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) INNER JOIN sectores as s on(s.idsector = c.sector) '+
                   ' WHERE p.FechaVencimiento between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+' and p.estatus in(4) and p.idUnidadNegocio between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' '+
                   'and s.idsector between '+cbosector1.Text+' and '+cbosector2.Text+' and p.anualidad = 0  and p.idcliente <> 10000 group by dp.id ORDER BY p.FechaFactura',1,sqlgeneral2);
                   
            querys('INSERT INTO TempRemiFact'+frmprincipal.idmaq+'(titulo1,titulo2,FechaAlta,idpedido,Cant,Piezas,cod_cve,nombre,Precio,Iva,ImportNeto) SELECT '+quotedstr(titulo)+' as titulo1,'+quotedstr(fecha)+' as titulo2,rf.FechaAlta,dp.idpedido,dp.cant as Cant,dp.piezas as Piezas,a.cod_cve,a.nombre, '+
                   'truncate((dp.costo*dp.tc),3) as Precio,if (dp.cant > 0, truncate((dp.costo*dp.tc)*dp.cant,3),truncate((dp.costo*dp.tc)*dp.piezas,3)) as Iva,if (dp.cant > 0,truncate(((dp.costo*dp.tc)*dp.cant),3),truncate(((dp.costo*dp.tc)*dp.piezas),3)) as ImportNeto  '+
                   'FROM DetPedido as dp INNER JOIN pedidos as p ON (p.idpedido=dp.idpedido) LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido) LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
                   ' INNER JOIN sectores as s on(s.idsector = c.sector) WHERE '+
                   'p.FechaVencimiento between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+' and p.estatus in(3,5) and rf.idremicion <> ''0''  and p.idUnidadNegocio between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' '+
                   'and s.idsector between '+cbosector1.Text+' and '+cbosector2.Text+' and p.anualidad = 0  and p.idcliente <> 10000 GROUP BY dp.id ORDER BY rf.FechaAlta ',1,sqlgeneral2);

            cadena := 'SELECT t.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM TempRemiFact'+frmprincipal.idmaq+' as t join DatosEmpresa as de ORDER BY FechaAlta,idpedido';
            {cadena:='SELECT dp.idpedido,dp.cant as Cant,dp.piezas as Piezas,dp.cod_cve,a.nombre,truncate((dp.costo*dp.tc),3) as Precio,if (dp.cant > 0, truncate((dp.costo*dp.tc)*dp.cant,3),truncate((dp.costo*dp.tc)*dp.piezas,3)) as Iva, '+
                  'if (dp.cant > 0,truncate(((dp.costo*dp.tc)*dp.cant),3),truncate(((dp.costo*dp.tc)*dp.piezas),3)) as ImportNeto,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa , ' +
                  'concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM DetPedido as dp join DatosEmpresa as de INNER JOIN pedidos as p ON(p.idpedido=dp.idpedido) INNER JOIN RemiFact as rf ON (rf.idpedido=p.idpedido)   '+
                  ' LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) INNER JOIN sectores as s on(s.idsector = c.sector) WHERE rf.FechaAlta between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+' and p.estatus =3 and rf.idremicion <> ''0''  and p.idUnidadNegocio '+
                  ' between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' and s.idsector between '+quotedstr(cbosector1.Text)+' and '+quotedstr(cbosector2.Text)+' GROUP BY dp.id ORDER BY p.idpedido,rf.FechaAlta';}
         end
         else
         begin
            if cbomovimientos.Text ='REMISION2' then
            {begin
                  cadena:='SELECT dp.idpedido,dp.cant as Cant,dp.piezas as Piezas,dp.cod_cve,a.nombre,truncate((dp.costo*dp.tc),3) as Precio,if (dp.cant > 0, truncate((dp.costo*dp.tc)*dp.cant,3),truncate((dp.costo*dp.tc)*dp.piezas,3)) as Iva, '+
                  'if (dp.cant > 0,truncate(((dp.costo*dp.tc)*dp.cant),3),truncate(((dp.costo*dp.tc)*dp.piezas),3)) as ImportNeto,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa , ' +
                  'concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM DetPedido as dp join DatosEmpresa as de INNER JOIN pedidos as p ON(p.idpedido=dp.idpedido) INNER JOIN RemiFact as rf ON (rf.idpedido=p.idpedido)   '+
                  'LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) INNER JOIN sectores as s on(s.idsector = c.sector) WHERE rf.FechaAlta between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+' and p.estatus in(3,4) and rf.idremicion <> ''0''  and p.idUnidadNegocio '+
                  ' between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' and s.idsector between '+quotedstr(cbosector1.Text)+' and '+quotedstr(cbosector2.Text)+' GROUP BY dp.id ORDER BY rf.FechaAlta, idcliente';
            end}
            else
            begin
               //solo facturado
               cadena:= 'SELECT dp.idpedido,dp.cant as Cant,dp.piezas as Piezas,dp.cod_cve,a.nombre,'+
                        'if(p.estatus=1, 0,truncate((dp.costo*dp.tc),2)) as Precio,'+
                        'if(p.estatus=1, 0,if (dp.cant > 0, truncate((dp.costo*dp.tc)*dp.cant,2),truncate((dp.costo*dp.tc)*dp.piezas,2))) as Iva, '+
                        'if(p.estatus=1, 0,if (dp.cant > 0,truncate(((dp.costo*dp.tc)*dp.cant),2),truncate(((dp.costo*dp.tc)*dp.piezas),2))) as ImportNeto,'+
                        'de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa ,  ' +
                        'concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc '+
                        'FROM DetPedido as dp join DatosEmpresa as de INNER JOIN pedidos as p ON (p.idpedido=dp.idpedido) '+
                        'LEFT JOIN RemiFact as rf ON (rf.idpedido=p.idpedido)  '+
                        ' LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
                        'INNER JOIN sectores as s on(s.idsector = c.sector) '+
                        'WHERE p.FechaFactura between '+quotedstr(dfecha1)+' and '+quotedstr(dfecha2)+'  and p.estatus in (1,4,6) '+
                        'and p.idUnidadNegocio between '+quotedstr(UN1)+' and '+quotedstr(UN2)+' '+
                        'and s.idsector between '+cbosector1.Text+' and '+cbosector2.Text+' '+
                        'GROUP BY  dp.id ORDER BY p.idpedido,rf.FechaAlta '+
//               cadena:=cadena+' AND p.estatus =4 '+
                        'and rf.idfactura <> ''0'' ';
            end;
         end;//remision.............
      end;
      if cbomovimientos.Text =  'RF' then
         querys('SELECT t.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM TempRemiFact'+frmprincipal.idmaq+' as t join DatosEmpresa as de ORDER BY FechaAlta,idpedido',0,sqlgeneral2)
      else
         querys(cadena,0,sqlgeneral2);
      if sqlgeneral2.FieldByName('Iva').AsString <> '' then
      begin
         Screen.Cursor := crDefault;
         CerrarVentanaMensaje;
         OperacionReporte('DiarioVentaDetallado','Reporte de diario de ventas detallado',TipoImpresion, 1);
         if cbomovimientos.Text =  'RF' then
            querys('DROP TABLE IF EXISTS TempRemiFact'+frmprincipal.idmaq,1,sqlgeneral2)
      end
      else
      begin
         Screen.Cursor := crDefault;
         CerrarVentanaMensaje;
         application.MessageBox('No hay datos a mostrar','Atención',mb_IconInformation);
      end;
   end;//detallado
end;


procedure CerrarVentanaMensaje;
var i:integer;
begin
         for i:=0 to screen.FormCount - 1 do
            if screen.Forms[i].Name = 'frmmensaje' then
                begin
                      (screen.Forms[i] as Tfrmmensaje).Close;
                end;
end;

procedure RepNotasCredito(rbstnodetallado,rbstdetallado,Guardar:boolean;dfecha1,dfecha2,TipoImpresion:string);
  var ano,m1,fecha:string;
begin

if (rbstnodetallado) or (rbstdetallado) then
  begin
  if rbstnodetallado then
    begin
    if Guardar = true then
      begin
      m1 := formatdatetime('m',strtodate(dfecha1));
      ano := formatdatetime('yyyy',strtodate(dfecha1));  //el mes
      fecha := meses[strtoint(m1)]+'-'+ano;

      if (rbstnodetallado) then
         begin
      querys('SELECT * FROM RepNotasCredito where periodo='+''''+fecha+''' ',0,dmreportes.sqlgeneral2);
      if dmreportes.sqlgeneral2.FieldByName('periodo').AsString <> '' then
        begin
        application.MessageBox('Ya fue generado el corte del mes y año de este reporte !','Atención',MB_ICONINFORMATION);
        exit;
        end;
        end;
      end;

    if Guardar = false then
      begin
      querys('select '+ClienteNombre('cf')+' as Nombre,c.idcliente,concat(nc.serie, nc.idnc) as idnc, nc.FechaNc,nc.idfactura,nc.subtotal,'+
             //'if(nc.piva='+piva+', nc.impuesto, 0) as impuesto, if(nc.piva='+piva2+', nc.impuesto, 0) as impuesto2,'+
             'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2, '+
             'if(nc.piva=0.15, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4, '+
             '"CLIENTE" as nocliente, '+
             'nc.total,nc.observaciones,nc.usuario from clientes as c inner join NotasCredito as nc on c.idcliente=nc.idcliente '+
             'Left join ClientesFact cf on cf.idfact=c.idfact '+
             ' where nc.FechaNc between "'+dfecha1+'" and "'+dfecha2+'" '+
             'union '+
             'select '+ClienteNombre('cf')+' as Nombre,c.idcliente,concat(nc.serie, nc.idnc) as idnc, nc.FechaNc,nc.idfactura,nc.subtotal,'+
             //'if(nc.piva='+piva+', nc.impuesto, 0) as impuesto, if(nc.piva='+piva2+', nc.impuesto, 0) as impuesto2,'+
             'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2, '+
             'if(nc.piva=0.15, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4, '+
             '"EX-CLIENTE" as nocliente, '+
             'nc.total,nc.observaciones,nc.usuario from NoClientes as c inner join NoNotasCredito as nc on c.idcliente=nc.idcliente and nc.idnocliente=c.idnocliente '+
             'Left join NoClientesFact cf on cf.idfact=c.idfact '+
             ' where nc.FechaNc between "'+dfecha1+'" and "'+dfecha2+'" '+
             'order by idnc',0,dmreportes.sqlgeneral);

       end
    else
      begin
      if application.MessageBox(pchar('Esta seguro de generar reporte Notas de Credito Simple, historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
        begin
        querys('INSERT INTO RepNotasCredito select '+ClienteNombre('cf')+' as Nombre,c.idcliente,'+
               'concat(nc.serie, nc.idnc) as idnc, nc.FechaNc,nc.idfactura,'+
               'nc.subtotal,'+
               //'if(nc.piva='+piva+', nc.impuesto, 0) as impuesto, if(nc.piva='+piva2+', nc.impuesto, 0) as impuesto2,'+
               'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2, '+
               'if(nc.piva=0.15, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4, '+
               'nc.total,nc.observaciones,nc.usuario,"'+fecha+'" from clientes as c inner join NotasCredito '+
               'as nc on c.idcliente=nc.idcliente '+
               'Left join ClientesFact cf on cf.idfact=c.idfact '+
               'where nc.FechaNc between "'+dfecha1+'" and "'+dfecha2+'" order by nc.FechaNc',1,dmreportes.sqlgeneral);

        //NO NOTAS DE CREDITO
        querys('INSERT INTO RepNotasCredito select '+ClienteNombre('cf')+' as Nombre,c.idcliente,'+
               'concat(nc.serie, nc.idnc) as idnc, '+
               'nc.FechaNc,nc.idfactura,'+
               'nc.subtotal,'+
               //'if(nc.piva='+piva+', nc.impuesto, 0) as impuesto, if(nc.piva='+piva2+', nc.impuesto, 0) as impuesto2,'+
               'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2, '+
               'if(nc.piva=0.15, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4, '+
               'nc.total,nc.observaciones,nc.usuario,"'+fecha+'" '+
               //', c.idnocliente ;'+
               'from NoClientes as c inner join NoNotasCredito '+
               'as nc on c.idcliente=nc.idcliente and nc.idnocliente=c.idnocliente '+
               'Left join NoClientesFact cf on cf.idfact=c.idfact '+
               'where nc.FechaNc between "'+dfecha1+'" and "'+dfecha2+'" order by nc.FechaNc',1,dmreportes.sqlgeneral);

        application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
        Screen.Cursor := crDefault;
        end;
      exit;
      end;

    Screen.Cursor := crDefault;
    frmmensaje.Close;
    OperacionReporte('NcNoDetallado','Reporte de Notas de credito no detallado',TipoImpresion, 1);
    end;

  if rbstdetallado then
    begin
    if Guardar = true then
      begin
      m1 := formatdatetime('m',strtodate(dfecha1));
      ano := formatdatetime('yyyy',strtodate(dfecha1));  //el mes
      fecha := meses[strtoint(m1)]+'-'+ano;
  
      querys('SELECT * FROM RepNotasCreditoDetallado where periodo="'+fecha+'" ',0,dmreportes.sqlgeneral2);
      if dmreportes.sqlgeneral2.FieldByName('periodo').AsString <> '' then
        begin
        application.MessageBox('Ya fue generado el corte del mes y año de este reporte !','Atención',MB_ICONINFORMATION);
        exit;
        end;
      end;
  
    if guardar = false then   //(1+p.piva)
      begin
      querys('select '+ClienteNombre('c')+' as Nombre,c.idcliente,concat(nc.serie, nc.idnc) as idnc,nc.FechaNc, nc.idfactura,nc.subtotal,'+
             //'if(nc.piva='+piva+', nc.impuesto, 0) as impuesto, if(nc.piva='+piva2+', nc.impuesto, 0) as impuesto2,'+
             'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2, '+
             'if(nc.piva=0.15, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4, '+
             'nc.total,'+
             '"CLIENTE" as nocliente, '+
             'nc.observaciones,nc.usuario,if(dnc.piezas > 0,concat(dnc.piezas,"p"),dnc.cant) as cant, dnc.cod_cve, (if(dnc.piezas > 0, '+
             'dnc.costo/a.piezasxunidad,dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant)) as Detcosto,'+
             'if(nc.piva = 0.10, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva,'+
             'if(nc.piva = 0.11, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva2,'+
             'if(nc.piva = 0.15, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva3,'+
             'if(nc.piva = 0.16, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva4,'+
             '(if(dnc.piezas > 0,dnc.costo/a.piezasxunidad, '+
             'dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant))+((if(dnc.piezas > 0,(dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*'+
             'dnc.tc)*'+
             'nc.piva'+
             ') as Dettotal from clientes as c inner join NotasCredito as nc on c.idcliente=nc.idcliente '+

             'inner join DetNotasCredito as dnc on dnc.idnc = nc.idnc and dnc.serie=nc.serie inner join articulos as a on a.cod_cve=dnc.cod_cve where nc.FechaNc '+
             'between "'+dfecha1+'" and "'+dfecha2+'" '+
             'UNION '+    //NO NOTAS DE CREDITO              //(1+p.piva)
             'select '+ClienteNombre('c')+' as Nombre,c.idcliente,concat(nc.serie, nc.idnc) as idnc,nc.FechaNc, nc.idfactura,nc.subtotal,'+
             'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2,'+
             'if(nc.piva=0.15, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4,'+
             'nc.total,'+
             '"EX-CLIENTE" as nocliente, '+
             'nc.observaciones,nc.usuario,if(dnc.piezas > 0,concat(dnc.piezas,"p"),dnc.cant) as cant, dnc.cod_cve, (if(dnc.piezas > 0, '+
             'dnc.costo/a.piezasxunidad,dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant)) as Detcosto,'+
             'if(nc.piva = 0.10, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva,'+
             'if(nc.piva = 0.11, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva2,'+
             'if(nc.piva = 0.15, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva3,'+
             'if(nc.piva = 0.16, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva4,'+
             '(if(dnc.piezas > 0,dnc.costo/a.piezasxunidad, '+
             //'*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*(1+p.piva)) as DetIva,(if(dnc.piezas > 0,dnc.costo/a.piezasxunidad, '+
             'dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant))+((if(dnc.piezas > 0,(dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*'+
             'dnc.tc)*'+
             //floattostr(getIVA)+
             'nc.piva'+
             ') as Dettotal from NoClientes as c inner join NoNotasCredito as nc on c.idcliente=nc.idcliente and nc.idnocliente=c.idnocliente '+
             //'dnc.tc)*(1+p.piva)) as Dettotal from NoClientes as c inner join NoNotasCredito as nc on c.idcliente=nc.idcliente '+
             'inner join NoDetNotasCredito as dnc on dnc.idnc = nc.idnc and dnc.serie=nc.serie inner join articulos as a on a.cod_cve=dnc.cod_cve where nc.FechaNc '+
             'between "'+dfecha1+'" and "'+dfecha2+'" '+
             'order by idnc',0,dmreportes.sqlgeneral);

        end
    else
      begin                                                          //(1+p.piva)
      if application.MessageBox(pchar('Esta seguro de generar reporte Notas de Credito detallado historico del año '+ano+' del mes '+meses[strtoint(m1)]+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
        begin
        querys('INSERT INTO RepNotasCreditoDetallado select '+ClienteNombre('c')+' as Nombre, c.idcliente,'+
               'concat(nc.serie, nc.idnc) as idnc,nc.FechaNc,'+
               ' nc.idfactura,nc.subtotal,'+
               'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2,'+
               'if(nc.piva=0.15, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4,'+
               'nc.total,nc.observaciones,nc.usuario,if(dnc.piezas > 0,concat(dnc.piezas,"p"),dnc.cant) '+
               'as cant, dnc.cod_cve,(if(dnc.piezas > 0,dnc.costo/a.piezasxunidad,dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant)) as Detcosto, '+
               'if(nc.piva = 0.10, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva,'+
               'if(nc.piva = 0.11, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva2,'+
               'if(nc.piva = 0.15, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva3,'+
               'if(nc.piva = 0.16, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva4,'+
               '(if(dnc.piezas > 0,dnc.costo/a.piezasxunidad, dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant))+((if(dnc.piezas > 0, '+
               '(dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)* dnc.tc)*'+
               'nc.piva'+
               ') as Dettotal,"'+fecha+'" '+
               'from clientes as c inner join NotasCredito as nc on c.idcliente=nc.idcliente inner join DetNotasCredito as dnc on dnc.idnc = nc.idnc and dnc.serie=nc.serie '+
               'inner join articulos a on a.cod_cve=dnc.cod_cve where nc.FechaNc between "'+dfecha1+'" and "'+dfecha2+'" order by nc.idnc',1,dmreportes.sqlgeneral);
        //NO NOTAS DE CREDITO
        querys('INSERT INTO RepNotasCreditoDetallado select '+ClienteNombre('c')+' as Nombre, c.idcliente,'+
               'concat(nc.serie, nc.idnc) as idnc,nc.FechaNc,'+
               ' nc.idfactura,nc.subtotal,'+
               'if(nc.piva=0.10, nc.impuesto, 0) as impuesto, if(nc.piva=0.11, nc.impuesto, 0) as impuesto2,'+
               'if(nc.piva=0.11, nc.impuesto, 0) as impuesto3, if(nc.piva=0.16, nc.impuesto, 0) as impuesto4,'+
               'nc.total,nc.observaciones,nc.usuario,if(dnc.piezas > 0,concat(dnc.piezas,"p"),dnc.cant) '+
               'as cant, dnc.cod_cve,(if(dnc.piezas > 0,dnc.costo/a.piezasxunidad,dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant)) as Detcosto, '+
               'if(nc.piva = 0.10, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva,'+
               'if(nc.piva = 0.11, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva2,'+
               'if(nc.piva = 0.15, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva3,'+
               'if(nc.piva = 0.16, ((if(dnc.piezas > 0, (dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)*dnc.tc)*nc.piva), 0) as DetIva4,'+
               '(if(dnc.piezas > 0,dnc.costo/a.piezasxunidad, dnc.costo)*dnc.tc*(dnc.piezas+dnc.cant))+((if(dnc.piezas > 0, '+
               '(dnc.costo/a.piezasxunidad)*dnc.piezas,dnc.costo*dnc.cant)* dnc.tc)*'+
               'nc.piva'+
               ') as Dettotal,"'+fecha+'" '+
               'from NoClientes as c inner join NoNotasCredito as nc on c.idcliente=nc.idcliente and nc.idnocliente=c.idnocliente '+
               'inner join NoDetNotasCredito as dnc on dnc.idnc = nc.idnc and dnc.serie=nc.serie '+
               'inner join articulos a on a.cod_cve=dnc.cod_cve where nc.FechaNc between "'+dfecha1+'" and "'+dfecha2+'" order by nc.idnc',1,dmreportes.sqlgeneral);
        { }
        application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
        Screen.Cursor := crDefault;
        end;
      exit;
      end;
    Screen.Cursor := crDefault;
    frmmensaje.Close;
    OperacionReporte('NcDetallado','Reporte de notas de credito detallado',TipoImpresion, 1);
    end;
  end
else
  begin
  application.MessageBox('Debe de indicar el tipo de reporte que desea','aviso',mb_iconinformation);
  end;
end;

procedure RepVentasMensuales2(const nombre:string;sqlgeneral2,sqlgeneral3:TMyQuery);
var nom:string;
begin
nom:=nombre;

//primero sumamos para los dollares
    querys('SELECT count(Venta) as total FROM TemporalVentasMensuales'+frmprincipal.idmaq+' WHERE idunidad ='+quotedstr(nom),0,sqlgeneral2);

      if sqlgeneral2.FieldByName('total').asstring <> '' then begin
         sqlgeneral2.first;
         querys('UPDATE TemporalVentasMensuales3'+frmprincipal.idmaq+' SET Contador= '+quotedstr(sqlgeneral2.fieldbyname('total').AsString)+' WHERE ID='+quotedstr(nom),1,sqlgeneral3);

         //querys('SELECT sum(truncate((TotMat/TipoCambio),3)) as total FROM pedidos WHERE FechaCreacion BETWEEN '+quotedstr(dfecha1.Text)+' and '+quotedstr(dfecha2.Text)+'  and estatus in(3,4) and idUnidadNegocio ='+quotedstr(nom),0,sqlgeneral2);
         querys('SELECT sum(ImporteDll) as total FROM TemporalVentasMensuales'+frmprincipal.idmaq+' WHERE idunidad='+quotedstr(nom),0,sqlgeneral2);
                if sqlgeneral2.FieldByName('total').asstring <> '' then
                   querys('UPDATE TemporalVentasMensuales3'+frmprincipal.idmaq+' SET ImportesDlls= ImportesDlls+'+quotedstr(sqlgeneral2.fieldbyname('total').AsString)+' WHERE ID='+quotedstr(nom),1,sqlgeneral3);
      end;

//sumamos los anticipos ........

{
querys('SELECT p.FechaCreacion as FechaAlta,p.idpedido,sum(abono) as Anticipo,un.idUnidadNegocio as ID from PagosClientes as pc  LEFT JOIN TiposPagos as tp ON (tp.iniciales=pc.TipoPago) LEFT JOIN pedidos as p ON (p.idpedido=pc.idpedido) '+
       'LEFT JOIN UnidadNegocio as un ON(un.idUnidadNegocio=p.idUnidadNegocio) WHERE p.estatus in(3,4) and pc.FechaAlta BETWEEN  '+quotedstr(dfecha1.Text)+' and '+quotedstr(dfecha2.Text)+' and tp.nombre=''ANTICIPO'' and pc.movimiento in(0,2)'+
       'and un.idUnidadNegocio ='+quotedstr(nom)+' group by un.idUnidadNegocio',0,sqlgeneral2);

}
querys('SELECT sum(AnticipoMN) as Anticipo FROM TemporalVentasMensuales'+frmprincipal.idmaq+' WHERE idunidad='+quotedstr(nom),0,sqlgeneral2);
if sqlgeneral2.fieldbyname('Anticipo').asstring <> '' then
begin
      while not sqlgeneral2.eof do begin

            querys('UPDATE TemporalVentasMensuales3'+frmprincipal.idmaq+' SET AnticiposMN= '+quotedstr(sqlgeneral2.fieldbyname('Anticipo').AsString)+' WHERE ID='+quotedstr(nom),1,sqlgeneral3);
            sqlgeneral2.next;

      end;
end;


end;

procedure AuditoriaVentasMensuales(mes,ano,TipoImpresion:string);
begin
with dmreportes do
begin

     querys('SELECT t1.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM RepVentasMensuales as t1 join DatosEmpresa as de  WHERE Titulo = '+quotedstr(mes)+' and year='+quotedstr(ano),0,sqlgeneral);
     if sqlgeneral.FieldByName('Titulo').AsString <> '' then
      begin
           querys('SELECT * FROM RepVentasMensuales2 WHERE mes='+quotedstr(mes)+' and year='+quotedstr(ano),0,sqlgeneral2);
           querys('SELECT * FROM RepVentasMensuales3 WHERE mes ='+quotedstr(mes)+' and year='+quotedstr(ano)+' order by Codigo ',0,sqlgeneral3);
           querys('select count(c.idgiro) as num,g.nombre as giro, "G" as tipo ' +
             'from RepVentasMensuales t ' +
             'left join pedidos p on t.venta=p.idpedido ' +
             'left join clientes c on t.Cuenta=c.idcliente ' +
             'left join contratos con on con.TipoCont=c.TipoCont ' +
             'left join giros g on c.idgiro=g.idgiro ' +
             'left join UnidadNegocio u on u.idUnidadNegocio=p.idUnidadNegocio ' +
             'WHERE Titulo = '+quotedstr(mes)+' and year='+quotedstr(ano)+' '+
             'and u.CuentaNueva=1 and con.estatus=1 ' +
             'group by c.idgiro '+
             'UNION '+
             'select count(c.idcategoria) as num, cat.nombre, "C" as cat ' +
             'from RepVentasMensuales t ' +
             'left join pedidos p on t.venta=p.idpedido ' +
             'left join clientes c on t.Cuenta=c.idcliente ' +
             'left join contratos con on con.TipoCont=c.TipoCont ' +
             'left join categorias cat on c.idcategoria=cat.idcategoria ' +
             'left join UnidadNegocio u on u.idUnidadNegocio=p.idUnidadNegocio ' +
             'WHERE Titulo = '+quotedstr(mes)+' and year='+quotedstr(ano)+ ' '+
             'and u.CuentaNueva=1 and con.estatus=1 and cat.serviciocobrable=1 ' +
             'group by c.idgiro ',0,DMREPORTES.sqlgeneral4);
           OperacionReporte('VentasMensuales1','Reporte de ventas mensual',TipoImpresion, 1);
      end
      else
           application.MessageBox(pchar('No exiten datos , se necesita generar corte del mes:'+mes+' del año :'+ano+'!'),'Atención',MB_ICONINFORMATION);


end;

end;

procedure AuditoriaNotasCredito(periodo,TipoImpresion,tipoReporte:string);
begin
with dmreportes do
begin
     if(tipoReporte='SIMPLE') then
       begin
              querys('SELECT t1.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM RepNotasCreditoDetallado as t1 join DatosEmpresa as de  WHERE periodo = '+''''+periodo+''' ',0,sqlgeneral);
               if sqlgeneral.FieldByName('periodo').AsString <> '' then
                begin
                   OperacionReporte('NcDetallado','Reporte de notas de credito detallado',TipoImpresion, 1);
                end
                  else
                  application.MessageBox(pchar('No exiten datos , se necesita generar corte del '+periodo+'!'),'Atención',MB_ICONINFORMATION);

       end
         else
       begin

              querys('SELECT t1.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa,concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc FROM RepNotasCredito as t1 join DatosEmpresa as de  WHERE periodo = '+''''+periodo+''' ' ,0,sqlgeneral);
               if sqlgeneral.FieldByName('periodo').AsString <> '' then
                begin
                  OperacionReporte('NcNoDetallado','Reporte de Notas de credito no detallado',TipoImpresion, 1);
                end
                  else
                  application.MessageBox(pchar('No exiten datos , se necesita generar corte del '+periodo+'!'),'Atención',MB_ICONINFORMATION);

       end;

end;

end;

procedure RepVentasMensuales(sqlgeneral,sqlgeneral2,sqlgeneral3:TMyQuery;f1,f2,TipoImpresion,orden:string;Guardar:boolean);
  var f,m1,m2,d1,d2,ano,sub,RepFecha1,RepFecha2, piva:string;
begin
  piva := GetConfiguraciones('IVA', true);
  RepFecha1 := f1;
  RepFecha2 := f2;

  ano := formatdatetime('yyyy',strtodate(f1));  //el mes

  d1 := formatdatetime('d',strtodate(f1));
  d2 := formatdatetime('d',strtodate(f2));
  m1 := formatdatetime('m',strtodate(f1));
  m2 := formatdatetime('m',strtodate(f2));

  if guardar = false then
    f:='Del '+f1+ ' al '+f2
  else
    f := meses[strtoint(m1)];  //el mes

 if Guardar = true then
 begin
    querys('SELECT * FROM RepVentasMensuales where Titulo='+quotedstr(meses[strtoint(m1)])+' and year='+quotedstr(ano),0,sqlgeneral);
    if sqlgeneral.FieldByName('Titulo').AsString <> '' then
    begin
      application.MessageBox('Ya fue generado el corte del mes y año de este reporte !','Atención',MB_ICONINFORMATION);
      Exit;
    end;
 end;

  ///borrar tableas por si algo quedo....
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales'+frmprincipal.idmaq,1,sqlgeneral3);
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales2'+frmprincipal.idmaq,1,sqlgeneral3);
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales3'+frmprincipal.idmaq,1,sqlgeneral3);
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales4'+frmprincipal.idmaq,1,sqlgeneral3);

  //creamos las tablas temporales
  querys('CREATE TABLE TemporalVentasMensuales'+frmprincipal.idmaq+' (Titulo varchar(50) default NULL, '+
       'Fecha date NOT NULL default "0000-00-00", Venta int(11) NOT NULL default "0",  S char(1) NOT NULL default '''',  Vendedor char(3) default '''', Origen char(4) default NULL, '+
       'Cliente char(72) default NULL,Cuenta int(11) default NULL,Oport char(8) default NULL,AnticipoMN double default ''0'',ImporteDll double default null, piva decimal(10,2) default '+piva+', '+
       'ubicada varchar(25) default NULL,idunidad int(11) default ''0'', TotHrsCom decimal(10,2) default 0.00) ',1,sqlgeneral); //TYPE=MyISAM

  querys('Create Index Venta on TemporalVentasMensuales'+frmprincipal.idmaq+' (Venta)',1,sqlgeneral);
  //suma los anticipos de los pedidos remicionados o facturados en el rango de fechas

  querys('INSERT INTO TemporalVentasMensuales'+frmprincipal.idmaq+' (Titulo,Fecha,Venta,S,Vendedor,Origen,Cliente,Cuenta,Oport,'+
         'AnticipoMN,ImporteDll,ubicada,idunidad, TotHrsCom)  '+
         'SELECT  distinct '+quotedstr(f)+' as Titulo,p.FechaRemision as Fecha,p.idpedido as Venta, '+
         'if (p.estatus in( 4,6),''F'',''R'') as S,u.codigo as Vendedor,left(ori.nombre,4) as Origen,c.NombreCres as Cliente,'+
         'p.idcliente as Cuenta,if(clientes.tipocont<>"SEN",left(tp.nombre,7),concat(left(tp.nombre,4),"SEN")) as Oport, '+   //(if (tp.comisiones=1,tm.Anticipo,'''')*1) as AnticipoMN, '+
         '(SELECT round(sum(abono)/p.TipoCambio,2) as Anticipo from PagosClientes as pc  LEFT JOIN TiposPagos as tp ON (tp.iniciales=pc.TipoPago) WHERE  pc.idpedido = p.idpedido  and pc.movimiento in (0,2) and pc.TipoPago="AT"),'+
         'sum(if(tp.comisiones =1, if (dp.tc <> 1,cant*dp.costo,(cant*dp.costo)/p.TipoCambio),0)) as ToTDlls, if (NotaUbicacion is null or NotaUbicacion =  '''',''NO'','''') AS ubicada,p.idUnidadNegocio, p.TotHrsCom  FROM DetPedido as dp '+
         'LEFT JOIN pedidos as p ON(p.idpedido=dp.idpedido) LEFT JOIN clientes ON  (p.idcliente=clientes.idcliente) LEFT JOIN ClientesFact as c ON  (clientes.idfact=c.idfact)  LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) LEFT JOIN UnidadNegocio as tp On  '+
         '(tp.idUnidadNegocio=p.idUnidadNegocio) LEFT JOIN origen as ori ON (ori.idorigen=p.idorigen) LEFT JOIN articulos as a ON(a.cod_cve=dp.cod_cve)   '+
         //'left join RemiFact rf on rf.idpedido = p.idpedido and rf.idfactura = 0 '+         'WHERE  rf.FechaAlta BETWEEN '+quotedstr(RepFecha1)+' and '+quotedstr(RepFecha2)+
         ' WHERE  p.FechaRemision BETWEEN '+quotedstr(RepFecha1)+' and '+quotedstr(RepFecha2)+
         ' and p.estatus in(3,4) and tp.instalacion in(1) and a.idlinea = 4 '+
         ' AND tp.nombre not in ("GARANTIAS") '+ //'AND tp.nombre not in ("GARANTIAS","REUBICACION") '+
         'group by p.idpedido',1,sqlgeneral3);

//////notas de credito...........
//querys('select nc.idnc,p.idpedido as ped,nc.subtotal as sub,nc.TipoCambio as tc from NotasCredito as nc left join pedidos as p ON(p.idfactura=nc.idfactura) where FechaNc between '+quotedstr(dfecha1.Text)+' and '+quotedstr(dfecha2.Text)+'',0,sqlgeneral3);
//hacemos la busqueda por notas de credito realizadas ...... en el periodo para asi restarles al total de l venta correspondiente si esta en mismo mes......

   querys(' select distinct p.idpedido as ped,nc.TipoCambio,sum(if (tp.comisiones =1, if (dnc.cant > 0, (dnc.cant * dnc.costo),(dnc.piezas*dnc.costo)),0) )as SUMA,sum(if (tp.comisiones =1, if (dnc.cant > 0, ((dnc.cant * dnc.costo)*nc.TipoCambio)*'+          'nc.piva, '+
          '((dnc.piezas*dnc.costo)*nc.TipoCambio))*'+
          'nc.piva'+
          ',0) )as IVA, sum(if (tp.comisiones =1, if (dnc.cant > 0,if(dnc.tc=1,(dnc.cant * dnc.costo)/nc.TipoCambio,(dnc.cant * dnc.costo)),if(dnc.tc=1,(dnc.piezas*dnc.costo)/nc.TipoCambio,(dnc.piezas*dnc.costo))),0) ) '+
          '  as ToTDlls  from DetNotasCredito as dnc left join NotasCredito as nc ON(nc.idnc=dnc.idnc) LEFT JOIN  RemiFact as rf ON (rf.idfactura=nc.idfactura)  left join pedidos as p ON(p.idpedido=rf.idpedido) LEFT JOIN articulos as a ON(a.cod_cve=dnc.cod_cve)  '+
          ' LEFT JOIN UnidadNegocio as tp On (tp.idUnidadNegocio=p.idUnidadNegocio) LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) WHERE nc.FechaNc between '+quotedstr(RepFecha1)+' and '+quotedstr(RepFecha2)+' '+
          ' and tp.instalacion =1  and a.idlinea = 4 GROUP BY dnc.idpedido ',0,sqlgeneral3);

  while not sqlgeneral3.eof do
  begin
       sub:=Format('%8f',[sqlgeneral3.fieldbyname('TotDlls').AsFloat ]);
       querys('UPDATE TemporalVentasMensuales'+frmprincipal.idmaq+' set ImporteDll = ImporteDll - '+quotedstr(sub)+' where Venta='+quotedstr(sqlgeneral3.fieldbyname('ped').AsString),1,sqlgeneral2);
       sqlgeneral3.next;
  end;

  /////////////////////////////////
  if querys('SELECT * FROM TemporalVentasMensuales'+frmprincipal.idmaq+' ',0,sqlgeneral2)>0 then
  begin
    ///creamos la siguiente parte del reporte (acumulados anticipo mn y importe dlls)
    querys('DROP TABLE IF EXISTS TemporalVentasMensuales3'+frmprincipal.idmaq,1,sqlgeneral3);
    querys('CREATE TABLE TemporalVentasMensuales3'+frmprincipal.idmaq+' (NOMBRE char(72) default NULL, Contador int(11) NOT NULL default ''0'',ID  int(11) NOT NULL default ''0'', ImportesDlls double default ''0'',AnticiposMN double default null) ',1,sqlgeneral);  //TYPE=MyISAM
    querys('INSERT INTO TemporalVentasMensuales3'+frmprincipal.idmaq+' (NOMBRE,ID) SELECT nombre,idUnidadNegocio FROM UnidadNegocio WHERE nombre =''EQUIPO'' or nombre =''AMPLIACION'' or  nombre =''CAMBIO CONTROL'' or nombre =''ENLACES'' '+
           'or nombre =''REINSTALACION'' or nombre =''EQUIPO(2)'' or nombre =''CONEXION'' or  nombre =''BAJAS'' or  nombre =''RECONEXION'' '+
            'or nombre = "CCTV"',1,sqlgeneral);

      ///ya tenemos las oportunidadaes ahora tenemos que contarlas por ventas y sumar totales sin en dlls
    querys('Create Index ID on TemporalVentasMensuales3'+frmprincipal.idmaq+' (ID)',1,sqlgeneral);

    querys('SELECT * FROM TemporalVentasMensuales3'+frmprincipal.idmaq,0,sqlgeneral);
    sqlgeneral.First;
    while not sqlgeneral.Eof do
    begin
      RepVentasMensuales2(sqlgeneral.fieldbyname('ID').AsString,sqlgeneral2,sqlgeneral3);
      sqlgeneral.Next;
    end;
    sqlgeneral.First;
    //tercera parte del reporte dondee se muestra la matriz de vendedores con sus respectivas ventas ....
    querys('Create table TemporalVentasMensuales4'+frmprincipal.idmaq+' (Codigo char(3),Vendedor varchar (100),EQUIPO int(11) default 0,EQUIPOE int(11) default 0,RECONEXION int(11) default 0,'+
           ' CONEXION int(11) default 0,CONEXION2 int(11) default 0,ENLACES int(11) default 0,CUENTASNEW int(11) default 0,CUENTASXVENDE int(11) default 0,BAJAS int(11) default 0) ',1,sqlgeneral);

    querys(' SELECT  distinct concat(if (u.nombre is null,'' '',u.nombre),'' '', if (u.apaterno is null,'' '',u.apaterno),'' '', if (u.amaterno is null,'' '',u.amaterno)) as Vendedor,count(tp.nombre) as total,if(tp.nombre =''EQUIPO'',''EQUIPOE'',tp.nombre) as nom, '+
           ' con.estatus,u.codigo as code FROM pedidos as p  LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente)  LEFT JOIN contratos as con ON(con.TipoCont=c.TipoCont) LEFT JOIN UnidadNegocio as tp  '+
           ' On(tp.idUnidadNegocio=p.idUnidadNegocio) '+
        //  'left join RemiFact rf on rf.idpedido = p.idpedido and rf.idfactura = 0 '+         'WHERE  rf.FechaAlta BETWEEN '+quotedstr(RepFecha1)+' and '+quotedstr(RepFecha2)+
            'WHERE  p.FechaRemision between '+quotedstr(RepFecha1)+' and  '+quotedstr(RepFecha2)+
            ' and p.estatus in(3,4,6) and tp.instalacion =1 and tp.nombre in(''CONEXION'',''ENLACES'',''RECONEXION'',''EQUIPO'',''BAJAS'',''CONEXION2'') and con.estatus=1 group by u.codigo,tp.nombre order by total desc ',0,sqlgeneral);
    while not sqlgeneral.eof do
    begin
      querys('Select * from TemporalVentasMensuales4'+frmprincipal.idmaq+' where Codigo='+quotedstr(sqlgeneral.fieldbyname('code').AsString),0,sqlgeneral2);
      if sqlgeneral2.FieldByName('Codigo').AsString = '' then
         querys('INSERT into TemporalVentasMensuales4'+frmprincipal.idmaq+' (Codigo,Vendedor,'+sqlgeneral.fieldbyname('nom').AsString+') values('+quotedstr(sqlgeneral.fieldbyname('code').AsString)+','+quotedstr(sqlgeneral.fieldbyname('Vendedor').AsString)+','+quotedstr(sqlgeneral.fieldbyname('total').AsString)+') ',1,sqlgeneral2)
      else
           querys('Update TemporalVentasMensuales4'+frmprincipal.idmaq+' set '+sqlgeneral.fieldbyname('nom').AsString+'='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+' where Codigo='+quotedstr(sqlgeneral.fieldbyname('code').AsString),1,sqlgeneral2);
      sqlgeneral.Next;
    end;

    querys(' SELECT  distinct concat(if (u.nombre is null,'' '',u.nombre),'' '', if (u.apaterno is null,'' '',u.apaterno),'' '', if (u.amaterno is null,'' '',u.amaterno)) as Vendedor,count(tp.nombre) as total,tp.nombre as nom,con.estatus,u.codigo as code '+
           ' FROM pedidos as p  LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) LEFT JOIN clientes as c ON (c.idcliente=p.idcliente)  LEFT JOIN contratos as con ON(con.TipoCont=c.TipoCont) LEFT JOIN UnidadNegocio as tp On(tp.idUnidadNegocio=p.idUnidadNegocio) '+
          ' WHERE p.FechaRemision between '+quotedstr(RepFecha1)+' and  '+quotedstr(RepFecha2)+
          ' and p.estatus in(3,4,6) and tp.nombre in(''EQUIPO'')  group by u.codigo,tp.nombre order by total desc ',0,sqlgeneral);
    while not sqlgeneral.Eof do
    begin
      querys('Select * from TemporalVentasMensuales4'+frmprincipal.idmaq+' where Codigo='+
      quotedstr(sqlgeneral.fieldbyname('code').AsString),0,sqlgeneral2);
      if sqlgeneral2.FieldByName('Codigo').AsString = '' then
        querys('INSERT into TemporalVentasMensuales4'+frmprincipal.idmaq+' (Codigo,Vendedor,EQUIPO) values('+
        quotedstr(sqlgeneral.fieldbyname('code').AsString)+','+quotedstr(sqlgeneral.fieldbyname('Vendedor').AsString)+','+
        quotedstr(sqlgeneral.fieldbyname('total').AsString)+' ) ',1,sqlgeneral2)
      else
        querys('Update TemporalVentasMensuales4'+frmprincipal.idmaq+' set EQUIPO='+quotedstr(sqlgeneral.fieldbyname('total').AsString)+
        ' where Codigo='+quotedstr(sqlgeneral.fieldbyname('code').AsString),1,sqlgeneral2);
      sqlgeneral.Next;
    end;
    querys('Update TemporalVentasMensuales4'+frmprincipal.idmaq+' set CUENTASNEW =(EQUIPOE + RECONEXION + CONEXION + ENLACES+ CONEXION2),CUENTASXVENDE=(EQUIPOE + RECONEXION + CONEXION + ENLACES) ',1,sqlgeneral);
    /////generar reporte
    if Guardar = false then
    begin
        if orden = 'Vendedor' then
         orden := ' order by Vendedor,Cuenta';
        if orden = 'Origen' then
         orden := ' order by Origen,Cuenta';
        if orden='Oportunidad' then
         orden := 'order by Oport,Cuenta';
        if orden = 'Estatus' then
         orden := 'order by S,Cuenta';
        if (orden = 'Fecha/Venta')or(orden='') then
         orden := ' order by t1.fecha,t1.venta ';
      querys('SELECT t1.*,de.nombre as Empresa,concat(de.direccion,'' ,'',de.ciudad,'''' ,'''',de.estado) as DirEmpresa, '+
             'concat(''Tel : '',de.telefono,''           RFC :'',de.rfc ) as rfc '+
             'FROM TemporalVentasMensuales'+frmprincipal.idmaq+' as t1 '+
             'join DatosEmpresa as de '+orden,0,sqlgeneral);

      querys('SELECT * FROM TemporalVentasMensuales3'+frmprincipal.idmaq,0,sqlgeneral2);

      querys('SELECT tvm.codigo as Codigo,tvm.vendedor as Vendedor,tvm.equipo as EQUIPO,tvm.equipoe as EQUIPOE,'+
		       'tvm.reconexion as RECONEXION,tvm.conexion as CONEXION,tvm.conexion2 as CONEXION2,'+
		       'tvm.enlaces as ENLACES,tvm.cuentasnew as CUENTASNEW,tvm.cuentasxvende as CUENTASXVENDE,'+
		       'tvm.bajas as BAJAS,'+
		       'if((u.idpuesto = 1 and u.codigo <> "001"),1,if(u.idpuesto = 41,2,3)) as PUESTO '+
             'FROM TemporalVentasMensuales4'+frmprincipal.idmaq+' tvm, usuarios u '+
             'WHERE tvm.codigo = u.codigo '+
             'GROUP BY tvm.codigo '+
             'ORDER BY puesto, CUENTASNEW DESC, Vendedor',0,sqlgeneral3);

      querys('select count(c.idgiro) as num,g.nombre as giro, "G" as tipo ' +
             'from TemporalVentasMensuales'+frmprincipal.idmaq+' t ' +
             'left join pedidos p on t.venta=p.idpedido ' +
             'left join clientes c on t.Cuenta=c.idcliente ' +
             'left join contratos con on con.TipoCont=c.TipoCont ' +
             'left join giros g on c.idgiro=g.idgiro ' +
             'left join UnidadNegocio u on u.idUnidadNegocio=p.idUnidadNegocio ' +
             'where u.CuentaNueva=1 and con.estatus=1 ' +
             'group by c.idgiro '+
             'UNION '+
             'select count(c.idcategoria) as num, cat.nombre, "C" as cat ' +
             'from TemporalVentasMensuales'+frmprincipal.idmaq+' t ' +
             'left join pedidos p on t.venta=p.idpedido ' +
             'left join clientes c on t.Cuenta=c.idcliente ' +
             'left join contratos con on con.TipoCont=c.TipoCont ' +
             'left join categorias cat on c.idcategoria=cat.idcategoria ' +
             'left join UnidadNegocio u on u.idUnidadNegocio=p.idUnidadNegocio ' +
             'where u.CuentaNueva=1 and con.estatus=1 and cat.serviciocobrable=1 ' +
             'group by c.idgiro ',0,DMREPORTES.sqlgeneral4);
    end
    else
    begin
       if application.MessageBox(pchar('Esta seguro de generar reporte Ventas Mensuales historico del año '+ano+' del mes '+f+' ?, no podra hacer cambios posteriores!'),'Confirmación',MB_YESNO+MB_ICONWARNING) = idyes then
       begin

             querys('INSERT INTO RepVentasMensuales SELECT t.*,"'+ano+'",u.codigo,"'+datetostr(date)+'" FROM TemporalVentasMensuales'+frmprincipal.idmaq+' as t join usuarios as u on (u.idusuario='+inttostr(frmprincipal.ucprincipal.CurrentUser.UserID)+')',1,sqlgeneral);

             querys('INSERT INTO RepVentasMensuales2 SELECT *,'+quotedstr(f)+',"'+ano+'" FROM TemporalVentasMensuales3'+frmprincipal.idmaq,1,sqlgeneral2);

             querys('INSERT INTO RepVentasMensuales3 SELECT *,'+quotedstr(f)+',"'+ano+'" FROM TemporalVentasMensuales4'+frmprincipal.idmaq,1,sqlgeneral2);
             application.MessageBox('Generado con exito!','Información',MB_ICONINFORMATION);
             exit;
       end;
    end;
    Screen.Cursor := crDefault;
    CerrarVentanaMensaje;
    if Guardar = false then
      OperacionReporte('VentasMensuales1','Reporte de ventas mensual',TipoImpresion, 1);
  end
  else
  begin
      Screen.Cursor := crDefault;
      CerrarVentanaMensaje;
      application.MessageBox('No hay datos a mostrar','Atención',mb_IconInformation);
  end;
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales'+frmprincipal.idmaq,1,sqlgeneral3);
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales2'+frmprincipal.idmaq,1,sqlgeneral3);
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales3'+frmprincipal.idmaq,1,sqlgeneral3);
  querys('DROP TABLE IF EXISTS TemporalVentasMensuales4'+frmprincipal.idmaq,1,sqlgeneral3);

//end;//with
end;


procedure BuscaPendientesCliente(Msg,NoMsg,consulta:string;Etiqueta:trzlabel);
var cadena:string;
sqlgeneral:tmyquery;
begin
sqlgeneral := tmyquery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
   Etiqueta.Caption := Msg;
   querys(consulta,0,sqlgeneral);
    if sqlgeneral.RecordCount > 0 then
     begin
      while not sqlgeneral.Eof do
       begin
        Etiqueta.Caption := Etiqueta.Caption + sqlgeneral.fieldbyname('id').AsString+',';
        sqlgeneral.Next;
       end;
       cadena:=Etiqueta.caption;
       delete(cadena,length(cadena),1);
       Etiqueta.caption := cadena;
     end
    else
     Etiqueta.Caption := NoMsg;
sqlgeneral.Free;
end;

function CodigoUsuario(valor:integer):string;
var sql:TmyQuery;
begin
sql := TMyQuery.Create(nil);
sql.Connection := DMAccesos.conexion;
   querys('Select codigo from usuarios where idusuario  = '+inttostr(valor),0,sql);
   result := sql.fieldbyname('codigo').AsString;
end;

function GeneraBoletas(idcliente,idpedido:integer;fechavence,costo:string):string;
var CodBarras,CodBBVA,CodBanorte,CodBanamex,Banco, referencia:string; //temp, HoraActual,FechaActual,  cvecte,cvevta,
fecha : tdate;
sqlgeneral:tmyquery;
//j : integer;
begin
  sqlgeneral := tmyquery.Create(nil);
  sqlgeneral.Connection := dmaccesos.conexion;


  querys('select CtaBanco from DatosEmpresa',0,sqlgeneral);
  banco := sqlgeneral.fieldbyname('CtaBanco').asstring;


  costo:=  inttostr(round(strtofloat(costo)*(1+getIVA)));       //Format('%8.2f',[strtofloat(costo)*(1+getIVA)]);
  fecha:=strtodate(fechavence);
  {HoraActual := timetostr(HoraServidor);
  FechaActual := datetostr(FechaServidor);}
    //para el codigo de barras de las boletas se saca cuenta + idpedido +  cargo + relleno para que sean 10 caracteres
  referencia := ReferenciaBanco(inttostr(idcliente), inttostr(idpedido));
  CodBarras := CodBarrasOxxo(inttostr(idcliente), inttostr(idpedido), costo, fechavence);
  CodBBVA := CodBarrasBBVA(inttostr(idcliente), inttostr(idpedido), costo, fechavence);
  CodBanorte := CodBarrasBanorte(inttostr(idcliente), inttostr(idpedido), costo, fechavence);
  CodBanamex := CodBarrasBanamex(inttostr(idcliente), inttostr(idpedido), costo, fechavence);

  result:= 'insert into boletas(idcliente,idpedido,FechaAlta,cargo,FechaVence,usuario,fecha,hora,'+
           'frecuencia,fechaLarga,CodBarras,CodBanco,CodBBVA,codBanorte,codBanamex,tipo) values '+
           '('+inttostr(idcliente)+','+inttostr(idpedido)+',"'+datetostr(date)+'",'+ costo +',"'+
           fechavence+'","'+frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+
           '","'+timetostr(time)+'","M", "'+meses[monthof(fecha)]+' '+inttostr(dayof(fecha))+' de '+
           inttostr(yearof(fecha))+'", "'+CodBarras+'","'+Referencia+'","'+CodBBVA+'","'+CodBanorte+'","'+CodBanamex+'","M")';

  //sqlgeneral.Free;
  sqlgeneral.FreeInstance;
end;

function GeneraBoletasAnuales(idcliente:integer;fecha:string):string;
var c,cliente1,dias,year,acum:integer;
   pedido,idvendedor,fechacreacion,fechavence,origen,mes,endolaresstring,monito,temp:string;
   tipocambio,endolares,costo,costo12,costoAnual:double;
   fechatemp:TDateTime;
   i,contador : integer; ban:boolean;
   sqlgeneral:tmyquery;
begin

  sqlgeneral := tmyquery.Create(nil);
  sqlgeneral.Connection := dmaccesos.conexion;

  //traer el tipo de cambio...
  querys('select valor from configuraciones where concepto='+quotedstr('TipoCambio'),0,sqlgeneral);
  tipocambio:=strtofloat(Format('%8.2f',[sqlgeneral.Fields.Fields[0].asfloat]));

  querys('select idUnidadNegocio from UnidadNegocio where nombre=''MONITOREO'' ',0,sqlgeneral);
  monito:=sqlgeneral.Fields.Fields[0].asstring;

  fechatemp:= strtodate(fecha);
  acum := 0;
  querys('SELECT g.CostoAnual as costo,if(c.idvendedor = 0,1,c.idvendedor) as id,if(c.idorigen=0,99,c.idorigen) as origen FROM clientes as c RIGHT JOIN categorias AS g ON (c.idcategoria=g.idcategoria) WHERE idcliente='+inttostr(idcliente),0,sqlgeneral);
  costo:= strtofloat(Format('%8.2f',[sqlgeneral.fieldbyname('costo').Asfloat]));
  costoAnual:= costo;
  idvendedor:= sqlgeneral.fieldbyname('id').AsString;
  origen:= sqlgeneral.fieldbyname('origen').AsString;

  //buscar el ultimo pedido para almacenar en variable y hacer consulta de boletas con ella y el utimo pedido....
  querys('select max(idpedido) from pedidos',0,sqlgeneral);
  pedido:= inttostr(sqlgeneral.Fields.Fields[0].Asinteger+1);
  for c:=1 to 12 do
  begin  //meses
     year := yearof(fechatemp);
     dias := DaysInMonth(fechatemp);
     fechacreacion := inttostr(year)+'/'+inttostr(c)+'/01';
     fechavence := inttostr(year)+'/'+inttostr(c)+'/'+inttostr(dias);

     //valida si no tiene ya una anualidad en el año
     querys('select idpedido from pedidos where idcliente='+inttostr(idcliente)+' and Anualidad ='+inttostr(year),0,sqlgeneral);
     if sqlgeneral.RecordCount > 0 then
     begin
        acum:=-1;
        break;
     end;

     //query que verifica si el cliente actual tiene un pedido de monitoreo Anual en el rango
     //de fechas del primero al ultimo de la boleta que se esta genrando
     querys('SELECT p.idcliente AS cli FROM pedidos as p  LEFT JOIN UnidadNegocio as i ON (i.idUnidadNegocio=p.idUnidadNegocio) '+
            ' WHERE p.estatus=0 and  p.idcliente='+inttostr(idcliente)+'  and p.FechaCreacion between '+
            quotedstr(fechacreacion)+' and '+quotedstr(fechavence)+' and i.nombre=''MONITOREO'' and anualidad>0',0,sqlgeneral);
     if sqlgeneral.FieldByName('cli').AsString = '' then
     begin
        querys('select idcliente as cli from bonificaciones where NumMes='+inttostr(c)+' and ano='+inttostr(year)+' and idcliente='+inttostr(idcliente),0,sqlgeneral);
        if sqlgeneral.FieldByName('cli').AsString = '' then
           inc(acum);
     end;
  end; //for c
  if (acum <> 0) and (acum <> -1) then
  begin
     fechavence := fechavence;
     costo := strtofloat(Format('%8.2f',[(costo/12)*acum]));
     endolares := strtofloat(Format('%8.2f',[costo / tipocambio]));
     endolaresstring:=Format('%8.2f',[endolares]);

     //validar que no se repita el idpedido
     contador:=0;
     ban:=false;
     repeat
        try
           inc(contador);
           if contador>=3 then
              ban:=true;
           if contador>1 then
              pedido:=inttostr(strtoint(pedido)+1);
           sqlgeneral.Close;
           sqlgeneral.SQL.Clear;

           //sacar las fechas de creacion y vencimietno
           year := yearof(fechatemp);
           dias := DaysInMonth(fechatemp);
           fechacreacion := fecha;
           fechavence := inttostr(year)+'/'+inttostr(monthof(fechatemp))+'/'+inttostr(dias);
           //el mismo de arribe pero con format de 2
           sqlgeneral.SQL.Add('INSERT INTO pedidos (idpedido,idcliente,usuario,fecha,hora,idorigen,idvendedor,FechaCreacion,'+
           'SubTotal,Iva,TotMn,Saldo,concepto,FechaVencimiento,idUnidadNegocio,FormaPago,TipoCambio,Anualidad) '+
           'values( '+quotedstr(pedido)+','+inttostr(idcliente)+','+quotedstr(frmprincipal.ucprincipal.CurrentUser.Username)+
           ',"'+datetostr(date)+'","'+timetostr(time)+'",'+quotedstr(origen)+','+quotedstr(idvendedor)+','+
           quotedstr(fechacreacion)+','+quotedstr(Format('%8.2f',[costo]))+',('+
           quotedstr(Format('%8.2f',[costo*(getIVA)]))+'),('+quotedstr(Format('%8.2f',[costo*(1+getIVA)]))+'),0, '+
           quotedstr('MONITOREO ANUAL '+inttostr(yearof(strtodate(fechavence))))+ ','+quotedstr(fechavence)+','+
           quotedstr(monito)+',''CA'','+Format('%8.2f',[tipocambio])+','+inttostr(year)+')');
           sqlgeneral.Execute;
           if sqlgeneral.RowsAffected>0 then
              ban:=true;
        except
        end;
     until ban;
      //#boletas 2009
     costo:=strtofloat(Format('%8.2f',[costo/12]));
     if contador<3 then
     begin
        for i:=1 to 12 do
        begin
           if i>9 then
              mes:=inttostr(i)+rightstr(inttostr(year),2)
           else
              mes:='0'+inttostr(i)+rightstr(inttostr(year),2);
           //para corregir el error de centavos se le agrega la diferencia al ultimo articulo
           if i=12 then
           begin
              costo12:= strtofloat(Format('%8.2f',[costo+(costoAnual-(costo*12))]));
              querys('INSERT INTO DetPedido(idpedido,cant,cod_cve,surtido,costo,tc,utilidad) values('+
              quotedstr(pedido)+',1,"MON'+mes+'",1,'+Format('%8.2f',[costo12])+',1,''A'')',1,sqlgeneral);
           end
           else
              querys('INSERT INTO DetPedido(idpedido,cant,cod_cve,surtido,costo,tc,utilidad) values('+
              quotedstr(pedido)+',1,"MON'+mes+'",1,'+Format('%8.2f',[costo])+',1,''A'')',1,sqlgeneral);
        end;
        //inicia proceso de generacion de boletas
        //para el codigo de barras de las boletas se saca cuenta + idpedido +  cargo + relleno para que sean 10 caracteres
        querys(GeneraBoletas(idcliente,strtoint(pedido),fechavence,Format('%8.2f',[costoAnual])),1,sqlgeneral);
        dias := DaysInMonth(IncMonth(fechatemp));
        fechavence := inttostr(year)+'/'+inttostr(monthof(IncMonth(fechatemp)))+'/'+inttostr(dias);
        querys(GeneraBoletas(idcliente,strtoint(pedido),fechavence,Format('%8.2f',[costoAnual])),1,sqlgeneral);
     end;
  end;
end;


function CodBarrasOxxo(idcliente, idpedido, saldo, fechavence:string):string;
var CodBarras, Temp:string; //j:integer;
begin
CodBarras :=  getconfiguraciones('PrefijoOxxo', true) + RightStr(idpedido, 6);
Temp := format('%8.2f',[strtofloat(saldo)]);
temp := trim(AnsiReplaceStr(temp,'.', ''));
temp := StuffString('000000', 7-length(temp), 6, temp);
CodBarras := CodBarras + Temp + RightStr(AnsiReplaceStr(fechavence, '/', ''), 6);
Result := CodBarras + CalNumVerificador21(CodBarras);
end;

function CodBarrasBBVA(idcliente, idpedido, saldo, fechavence:string):string;
var CodBarras, Temp:string; //j:integer;
begin
CodBarras :=  RightStr(idpedido, 6);
Temp := format('%8.2f',[strtofloat(saldo)]);
temp := trim(AnsiReplaceStr(temp,'.', ''));
temp := StuffString('000000', 7-length(temp), 6, temp);
CodBarras := CodBarras + Temp + RightStr(AnsiReplaceStr(fechavence, '/', ''), 6);
Result := 'BBVA '+ CodBarras + CalNumVerificador21(CodBarras);
end;

function CodBarrasBanorte(idcliente, idpedido, saldo, fechavence:string):string;
var fecha, CodBarras, Temp:string;
fecha_condensada, importe_condesnado, j, ban, dig:integer;
begin

//FECHA CONDENSADA
fecha := AnsiReplaceStr(fechavence, '/', '');
//al año se le resta 1988 y despues se multiplica por 372
//al mes se le resta la unidad y se multiplica por 31
//al dia se le resta la unidad
//se suman todos
//showmessage('A'+LeftStr(fecha, 4)+' M'+MidStr(fecha,5,2)+' D'+RightStr(fecha, 2));
fecha_condensada := ((strtoint(LeftStr(fecha, 4)) - 1988) * 372 ) +
                    ((strtoint(MidStr(fecha,5,2)) - 1) * 31 ) +
                    ((strtoint(RightStr(fecha, 2)) - 1));

//IMPORTE CONDENSADO
Temp := format('%8.2f',[strtofloat(saldo)]);
temp := trim(AnsiReplaceStr(temp,'.', ''));
temp := StuffString('00000000', 9-length(temp), 8, temp);
//De derecha a izquierda multiplicar los digitos por los numeros 7, 3 y 1.
//Se saca el residuo sobre 10
ban := 0;
dig := 0;
for j := 8 downto 1 do
  begin
  if ban = 0 then
    begin
    dig := dig + (strtoint(temp[j]) * 7);
    ban := 1;
    end
  else
    if ban = 1 then
      begin
      dig := dig + (strtoint(temp[j]) * 3);
      ban := 2;
      end
    else
      if ban = 2 then
        begin
        dig := dig + (strtoint(temp[j]) * 1);
        ban := 0;
        end;
  end;

importe_condesnado := dig mod 10;
if length(idpedido) < 6 then
  idpedido := StuffString('000000', 7-length(idpedido), 6, idpedido);

CodBarras :=  RightStr(idpedido, 6) + StuffString('0000', 5-length(idcliente), 4, idcliente) +
              inttostr(fecha_condensada) + inttostr(importe_condesnado) + '2';

//digito verificador
//A los digitos de la referencia se le multiplica por los ponderadores 11, 13, 17, 19, y 23
//de derecha a izquierda iniciando con 1
//se suman los resultados de las multiplicaciones
//el resultado se divide entre 97
//al remanente se le suma la unidad (1)
dig := 0;
ban := 0;
for j := 16 downto 1 do
  begin
  if ban = 0 then
    begin
    dig := dig + (strtoint(CodBarras[j]) * 11);
    ban := 1;
    end
  else
    if ban = 1 then
      begin
      dig := dig + (strtoint(CodBarras[j]) * 13);
      ban := 2;
      end
    else
      if ban = 2 then
        begin
        dig := dig + (strtoint(CodBarras[j]) * 17);
        ban := 3;
        end
      else
        if ban = 3 then
          begin
          dig := dig + (strtoint(CodBarras[j]) * 19);
          ban := 4;
          end
        else
          if ban = 4 then
            begin
            dig := dig + (strtoint(CodBarras[j]) * 23);
            ban := 0;
            end;
  end;

dig := (dig mod 97) + 1 ;

Result := 'BANORTE '+ CodBarras + inttostr(dig);
end;

function CodBarrasBanamex(idcliente, idpedido, saldo, fechavence:string):string;
var fecha, CodBarras, Temp:string;
fecha_condensada, importe_condesnado, j, ban, dig:integer;
begin

  //FECHA CONDENSADA
  fecha := AnsiReplaceStr(fechavence, '/', '');
  //al año se le resta 1988 y despues se multiplica por 372
  //al mes se le resta la unidad y se multiplica por 31
  //al dia se le resta la unidad
  //se suman todos
  //showmessage('A'+LeftStr(fecha, 4)+' M'+MidStr(fecha,5,2)+' D'+RightStr(fecha, 2));
  fecha_condensada := ((strtoint(LeftStr(fecha, 4)) - 1988) * 372 ) +
                      ((strtoint(MidStr(fecha,5,2)) - 1) * 31 ) +
                      ((strtoint(RightStr(fecha, 2)) - 1));

  //IMPORTE CONDENSADO
  Temp := format('%8.2f',[strtofloat(saldo)]);
  temp := trim(AnsiReplaceStr(temp,'.', ''));
  temp := StuffString('00000000', 9-length(temp), 8, temp);
  //De derecha a izquierda multiplicar los digitos por los numeros 7, 3 y 1.
  //Se saca el residuo sobre 10
  ban := 0;
  dig := 0;
  for j := 8 downto 1 do
  begin
    if ban = 0 then
    begin
      dig := dig + (strtoint(temp[j]) * 7);
      ban := 1;
    end
    else
      if ban = 1 then
      begin
        dig := dig + (strtoint(temp[j]) * 3);
        ban := 2;
      end
      else
        if ban = 2 then
        begin
          dig := dig + (strtoint(temp[j]) * 1);
          ban := 0;
        end;
  end;

  importe_condesnado := dig mod 10;
  if length(idpedido) < 8 then
    idpedido := StuffString('00000000', 9-length(idpedido), 8, idpedido);

  CodBarras :=  GetConfiguraciones('BanamexESTP') + StuffString('0000', 7-length(idcliente), 6, idcliente) + RightStr(idpedido, 8) +
                inttostr(fecha_condensada) + inttostr(importe_condesnado) + '2';

  //digito verificador
  //A los digitos de la referencia se le multiplica por los ponderadores 11, 13, 17, 19, y 23
  //de derecha a izquierda iniciando con 1
  //se suman los resultados de las multiplicaciones
  //el resultado se divide entre 97
  //al remanente se le suma la unidad (1)
  dig := 0;
  ban := 0;
  for j := 26 downto 1 do
  begin
    if ban = 0 then
    begin
      dig := dig + (strtoint(CodBarras[j]) * 11);
      ban := 1;
    end
    else
      if ban = 1 then
      begin
        dig := dig + (strtoint(CodBarras[j]) * 13);
        ban := 2;
      end
      else
        if ban = 2 then
        begin
          dig := dig + (strtoint(CodBarras[j]) * 17);
          ban := 3;
        end
        else
          if ban = 3 then
          begin
            dig := dig + (strtoint(CodBarras[j]) * 19);
            ban := 4;
          end
          else
            if ban = 4 then
            begin
              dig := dig + (strtoint(CodBarras[j]) * 23);
              ban := 0;
            end;
  end;

  dig := (dig mod 97) + 1 ;

  if dig < 10 then
    Result := 'BANAMEX '+ CodBarras + '0' + inttostr(dig)
  else
    Result := 'BANAMEX '+ CodBarras + inttostr(dig);
end;

function ReferenciaBanco(idcliente, idpedido:string):string;
var
  Banco, ss, cc: string; i,c,b:integer;  //ss2,
begin
  querys('select CtaBanco from DatosEmpresa',0,dmreportes.sqlgeneral);
  Banco := dmreportes.sqlgeneral.fieldbyname('CtaBanco').AsString + ' ' ;
  c := strtoint(GetConfiguraciones('DigitosCuentaBancos', true));
  b := strtoint(GetConfiguraciones('DigitosVentaBancos', true));

  // digitos para mascara bancos
  if GetConfiguraciones('ciudad', true) = 'CULIACAN' then
    ss := '1'
  else
    ss := '0';

  for i:= 1 to (b-1) do
    ss := ss + '0';

  // digitos para mascara cuenta
  cc := '1';
  for i:= 1 to (c-1) do
    cc := cc + '0';

  {// digitos para mascara bancos final
  if GetConfiguraciones('ciudad', true) = 'CULIACAN' then
    ss2 := '1'
  else
    ss2 := '0';
  for i:= 1 to (b-1) do
      ss2 := ss2 + '0';}


  if length(idpedido) > b then
    delete(idpedido,1,length(idpedido)-b);


  //idcliente := idcliente  + CalNumVerificador( StuffString('100000',((c+1) - length(idcliente)),length(idcliente),idcliente), true );
  idcliente := idcliente  + CalNumVerificador( StuffString(cc,((c+1) - length(idcliente)),length(idcliente),idcliente), true );
  idpedido := idpedido  + CalNumVerificador(StuffString(ss,((b+1) - length(idpedido)),length(idpedido),idpedido), false);
  result := Banco + ' ' + StuffString(cc+'0',((c+2) - length(idcliente)),length(idcliente),idcliente) + ' ' + StuffString(ss+'0',((b+2) - length(idpedido)),length(idpedido),idpedido);
  //result := Banco + ' ' + StuffString(cc+'0',((c+2) - length(idcliente)),length(idcliente),idcliente) + ' ' + StuffString(ss2+'0',((b+2) - length(idpedido)),length(idpedido),idpedido);

end;


function CargaGrupo(sql,error:string;radio:trzradiogroup;check:trzcheckgroup;sqlgeneral:tmyquery):integer;
begin
if check <> nil then
 check.Items.Clear;
if radio <> nil then
 radio.Items.Clear;

querys(sql,0,sqlgeneral);
sqlgeneral.First;
if sqlgeneral.RecordCount = 0 then
 begin
   application.MessageBox(pchar('No hay '+error+' registrados en el sistema!'),'Aviso',mb_iconwarning);
   result := 0;
 end
else
  begin
    sqlgeneral.First;
    while not sqlgeneral.Eof do
       begin
          if check <> nil then
           check.Items.Add(sqlgeneral.Fieldbyname('Nombre').AsString);
          if radio <> nil then
           radio.Items.Add(sqlgeneral.Fieldbyname('Nombre').AsString);
          sqlgeneral.Next;
       end;
    result := 1;
  end;
end;

function GetUserWindows : String;
var
   pcUser   : PChar;
   dwUSize : DWORD;
begin
   dwUSize := 21;
   GetMem( pcUser, dwUSize );
   try
      if Windows.GetUserName( pcUser, dwUSize ) then
         Result := pcUser
   finally
      FreeMem( pcUser );
   end;
end;


function DiasMes(m:string):integer;
var ano,mes,dia:word;
begin
result :=0;
     case strtoint(m) of
      1: result:=31 ;
      2: begin
         decodedate(now,ano,mes,dia);
         if IsLeapYear(ano) then
             result := 29
         else
             result := 28;
         end;
      3: result:=31 ;
      4: result:=30 ;
      5: result:=31 ;
      6: result:=30 ;
      7: result:=31 ;
      8: result:=31 ;
      9: result:=30 ;
      10: result:=31 ;
      11: result:=30 ;
      12: result:=31

     end;


end;





procedure DatosEmail(Sqlgeneral:TMyQuery);
begin   
querys('Select concepto,valor from configuraciones where concepto in("SmtpServerUser", "SmtpServerPassword", "SmtpServerName", "SmtpServerPort", "SmptServerNameInterno") ',0,sqlgeneral);
while not sqlgeneral.Eof do
begin
if sqlgeneral.FieldByName('concepto').AsString = 'SmtpServerUser' then
   SmtpServerUser := sqlgeneral.FieldByName('valor').AsString
else
if sqlgeneral.FieldByName('concepto').AsString = 'SmtpServerPassword' then
   SmtpServerPassword := sqlgeneral.FieldByName('valor').AsString
else
if sqlgeneral.FieldByName('concepto').AsString = 'SmtpServerName' then
   SmtpServerName := sqlgeneral.FieldByName('valor').AsString
else
if sqlgeneral.FieldByName('concepto').AsString = 'SmtpServerPort' then
   SmtpServerPort := sqlgeneral.FieldByName('valor').AsInteger
else
if sqlgeneral.FieldByName('concepto').AsString = 'SmptServerNameInterno' then
   SmptServerNameInterno := sqlgeneral.FieldByName('valor').AsString;

sqlgeneral.Next;
end;
end;

procedure TotalAlarmas(const tipo,operacion:string;cantidad:variant;query:TMyQuery);
var turno,Tnombre:string;
begin
//querys('Select if ("'+timetostr(time)+'" between  ''06:00:00 am'' AND ''13:59:59 pm'',1,if ("'+timetostr(time)+'" between  ''02:00:00 pm'' AND ''21:59:59 pm'',2,if ("'+timetostr(time)+'"  between ''22:00:00 pm'' and  ''23:59:59'',4,3))) as turno ',0,query);
querys('select idturno from turnos where "'+timetostr(time)+'" BETWEEN HoraInicio AND HoraFin UNION '+
       'select idturno from turnos where (("'+timetostr(time)+'" > HoraInicio and "'+timetostr(time)+'"  <= "23:59:59") '+
       'or ("'+timetostr(time)+'" < HoraFin)) and idturno = 3', 0, query);
turno := query.fieldbyname('idturno').asstring;

//buscamos si existe ese registro......
if turno = '1' then
Tnombre := 'DIU'
else
if turno = '2' then
Tnombre := 'VES'
else
if ((turno = '3') or (turno ='4')) then
Tnombre := 'NOC';

//Modificado para no duplicar el nocturno
if (turno = '1') or (turno = '2') then
    querys('Select dia from TotalAlarmas where fecha ="'+datetostr(date)+'" and turno ='+quotedstr(turno),0,query)
else
  querys('Select dia from TotalAlarmas where fecha ="'+datetostr(date)+'" and turno in(3,4)',0,query);

   //insertar dia
if query.FieldByName('dia').AsString = '' then
   querys('Insert into TotalAlarmas (fecha,turno,dia,NombreTurno) values ("'+datetostr(date)+'",'+quotedstr(turno)+',dayofmonth("'+datetostr(date)+'"),'+quotedstr(Tnombre)+' ) ',1,query);

if (turno = '1') or (turno = '2') then
  begin
  querys('Update TotalAlarmas set '+tipo+' = '+tipo+' '+operacion+' '+vartostr(cantidad)+' where fecha = "'+datetostr(date)+'" and turno='+quotedstr(turno)+' and dia = dayofmonth("'+datetostr(date)+'") ',1,query);
  querys('Update TotalAlarmas set PromDiario = truncate((MinResp/asist),2), porcento=truncate((retardos/asist)*100,2) where fecha = "'+datetostr(date)+'" and turno='+quotedstr(turno)+' and dia= dayofmonth("'+datetostr(date)+'") ',1,query);
  end
else
  begin
  querys('Update TotalAlarmas set '+tipo+' = '+tipo+' '+operacion+' '+vartostr(cantidad)+' where fecha = "'+datetostr(date)+'" and turno=3 and dia = dayofmonth("'+datetostr(date)+'") ',1,query);
  querys('Update TotalAlarmas set PromDiario = truncate((MinResp/asist),2), porcento=truncate((retardos/asist)*100,2) where fecha = "'+datetostr(date)+'" and turno='+quotedstr(turno)+' and dia= dayofmonth("'+datetostr(date)+'") ',1,query);
  end;
end;


procedure CargaCombo(sql,tabla:string;combo : TRzComboBox);
var sqlgral:tmyquery;
begin
sqlgral := tmyquery.Create(nil);
sqlgral.Connection := dmaccesos.conexion;
combo.Items.Clear;
//carga los vendedores
querys(sql,0,sqlgral);
    sqlgral.First;
    while not sqlgral.Eof do
       begin
          combo.Items.Add(sqlgral.Fieldbyname('Nombre').AsString);
          sqlgral.Next;
       end;
  sqlgral.Free;
end;



procedure CargaComboConItem(sql, campo, valor,item:string;combo : TRzComboBox);
var sqlgral:tmyquery;
begin
sqlgral := tmyquery.Create(nil);
sqlgral.Connection := dmaccesos.conexion;
combo.Items.Clear;

querys(sql,0,sqlgral);
if sqlgral.RecordCount = 0 then
   application.MessageBox(pchar('No se encontraron registros o no existe la tabla en el sistema!'),'Aviso',mb_iconwarning)
else
  begin
    combo.Items.Add(item);
    combo.Values.Add('');
    sqlgral.First;
    while not sqlgral.Eof do
       begin
       combo.Items.Add(sqlgral.Fieldbyname(campo).AsString);
       combo.Values.Add(sqlgral.Fieldbyname(valor).AsString);
       sqlgral.Next;
       end;
  end;
sqlgral.Free;
end;


procedure CargaCombo2(sql, campo, valor:string;combo : TRzComboBox);overload;
var sqlgral:tmyquery;
begin
sqlgral := tmyquery.Create(nil);
sqlgral.Connection := dmaccesos.conexion;
combo.Items.Clear;
querys(sql,0,sqlgral);
if sqlgral.RecordCount > 0 then
  begin
    sqlgral.First;
    while not sqlgral.Eof do
       begin
       combo.Items.Add(sqlgral.Fieldbyname(campo).AsString);
       combo.Values.Add(sqlgral.Fieldbyname(valor).AsString);
       sqlgral.Next;
       end;
  end;
sqlgral.Free;
end;

procedure CargaCombo2(sql, campo, valor:string;combo : TRzDBComboBox); overload;
var sqlgral:tmyquery;
begin
sqlgral := tmyquery.Create(nil);
sqlgral.Connection := dmaccesos.conexion;
combo.Items.Clear;
querys(sql,0,sqlgral);
if sqlgral.RecordCount > 0 then
   application.MessageBox(pchar('No se encontraron registros o no existe la tabla en el sistema!'),'Aviso',mb_iconwarning)
else
  begin
    sqlgral.First;
    while not sqlgral.Eof do
       begin
       combo.Items.Add(sqlgral.Fieldbyname(campo).AsString);
       combo.Values.Add(sqlgral.Fieldbyname(valor).AsString);
       sqlgral.Next;
       end;
  end;
sqlgral.Free;
end;

function VerificarMarcacion(idmaq:string;conexion:TMyConnection):integer;
var SqlGeneral:TMyQuery;
begin
SqlGeneral := TMyQuery.Create(nil);
SqlGeneral.Connection := dmaccesos.conexion;

querys('Select com1,com2,TipoLinea From maquinas Where idmaq ='+idmaq,0,SqlGeneral);
if SqlGeneral.FieldByName('com1').AsString <> '' then
  begin
         tapis := Tnrcommtapi.Create(nil);
         tapis2 := Tnrcommtapi.Create(nil);

         cboTelNormal := TnrDeviceBox.Create(nil);
         cboTelCel := TnrDeviceBox.Create(nil);

         cboTelNormal.Parent := frmprincipal;
         cboTelCel.Parent := frmprincipal;
         cboTelCel.Visible := false;
         cboTelNormal.Visible := false;

         cboTelNormal.nrComm := tapis;
         cboTelCel.nrComm := tapis2;

         cboTelCel.Visible := false;
         cboTelNormal.Visible := false;
         cboTelNormal.ItemIndex := cboTelNormal.Items.IndexOf(SqlGeneral.fieldbyname('com1').AsString);
         cboTelCel.ItemIndex := cboTelCel.Items.IndexOf(SqlGeneral.fieldbyname('com2').AsString);
         tapis.DeviceIndex := cboTelNormal.Items.IndexOf(SqlGeneral.fieldbyname('com1').AsString);
         tapis2.DeviceIndex := cboTelCel.Items.IndexOf(SqlGeneral.fieldbyname('com2').AsString);

         result := 1;
         if SqlGeneral.FieldByName('TipoLinea').AsString = '0' then
          begin
           //trae el codigo del usuario para poder hacer llamadas telefonicas por conmutador
           querys('select CodConmutador from usuarios where idusuario = '+inttostr(frmprincipal.ucprincipal.CurrentUser.UserID),0,sqlgeneral);
           TipoLinea := sqlgeneral.fieldbyname('CodConmutador').AsString;
          end else
             TipoLinea := '';
  end else
   begin
          result := 0;
   end;
sqlgeneral.Free;
end;

procedure LiberarModems;
begin
     tapis.HangUp;
     tapis2.HangUp;
     tapis.ClearDeviceBuffers;
     tapis2.ClearDeviceBuffers;
     tapis.Free;
     tapis2.Free;

     cboTelNormal.Free;
     cboTelCel.Free;
end;

procedure colgar;
var intPantalla:integer;
begin
tapis.HangUp;
tapis2.HangUp;

tapis.ClearDeviceBuffers;
tapis2.ClearDeviceBuffers;
for intPantalla:=0 to screen.FormCount - 1 do
if screen.Forms[intPantalla].Name = 'frmmonitoreo' then
  (screen.Forms[intPantalla] as Tfrmmonitoreo).caption := 'Se colgo al tel: '+tapis.DialableNumber +'/'+ tapis2.DisplayableNumber;


end;

procedure BuscarPanelTel(valor:boolean);
var j : integer;
begin
  for j:=0 to screen.FormCount - 1 do
        if screen.Forms[j].Name = 'frmmonitoreo' then
           begin
                 (screen.Forms[j] as Tfrmmonitoreo).Ptel.Visible := valor;
           end;

end;

procedure InicializaTelefonos(SqlTelefonos:TMyQuery;conexion:TMyConnection);
var tel:integer;
begin
if ConectaModems then
  colgar;
Sleep(1000);
tel := 1;
setlength(telefonos,SqlTelefonos.RecordCount+1);
setlength(telefonosNombre,SqlTelefonos.RecordCount+1);
setlength(telefonosNivel,SqlTelefonos.RecordCount+1);
SqlTelefonos.First;
while not SqlTelefonos.Eof do
begin
if SqlTelefonos.fieldbyname('tipo_tel').AsString = 'NEXTEL RADIO' then
 begin
 telefonos[tel] := '';
 telefonosNombre[tel] := '';
 telefonosNivel[tel] := '';
 end else
  begin
  telefonos[tel] := SqlTelefonos.fieldbyname('telefono').AsString;
  telefonosNombre[tel] := SqlTelefonos.fieldbyname('nombre').AsString;
  telefonosNivel[tel] := SqlTelefonos.fieldbyname('nivel').AsString;

 end;
 SqlTelefonos.Next;

inc(tel);
end;

end;



procedure F10(SqlTelefonos,SqlAlarmas:TMyQuery;conexion:TMyConnection); //discar;
var j : integer;
begin

if(marcando = false) then
begin

try

i:=1;
InicializaTelefonos(SqlTelefonos,conexion);
i:=1;
SqlTelefonos.First;
callstatus:=0;
marcando:=true;

for j:=0 to screen.FormCount - 1 do
if screen.Forms[j].Name = 'frmmonitoreo' then
  begin
      if (screen.Forms[j] as Tfrmmonitoreo).cxGrid1.Showing then
         (screen.Forms[j] as Tfrmmonitoreo).cxGrid1.SetFocus;
  end;


marcado(SqlTelefonos,SqlAlarmas,conexion);
except
i:=1;
end;

end;
end;

procedure F11(SqlTelefonos,SqlAlarmas :TMyQuery;conexion:TMyConnection;x:integer);
begin

if(marcando = false) then
begin
    callstatus:=0;

    if ( i <> 0 ) then
     begin
        if (i<=SqlTelefonos.RecordCount) then begin
             if x = 1 then
                inc(i);
             if ConectaModems = true then
                colgar;
              Sleep(1000);
              marcando:=true;
              marcado(SqlTelefonos,SqlAlarmas,conexion);
        end else begin

              F10(SqlTelefonos,SqlAlarmas,conexion);
             end;
     end
     else
      begin

             F10(SqlTelefonos,SqlAlarmas,conexion);
      end;

end;
end;

procedure CancelarLlamada;
begin

     BuscarPanelTel(false);
     callstatus:=8;
     marcando:=false;
     if ConectaModems then
       colgar;
     i := 0;

end;

procedure NoContesto(SqlTelefonos,SqlAlarmas:TMyQuery;conexion:TMyConnection);
var  SqlGeneralNo:TMyQuery;
begin

SqlGeneralNo := TMyQuery.Create(nil);
SqlGeneralNo.Connection := conexion;
if marcando then
 begin

  BuscarPanelTel(false);
  if ConectaModems then
    colgar;
  Sleep(1000);
  callstatus:=3;

        querys('select * from alarmas_detalle limit 1',0,SqlGeneralNo);

        with sqlgeneralNo do
          begin
            Active:=true;
              Insert;
              fieldbyname('aid').AsInteger := IdAlarmaEnAtencion;
              fieldbyname('fecha').AsString := datetostr(FechaServidor);
              fieldbyname('hora').AsString := timetostr(HoraServidor);
              fieldbyname('action').AsString := 'MARCADO TELEFONICO';
              fieldbyname('detalle').AsString := 'NO CONTESTARON '+telefonosNombre[i]+' TEL : '+telefonos[i];//SqlTelefonos.fieldbyname('nombre').AsString+' TEL : '+SqlTelefonos.fieldbyname('telefono').AsString;
              fieldbyname('user').AsString := frmprincipal.ucprincipal.CurrentUser.LoginName;
              fieldbyname('tipo').AsInteger := 1;
              Post;
          end;
   SqlAlarmas.Close;
   SqlAlarmas.Open;

   inc(i);
   SqlTelefonos.Next;
   marcado(SqlTelefonos,SqlAlarmas,conexion);
  
 end
else
  begin


  if( DMREPORTES.SqlTelefonosMarcar.RecordCount > 0 ) then
   begin
         querys('select * from alarmas_detalle limit 1',0,SqlGeneralNo);

        with sqlgeneralNo do
          begin
            Active:=true;
              Insert;
              fieldbyname('aid').AsInteger := IdAlarmaEnAtencion;
              fieldbyname('fecha').AsString := datetostr(FechaServidor);
              fieldbyname('hora').AsString := timetostr(HoraServidor);
              fieldbyname('action').AsString := 'MARCADO TELEFONICO MANUAL';
              fieldbyname('detalle').AsString := 'NO CONTESTARON '+DMREPORTES.SqlTelefonosMarcar.fieldbyname('relacion').AsString+' TEL : '+DMREPORTES.SqlTelefonosMarcar.fieldbyname('telefono').AsString;//SqlTelefonos.fieldbyname('nombre').AsString+' TEL : '+SqlTelefonos.fieldbyname('telefono').AsString;
              fieldbyname('user').AsString := frmprincipal.ucprincipal.CurrentUser.LoginName;
              fieldbyname('tipo').AsInteger := 1;
              Post;
          end;

   SqlAlarmas.Close;
   SqlAlarmas.Open;

   end;

  end;
   SqlGeneralNo.free;
end;


procedure SiContesto(SqlTelefonos,SqlAlarmas:TMyQuery;conexion:TMyConnection);
var  SqlGeneralSi:TMyQuery;
begin

  SqlGeneralSi := TMyQuery.Create(nil);
  SqlGeneralSi.Connection := conexion;

  if marcando then
    begin
    BuscarPanelTel(false);
    if ConectaModems then
      colgar;
    //Sleep(1000);
    callstatus:=3;
    marcando:=false;

 querys('select * from alarmas_detalle limit 1',0,sqlgeneralSi);

  with sqlgeneralSi do
    begin
    Active:=true;
    Insert;
    fieldbyname('aid').AsInteger:=IdAlarmaEnAtencion;
    fieldbyname('fecha').AsString:=datetostr(FechaServidor);
    fieldbyname('hora').AsString:=timetostr(HoraServidor);
    fieldbyname('action').AsString:='MARCADO TELEFONICO';
    fieldbyname('detalle').AsString:='SI CONTESTARON '+telefonosNombre[i]+' TEL : '+telefonos[i];//SqlTelefonos.fieldbyname('nombre').AsString+' TEL : '+SqlTelefonos.fieldbyname('telefono').AsString;
    fieldbyname('user').AsString:=frmprincipal.ucprincipal.CurrentUser.LoginName;
    fieldbyname('tipo').AsInteger:=1;
    Post;
    end; //with
    SqlAlarmas.Close;
    SqlAlarmas.Open;  

 end
else
 begin
  //application.MessageBox('No se encuentra marcando a ningun telefono','Error',mb_iconinformation);
 if( DMREPORTES.SqlTelefonosMarcar.RecordCount > 0 ) then
   begin
      querys('select * from alarmas_detalle limit 1',0,sqlgeneralSi);
  colgar;
  with sqlgeneralSi do
    begin
    Active:=true;
    Insert;
    fieldbyname('aid').AsInteger:=IdAlarmaEnAtencion;
    fieldbyname('fecha').AsString:=datetostr(FechaServidor);
    fieldbyname('hora').AsString:=timetostr(HoraServidor);
    fieldbyname('action').AsString:='MARCADO TELEFONICO MANUAL';
    fieldbyname('detalle').AsString:='SI CONTESTARON '+DMREPORTES.SqlTelefonosMarcar.fieldbyname('relacion').AsString+' TEL : '+DMREPORTES.SqlTelefonosMarcar.fieldbyname('telefono').AsString;//SqlTelefonos.fieldbyname('nombre').AsString+' TEL : '+SqlTelefonos.fieldbyname('telefono').AsString;
    fieldbyname('user').AsString:=frmprincipal.ucprincipal.CurrentUser.LoginName;
    fieldbyname('tipo').AsInteger:=1;
    Post;
    end; //with
    SqlAlarmas.Close;
    SqlAlarmas.Open;

 end;

 end;

  SqlGeneralSi.free;

end;


procedure Marcado(SqlTelefonos,SqlAlarmas:TMyQuery;conexion:TMyConnection);
var
  SqlGeneralM:TMyQuery;
  cont,j:integer;
begin
Screen.Cursor := crHourGlass;
  SqlGeneralM := TMyQuery.Create(nil);
  SqlGeneralM.Connection := conexion;

  if (i<=SqlTelefonos.RecordCount)and(marcando) then
     begin  callstatus:=0;
            if telefonos[i]<>'' then
               begin
               if ConectaModems then
                begin
                tapis.Phone:='';
                tapis2.Phone:='';
                end;
           if ansipos('044-',telefonos[i])>0 then
              begin
                try
                 if ConectaModems then
                   begin
                   tapis2.Phone:=telefonos[i];
                   tapis2.Call;
                   end;
                 for cont:=0 to screen.FormCount - 1 do
                 if screen.Forms[cont].Name = 'frmmonitoreo' then
                   (screen.Forms[cont] as Tfrmmonitoreo).caption := 'Télefono al que se esta marcando : '+ tapis2.DisplayableNumber;

                except
                 application.MessageBox('Ocurrio un error con el modem de telefonos celulares, consulte a su administrador de sistemas','Aviso',mb_iconwarning);
                 Screen.Cursor := crDefault;
                 exit;
                end;
              end
           else
              begin
               try
               if ConectaModems then
                begin
                tapis.Phone:=TipoLinea+','+telefonos[i];
                //tapis.Phone:=telefonos[i];
                tapis.Call;
                end;
                for cont:=0 to screen.FormCount - 1 do
                 if screen.Forms[cont].Name = 'frmmonitoreo' then
                   begin
                   if ConectaModems then
                     (screen.Forms[cont] as Tfrmmonitoreo).caption := 'Télefono al que se esta marcando : '+tapis.DisplayableNumber
                   else
                      (screen.Forms[cont] as Tfrmmonitoreo).caption := 'Télefono al que se esta marcando : '+telefonos[i];
                   end;

                except
                 application.MessageBox('Ocurrio un error con el modem de telefonos convencionales, consulte a su administrador de sistemas','Aviso',mb_iconwarning);
                 Screen.Cursor := crDefault;
                 exit;
                end;
               end;
                //    if TipoLlamada = 1 then                       begin
                         BuscarPanelTel(true);
                            for j:=0 to screen.FormCount - 1 do
                                  if screen.Forms[j].Name = 'frmmonitoreo' then
                                     begin
                                                  (screen.Forms[j] as Tfrmmonitoreo).lbtelefono.Caption := telefonos[i];
                                                   (screen.Forms[j] as Tfrmmonitoreo).lbnombre.Caption :=  telefonosNivel[i]+'.-'+telefonosNombre[i];//SqlTelefonos.fieldbyname('nivel').AsString +'.-'+ SqlTelefonos.fieldbyname('nombre').AsString;

                                     end;

                             querys('select * from alarmas_detalle limit 1',0,sqlgeneralM);

                                with sqlgeneralM do
                                    begin
                                      Active:=true;
                                      Insert;
                                      fieldbyname('aid').AsInteger:=IdAlarmaEnAtencion;
                                      fieldbyname('fecha').AsString:=datetostr(FechaServidor);
                                      fieldbyname('hora').AsString:=timetostr(HoraServidor);
                                      fieldbyname('action').AsString:='MARCADO TELEFONICO';
                                      fieldbyname('detalle').AsString:='LLAMANDO A '+ telefonosNombre[i]+' TELEFONO : '+telefonos[i]; //SqlTelefonos.fieldbyname('nombre').AsString+' TELEFONO : '+SqlTelefonos.fieldbyname('telefono').AsString;
                                      fieldbyname('user').AsString:=frmprincipal.ucprincipal.CurrentUser.LoginName;
                                      fieldbyname('tipo').AsInteger:=1;
                                      Post;
                                    end; //with


                              SqlAlarmas.Close;
                              SqlAlarmas.Open;

                       //end;//IF
                       Sleep(2000);

         end;
  end else
    marcando := false;
     SqlGeneralM.Free;
     Screen.Cursor := crDefault;
end;



procedure concentrado(desde,cuenta,hasta:integer;year:string);
var
i,c,total{,totalxtipo}:integer;
fechaini,fechafin:string;
begin

with dmreportes do begin

//trae el total de registros de la tabla de alarmas_conclusion
querys('select count(id) as total from alarmas_conclusion',0,sqlgeneral);
total:=sqlgeneral.fieldbyname('total').AsInteger;
//elimina los registros de la tabla concentrado_alarmas dependiendo de la ip que genera el reporte
querys('delete from concentrado_alarmas where idmaq='+quotedstr(frmprincipal.idmaq),1,sqlgeneral);

querys('delete from concentrado_alarmas2 where idmaq='+quotedstr(frmprincipal.idmaq),1,sqlgeneral);

//insert el concepto y la ip en la tabla concentrado_alarmas
querys('insert into concentrado_alarmas (concepto,idmaq) select status,'+quotedstr(frmprincipal.idmaq)+' from alarmas_conclusion order by id',1,sqlgeneral);

querys('insert into concentrado_alarmas2 (concepto,idmaq) VALUES(''TOTAL SERVICIOS'','+quotedstr(frmprincipal.idmaq)+') ',1,sqlgeneral);

for i:=desde to hasta do
begin

case i of
    1:begin fechaini:=year+'/01/01'; fechafin:=year+'/01/31' end;
    2:begin fechaini:=year+'/02/01'; fechafin:=year+'/02/29' end;
    3:begin fechaini:=year+'/03/01'; fechafin:=year+'/03/31' end;
    4:begin fechaini:=year+'/04/01'; fechafin:=year+'/04/30' end;
    5:begin fechaini:=year+'/05/01'; fechafin:=year+'/05/31' end;
    6:begin fechaini:=year+'/06/01'; fechafin:=year+'/06/30' end;
    7:begin fechaini:=year+'/07/01'; fechafin:=year+'/07/31' end;
    8:begin fechaini:=year+'/08/01'; fechafin:=year+'/08/31' end;
    9:begin fechaini:=year+'/09/01'; fechafin:=year+'/09/30' end;
    10:begin fechaini:=year+'/10/01'; fechafin:=year+'/10/31' end;
    11:begin fechaini:=year+'/11/01'; fechafin:=year+'/11/30' end;
    12:begin fechaini:=year+'/12/01'; fechafin:=year+'/12/31' end;
end;
//recorre desde 1 hasta la cantidad de registros de la tabla de alarmas_conclucion
for c:=1 to total do
begin
sqlgeneral.Close;
sqlgeneral.SQL.Clear;
sqlgeneral.SQL.Add('Select sk_alarmas.fecha_pc,sk_alarmas.conclusion,count(sk_alarmas.tipo)as total,sk_alarmas.activacion,(alarmas_conclusion.status) as nombre From sk_alarmas inner join alarmas_conclusion on (alarmas_conclusion.id=sk_alarmas.conclusion)');
if cuenta=0 then
   sqlgeneral.SQL.Add('WHERE sk_alarmas.conclusion='+inttostr(c)+' and sk_alarmas.fecha_pc  between '+quotedstr(fechaini)+' and '+quotedstr(fechafin)+' AND sk_alarmas.status>2 group by conclusion ')
else
   sqlgeneral.SQL.Add('WHERE sk_alarmas.conclusion='+inttostr(c)+' and sk_alarmas.fecha_pc  between  '+quotedstr(fechaini)+' and '+quotedstr(fechafin)+' AND sk_alarmas.status>2 and sk_alarmas.cuenta='+inttostr(cuenta)+' group by conclusion ');
sqlgeneral.Open;

if sqlgeneral.FieldByName('total').AsInteger > 0 then begin
   querys('update concentrado_alarmas set m'+inttostr(i)+'='+quotedstr(sqlgeneral.FieldByName('total').asstring)+' where concepto='+quotedstr(sqlgeneral.FieldByName('nombre').asstring)+' and idmaq='+quotedstr(frmprincipal.idmaq),1,sqlgeneral2);

end; //if

end;//for c:
/////////////BUSCAR SERVICIOS POR CUENTA O POR GENERAL///////////////
sqlgeneral.Close;
sqlgeneral.SQL.Clear;
sqlgeneral.SQL.Add('SELECT count(sid) as total FROM servicios ');
if cuenta=0 then
   sqlgeneral.SQL.Add('WHERE fecha_fin between '+quotedstr(fechaini)+' and '+quotedstr(fechafin)+' and status=5 ')
else
   sqlgeneral.SQL.Add('WHERE fecha_fin between '+quotedstr(fechaini)+' and '+quotedstr(fechafin)+' and status=5 and cliente='+inttostr(cuenta)+' ');

sqlgeneral.Open;
if sqlgeneral.FieldByName('total').AsInteger > 0 then begin
querys('update concentrado_alarmas2 set m'+inttostr(i)+'='+quotedstr(sqlgeneral.FieldByName('total').asstring)+' where concepto=''TOTAL SERVICIOS'' and idmaq='+quotedstr(frmprincipal.idmaq),1,sqlgeneral2);

end; //if

////////////////////////////////////////////////////////////////////

end;//for


querys('update concentrado_alarmas set total=(m1+m2+m3+m4+m5+m6+m7+m8+m9+m10+m11+m12) where idmaq='+quotedstr(frmprincipal.idmaq),1,sqlgeneral);

/////////total para servicios////////////////////////////////////////////////
querys('update concentrado_alarmas2 set total=(m1+m2+m3+m4+m5+m6+m7+m8+m9+m10+m11+m12) where concepto=''TOTAL SERVICIOS'' and idmaq='+quotedstr(frmprincipal.idmaq),1,sqlgeneral);

//////////////////////////////////////////////////////////////////////////////
querys('select * from concentrado_alarmas where idmaq='+quotedstr(frmprincipal.idmaq)+' ORDER BY concepto',0,sqlgeneral5);
querys('select * from concentrado_alarmas2 where idmaq='+quotedstr(frmprincipal.idmaq)+'',0,sqlgeneral6);
end; //with
end;

//function send_email(const origen,contestar,address,asunto:string;const adjuntos,cuerpo:tmemo):integer;
function send_email(const origen,contestar,address,asunto:string;const adjuntos,cuerpo:tmemo;hostCorreo:integer):integer;
var i,ban:integer;
    IdMsgSend: TIdMessage;
    SMTP: TIdSMTP;
begin
  try
    try
      IdMsgSend:=TIdMessage.Create(nil);
      SMTP:=TIdSMTP.Create(nil);
      //DatosEmail(dmaccesos.sqlgeneral);
      // querys('select * from confsendmail',0,dmreportes.sqlgeneral);
      with IdMsgSend do
        begin
        MessageParts.Clear;
        From.Text := origen;
        ReplyTo.EMailAddresses := contestar;
        recipients.EMailAddresses:=address;
        Subject :=asunto;
        body:=cuerpo.Lines;
        for i:=0 to adjuntos.Lines.Count-1 do
          if FileExists(adjuntos.Lines.Strings[i]) then
            TIdAttachment.Create(IdMsgSend.MessageParts,adjuntos.Lines.Strings[i]);
        end;

      if hostCorreo = 0 then
      begin
        SmtpServerName := GetConfiguraciones('SmtpServerName', true);
        SmtpServerUser := GetConfiguraciones('SmtpServerUser', true);
        SmtpServerPassword := GetConfiguraciones('SmtpServerPassword', true);
        SmtpServerPort := strtoint(GetConfiguraciones('SmtpServerPort', true));
        SMTP.AuthenticationType := atNone;
      end
      else if hostCorreo = 1 then
      begin
        SmtpServerName := GetConfiguraciones('SmtpServerNameInterno', true);
        SmtpServerUser := GetConfiguraciones('SmtpServerUserInterno', true);
        SmtpServerPassword := GetConfiguraciones('SmtpServerPasswordInterno', true);
        SmtpServerPort := strtoint(GetConfiguraciones('SmtpServerPortInterno', true));
        SMTP.AuthenticationType := atNone;
      end
      else
      begin
        SmtpServerName := GetConfiguraciones('SmtpServerNameMasivo', true);
        SmtpServerUser := GetConfiguraciones('SmtpServerUserMasivo', true);
        SmtpServerPassword := GetConfiguraciones('SmtpServerPasswordMasivo', true);
        SmtpServerPort := strtoint(GetConfiguraciones('SmtpServerPortMasivo', true));
        smtp.AuthenticationType := atLogin;
      end;

        SMTP.Host := SmtpServerName;
        SMTP.Username := SmtpServerUser;
        SMTP.Password := SmtpServerPassword;
        SMTP.Port := SmtpServerPort;
        SMTP.HeloName:= SmtpServerName;



      //poner tiempo de time out SMTP.Connect(15); si se ocupa
      SMTP.Connect;
      try
        SMTP.Send(IdMsgSend);
        SMTP.Disconnect;
        ban:=0;
      except on E:exception do
        begin
          ban:=1;
          ShowMessage('Error: '+e.Message);
        end;
      end;
    except
      application.MessageBox('Ocurrio un error al intentar mandar el Email1','Aviso',mb_iconinformation);
      ban:=1;
    end;
  finally
    if SMTP.Connected then
      SMTP.Disconnect;
    SMTP.destroy;
    IdMsgSend.destroy;
    result:=ban;
  end;
end;

procedure CambiaFont(REMemo : TRzRichEdit);
begin
FDGral := TFontDialog.Create(nil);
FDGral.font := REMemo.Font;
if FDGral.Execute then
 REMemo.SelAttributes.Assign(FDGral.Font);
FDGral.Free;
 end;


procedure EstatusCliente(cliente:string;sql:TMyQuery);
var hija:TfrmMensajeCliente;
begin
  querys('select c.bloqueado as bloq,c.TipoCont as tip,con.estatus as estado, idabogado from clientes as c left join contratos as con ON(con.TipoCont=c.TipoCont) where c.idcliente ='+cliente,0,sql);
  if sql.FieldByName('tip').AsString <> ''  then
    begin
    {if sql.FieldByName('estado').asinteger = 0 then
      begin
      Application.CreateForm(TfrmMensajeCliente,hija);
      if (sql.FieldByName('idabogado').asinteger <> 0) then
        hija.inicializa('0','CUENTA CON ABOGADO')
      else
        hija.inicializa('0','CUENTA CANCELADA');
      hija.showmodal;
      end
    else
      begin
      if sql.FieldByName('bloq').asinteger = 1 then
        begin
        Application.CreateForm(TfrmMensajeCliente,hija);
        hija.inicializa('0','CUENTA BLOQUEADA');
        hija.showmodal;
        end;
      end; }

      if sql.FieldByName('estado').asinteger = 0 then
        begin
        Application.CreateForm(TfrmMensajeCliente,hija);
        hija.inicializa('0','CUENTA CANCELADA');
        hija.showmodal;
        end;

      if sql.FieldByName('bloq').asinteger = 1 then
        begin
        Application.CreateForm(TfrmMensajeCliente,hija);
        hija.inicializa('0','CUENTA BLOQUEADA');
        hija.showmodal;
        end;

      if (sql.FieldByName('idabogado').asinteger <> 0) then
        begin
        Application.CreateForm(TfrmMensajeCliente,hija);
        hija.inicializa('0','CUENTA CON ABOGADO');
        hija.showmodal;
        end;
    end
  else
    begin
    Application.CreateForm(TfrmMensajeCliente,hija);
    hija.inicializa('0','CUENTA S/CONTRATO');
    hija.showmodal;
    end;
end;

function BuscaCliente(query:TMyQuery):integer;
begin
       frmbusquedas.query:='Select idcliente,concat(ifnull(nombre,''''),'' '',ifnull(apaterno,''''),'' '',ifnull(amaterno,'''')) as Nombre,dir as Direccion,numero as Numero,ciudad as Ciudad, ' +
                           ' estado as Estado,usuario as Usuario,fecha as Fecha,hora as Hora,precio From clientes order by idcliente';
       frmbusquedas.campo_retorno:='idcliente';
       frmbusquedas.campo_busqueda:='Nombre';
       frmbusquedas.tabla:='clientes';
       frmbusquedas.tblorigen := 'clientes';
       frmbusquedas.cbofiltro.ItemIndex:=1;
       frmbusquedas.cbofiltro.OnClick(nil);
       frmbusquedas.ShowModal;
       if frmbusquedas.resultado <> '' then
            begin
             result:=strtoint(frmbusquedas.resultado);
             query.close;
             query.params.items[0].value:=strtoint(frmbusquedas.resultado);
             query.open;
            end
       else
         result:=0;
end;

function CalNumVerificador(Numero : string; cuenta:boolean) : string;
Var
  a,n,suma, cant : integer;
  NumFinal : string;
begin
if cuenta = true then
  cant := strtoint(GetConfiguraciones('DigitosCuentaBancos', true))
else
  cant := strtoint(GetConfiguraciones('DigitosVentaBancos', true));

NumFinal := '';
suma := 0;

for a := 1 to length(Numero) do
 begin
 if (cuenta = false) and ((GetConfiguraciones('ciudad', true) = 'CULIACAN')) then
   begin
   if a mod 2 > 0 then //numero impar
     n := strtoint(Numero[a]) * 2
   else //numero par
     n := strtoint(Numero[a]) * 1;
   end
 else
   begin
   if a mod 2 > 0 then //numero impar
     n := strtoint(Numero[a]) * 1
   else //numero par
     n := strtoint(Numero[a]) * 2;
   end;

  if n < 10 then
    NumFinal := NumFinal + '0' + inttostr(n)
  else
    NumFinal := NumFinal  + inttostr(n);
 end;

for a := 1 to length(NumFinal) do
 suma := suma + strtoint(NumFinal[a]);


if (suma > 9) then
  begin
    NumFinal := inttostr(suma);
    if NumFinal[length(Numfinal)] <> '0' then
     suma := strtoint(NumFinal[length(Numfinal)])
    else
      begin
      //if midstr(NumFinal,6,2) = '10' then
      if midstr(NumFinal,cant,2) = '10' then
        suma := 1
      else
        suma := 10;
      end;
  end;

NumFinal := inttostr(10 - suma);
result := NumFinal;
end;

function CalNumVerificador21(Numero : string) : string;
Var
  a,n,suma, cant, ban : integer;
  NumFinal : string;
begin
NumFinal := '';
suma := 0;
ban := 2;

//Empieza a multiplicar por dos, por uno, de derecha a izquierda
for a:=length(Numero) downto 1 do
  begin
  if ban = 2 then
    begin
    n := strtoint(Numero[a]) * 2;
    ban := 1;
    end
  else
    begin
    n := strtoint(Numero[a]) * 1;
    ban := 2;
    end;

  //Se suman los resultados con numeros de dos cifras
  if n < 10 then
    NumFinal := NumFinal + '0' + inttostr(n)
  else
    NumFinal := NumFinal  + inttostr(n);
  end;


//se separan y se suman
for a := 1 to length(NumFinal) do
 suma := suma + strtoint(NumFinal[a]);

//El resultado se divide entre 10.
//Si el residuo es igual a cero el digito es cero.
//si el residuo es diferente es el resultado de restarle a 10 el residuo
cant := suma mod 10; //strtoint(Format('%8.0f', []));

if cant = 0 then
  result := '0'
else
  result := inttostr(10 - cant);
end;

procedure CancelaPedido(idpedido : string);
var SqlGeneral,SqlTemp : TMyquery;  dsrejilla:tdatasource;
begin
SqlGeneral := TMyQuery.Create(nil);
SqlTemp := TMyQuery.Create(nil);
SqlGeneral.Connection := dmaccesos.conexion;
SqlTemp.Connection := dmaccesos.conexion;
dsrejilla := TDataSource.Create(nil);
dsrejilla.DataSet := SqlGeneral;

querys('SELECT d.idpedido,sum(d.cant) as cant,d.piezas,d.cod_cve,d.utilidad,d.surtido,d.paquete,d.id,d.idrequisicion, '+
       'd.idCardexArt, a.piezasxunidad, a.costo, p.idinstal, d.cant_salida, (Sum(d.cant)-sum(d.cant_salida)) as cantinst '+
       'FROM DetPedido as d INNER JOIN articulos as a '+
       'ON d.cod_cve = a.cod_cve left join pedidos as p on p.idpedido = d.idpedido '+
       'WHERE d.idpedido = '+idpedido+' and a.paquete = 0 group by d.cod_cve',0,SqlGeneral);
SqlGeneral.First;
while not SqlGeneral.Eof do
 begin
   CalculaCostoPromedio(sqlgeneral.fieldbyname('costo').AsFloat,'N', sqlgeneral.fieldbyname('cod_cve').AsString, '-', sqlgeneral.fieldbyname('cant').AsInteger);
   RegresaExistencias(idpedido,'',false,dsrejilla);
  //actualiza el articulo actual
   querys('update DetPedido set surtido = 2, estatus = 0 where id = '+SqlGeneral.fieldbyname('id').asstring,1,SqlTemp);
  querys('insert into CardexArt(cod_cve,movimiento,idmovi,FechaMov,iddoc,cant,piezas,usuario,HoraMov, descripcion) values ("'+
         SqlGeneral.fieldbyname('cod_cve').asstring+'","E",34,'+quotedstr(datetostr(FechaServidor))+','+idpedido+','+
         SqlGeneral.fieldbyname('cant').asstring+','+SqlGeneral.Fieldbyname('piezas').AsString+',"'+
         frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+timetostr(time)+'", "Devolucion sobre venta")',1,sqltemp);
  SqlGeneral.Next;
 end;
SqlGeneral.Free;
sqltemp.Free;
end;


function OtrasSalidas(altas : boolean;datos : TDataSource;aux : TMyQuery):integer;
Var
  idajuste,idconcepto_es,temp: string;
  pxu : integer;
  costo : double;
begin
      if altas then
       //trae el indice del concepto VTA/SIN/EXIST para insertar la cancelacion de los articulos
       querys('SELECT * FROM DetPedidoTemp INNER JOIN CardexArt ON (DetPedidoTemp.idCardexArt = CardexArt.IdCardexArt) INNER JOIN TipoMov ON (CardexArt.idmovi = TipoMov.idmovi) WHERE DetPedidoTemp.idmaq = '+datos.DataSet.fieldbyname('idmaq').AsString+' AND TipoMov.nombre = '+quotedstr('VTA/SIN/EXIST')+' and DetPedidoTemp.cod_cve='+quotedstr(datos.DataSet.fieldbyname('cod_cve').AsString) ,0,aux)
      else
       querys('SELECT * FROM DetPedido INNER JOIN CardexArt ON (DetPedido.idCardexArt = CardexArt.IdCardexArt) INNER JOIN TipoMov ON (CardexArt.idmovi = TipoMov.idmovi) WHERE DetPedido.idpedido = '+datos.DataSet.fieldbyname('idpedido').AsString+' AND TipoMov.nombre = '+quotedstr('VTA/SIN/EXIST')+' and DetPedido.cod_cve='+quotedstr(datos.DataSet.fieldbyname('cod_cve').AsString) ,0,aux);
       temp:=aux.Fields.Fields[0].AsString;

       if aux.RecordCount > 0 then
         begin
          //trae el maximo numero de idajuste
          querys('select max(idajuste) as id from AjusteInv',0,aux);
          idajuste := inttostr(aux.fieldbyname('id').Asinteger + 1);
          //trae el idconcepto_es de ConceptoES
          querys('select idconcepto_es from ConceptoES where nombre = '+quotedstr('ENTRADAS/PEDIDO'),0,aux);
          idconcepto_es := aux.fieldbyname('idconcepto_es').Asstring;
          //trae el costo del articulo de la tabla de articulos
          querys('select costo,piezasxunidad from articulos where cod_cve='+quotedstr(datos.DataSet.fieldbyname('cod_cve').AsString),0,aux);
          costo := aux.fieldbyname('costo').Asfloat;
          pxu := aux.fieldbyname('piezasxunidad').asinteger;
          //inserta en la tabla de AjusteInv
          querys('insert into AjusteInv (idajuste,idconcepto_es,FechaAlta,HoraAlta,TotalProductos,observaciones,movimiento,usuario,fecha,hora) values ('+idajuste+','+idconcepto_es+','+quotedstr(datetostr(FechaServidor))+','+quotedstr(FormatDateTime('HH:mm:ss',Time))+',1,'+quotedstr('Otra Salida por Cancelacion de venta sin existencia')+','+quotedstr('S')+','+quotedstr(frmprincipal.ucprincipal.CurrentUser.LoginName)+','+quotedstr(datetostr(FechaServidor))+','+quotedstr(FormatDateTime('HH:mm:ss',Time))+')',1,aux);
          //inserta en DetAjusteInv
          querys('insert into DetAjusteInv (idajuste,cod_cve,cant_ord,costo,usuario,fecha,hora) values ('+idajuste+','+quotedstr(datos.DataSet.fieldbyname('cod_cve').AsString)+','+datos.DataSet.fieldbyname('cantidad').AsString+','+floattostr(costo/pxu)+','+quotedstr(frmprincipal.ucprincipal.CurrentUser.LoginName)+','+quotedstr(datetostr(FechaServidor))+','+quotedstr(FormatDateTime('HH:mm:ss',Time))+')',1,aux);
          result := 1;
         end
       else
         result := 0;
end;

function RegresaExistencias(idpedido,cod_cve : string;alta : boolean;DsRejilla : TDataSource) : integer;
var
  SqlTemp,SqlGeneral:TMyQuery;                DSSource : tDataSource;
  inventariable,instal, servicio, orden : boolean;   BoCardex : integer;       temp : string;
begin
try
  result := 0;
  inventariable := false;
  servicio := false;
  DSSource := TDataSource.Create(nil);
  SqlTemp := dmaccesos.sqlgeneral;
  SqlGeneral := dmaccesos.sqlgeneral;
  DSSource.DataSet := frmprincipal.SqlGeneral;

  if querys('Select idinstal from pedidos where idpedido='+idpedido+' and idinstal <> 0', 0, sqltemp) = 0 then
    instal := false
  else
    instal := true;

  if cod_cve = '' then    //VARIOS ARTICULOS
    begin
    //querys('select r.*,tm.nombre from requisiciones r inner join TipoMov tm on r.idmovi = tm.idmovi where r.idmaq='+frmprincipal.idmaq,0,frmprincipal.SqlGeneral);

    //TRAE REQUISICIONES
    querys('Select r.idrequisicion, r.cod_cve, r.cantidad, r.surtido, r.iddoc, tm.nombre, d.cant, d.cant_salida, '+
           'idorden from requisiciones r '+
           'inner join TipoMov tm on r.idmovi = tm.idmovi left join DetPedido d on d.idpedido=r.iddoc where r.iddoc= '+
           idpedido+' and r.estatus < 2',0,frmprincipal.SqlGeneral);
    while not frmprincipal.sqlgeneral.Eof do
      begin
      //si ya se paso a orden no afecta la requi
      if frmprincipal.sqlgeneral.fieldbyname('idorden').AsInteger = 0 then
        orden := false
      else
        orden := true;


      if frmprincipal.SqlGeneral.FieldByName('nombre').AsString = 'PEDIDOS' then   //actualiza el backorder
        begin
        //existencia= existencia + (r.surtido-r.cantidad) queda en negativo porque despues suma el apartado completo
        if instal = true then
          begin
          if orden <> true then
            querys('update articulos set backorder=backorder-('+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' - '+frmprincipal.sqlgeneral.fieldbyname('surtido').AsString+'), '+
                   'existencia = existencia - ('+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' - '+frmprincipal.sqlgeneral.fieldbyname('surtido').AsString+'),'+
                   'instalacion = instalacion + '+frmprincipal.sqlgeneral.fieldbyname('cant_salida').AsString+' '+
                   'where cod_cve="'+frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString+'" and paquete=0 and inventariable = 1',1,sqltemp)
          else
            querys('update articulos set '+
                   'existencia = existencia - ('+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' - '+frmprincipal.sqlgeneral.fieldbyname('surtido').AsString+'),'+
                   'instalacion = instalacion +'+frmprincipal.sqlgeneral.fieldbyname('cant_salida').AsString+' '+
                   'where cod_cve="'+frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString+'" and paquete=0  and inventariable = 1',1,sqltemp);
          end
        else
          if orden <> true then
            querys('update articulos set backorder=backorder-('+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' - '+frmprincipal.sqlgeneral.fieldbyname('surtido').AsString+'), '+
                   'existencia = existencia - ('+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' - '+frmprincipal.sqlgeneral.fieldbyname('surtido').AsString+')'+
                   ' where cod_cve="'+frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString+'" and paquete=0  and inventariable = 1',1,sqltemp)
          else
            querys('update articulos set existencia = existencia - ('+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' - '+frmprincipal.sqlgeneral.fieldbyname('surtido').AsString+')'+
                   ' where cod_cve="'+frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString+'" and paquete=0  and inventariable = 1',1,sqltemp);
        end
      else
        begin   //actualiza el apartado
        querys('update articulos set apartado=apartado-'+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' where cod_cve='+quotedstr(frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString)+' and paquete=0  and inventariable = 1',1,sqltemp);

        //OtrasSalidas(alta,DSSource,sqlgeneral);

         //trae los registros que se insertaron en el cardex
         if alta then
           querys('select idCardexArt from DetPedidoTemp where idrequisicion='+frmprincipal.SqlGeneral.FieldByName('idrequisicion').AsString,0,sqltemp)
         else
           querys('select idCardexArt from DetPedido where idrequisicion='+frmprincipal.SqlGeneral.FieldByName('idrequisicion').AsString,0,sqltemp);

         querys('select servicio from articulos where cod_cve = "'+cod_cve+'"',0,sqlgeneral);
         if sqlgeneral.FieldByName('servicio').AsInteger = 0 then
           begin
           querys('insert into CardexArt(cod_cve,idmovi,movimiento,FechaMov,iddoc,cant,usuario,HoraMov, descripcion) '+
                  'SELECT cod_cve,idmovi,"E", "'+datetostr(date)+'",iddoc,cant,usuario,"'+FormatDateTime('HH:mm:ss',Time)+
                  '", "Cancelacion de Venta" FROM CardexArt WHERE idCardexArt ='+sqltemp.fieldbyname('idCardexArt').AsString,1,sqltemp);
           end;
         end;

     if alta then
        querys('delete from requisiciones where idrequisicion='+frmprincipal.sqlgeneral.fieldbyname('idrequisicion').AsString,1,sqltemp)
      else
        querys('update requisiciones set estatus = 4 where idrequisicion='+frmprincipal.sqlgeneral.fieldbyname('idrequisicion').AsString,1,sqltemp);
      frmprincipal.sqlgeneral.Next;
      end;

    dsrejilla.dataset.First;
    while not dsrejilla.dataset.Eof do
      begin
      if (dsrejilla.dataset.FieldByName('idCardexArt').Asinteger = 0) and ((dsrejilla.dataset.Fieldbyname('cod_cve').AsString <> 'MONITOREO') and (dsrejilla.dataset.Fieldbyname('cod_cve').AsString <> 'DESCUENTOPP') and (dsrejilla.dataset.Fieldbyname('cod_cve').AsString <> 'CARGOS')) then
        begin
        if dsrejilla.dataset.fieldbyname('piezas').AsInteger>0 then
          //pone lo que tiene en apartados en existencias                                                                                                                                                                  //frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString
          querys('update articulos set apartado=apartado-'+dsrejilla.dataset.Fieldbyname('piezas').AsString+',existencia=existencia+'+dsrejilla.dataset.Fieldbyname('piezas').AsString+' where cod_cve="'+dsrejilla.dataset.Fieldbyname('cod_cve').AsString+'" and paquete=0  and inventariable = 1',1,sqltemp)
        else
          begin
          if alta =  false then
            begin
            //Regresa las existencias existencias
           //
           //dsrejilla.Fieldbyname('cod_cve').AsString
            if instal = false then
              querys('update articulos set existencia = existencia + ('+dsrejilla.dataset.Fieldbyname('cant').AsString+'*piezasxunidad) '+
                     'where cod_cve='+quotedstr(dsrejilla.dataset.Fieldbyname('cod_cve').AsString)+' and paquete=0  and inventariable = 1',1,sqltemp)
            else
              querys('update articulos set instalacion=instalacion-('+dsrejilla.dataset.Fieldbyname('cant').AsString+'*piezasxunidad), '+
                     'existencia = existencia + ('+dsrejilla.dataset.Fieldbyname('cant').AsString+'*piezasxunidad) '+
                     'where cod_cve='+quotedstr(dsrejilla.dataset.Fieldbyname('cod_cve').AsString)+' and paquete=0  and inventariable = 1',1,sqltemp);
            end
          else
            //pone lo que tiene en apartados en existencias                                                                                                                                                                                      //dsrejilla.Fieldbyname('cod_cve').AsString
            querys('update articulos set apartado=apartado-('+dsrejilla.dataset.Fieldbyname('cant').AsString+'*piezasxunidad),existencia=existencia+('+dsrejilla.dataset.Fieldbyname('cant').AsString+'*piezasxunidad) where cod_cve='+quotedstr(dsrejilla.dataset.Fieldbyname('cod_cve').AsString)+' and paquete=0  and inventariable = 1',1,sqltemp);
          end;

        //OtrasSalidas(alta,dsrejilla,sqlgeneral);

        querys('select idmovi from TipoMov where nombre="DEV/VENTAS"',0,sqlgeneral);
        temp:=sqlgeneral.Fields.Fields[0].AsString;
        //trae el campo servicio
        querys('select servicio from articulos where cod_cve = ' +quotedstr(cod_cve),0,sqlgeneral);
        if sqlgeneral.FieldByName('servicio').AsInteger = 0 then
          //inserta en el cardex la salida
          querys('insert into CardexArt(cod_cve,movimiento,idmovi,FechaMov,iddoc,cant,piezas,usuario,HoraMov, descripcion) values ("'+
                 cod_cve+'","E",'+temp+',"'+datetostr(date)+'",'+idpedido+','+dsrejilla.dataset.Fieldbyname('cant').AsString+','+
                 dsrejilla.dataset.Fieldbyname('piezas').AsString+',"'+frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+
                 FormatDateTime('HH:mm:ss',Time)+'", "Devolucion sobre Venta")',1,sqlgeneral);
        end;
      dsrejilla.dataset.next;
      end;
    end
  else     //UN ARTICULO
    begin
    querys('select inventariable, servicio from articulos where cod_cve="'+cod_cve+'"',0,frmprincipal.SqlGeneral);
    if frmprincipal.SqlGeneral.FieldByName('inventariable').AsInteger = 1 then
      inventariable := true;
    if frmprincipal.SqlGeneral.FieldByName('servicio').AsInteger = 1 then
      servicio := true;

    //requisiciones
    querys('Select r.idrequisicion, r.cod_cve, r.cantidad, r.surtido, r.iddoc, tm.nombre, d.cant from requisiciones r '+
           'inner join TipoMov tm on r.idmovi = tm.idmovi left join DetPedido d on d.idpedido=r.iddoc '+
           'where r.idmaq ='+frmprincipal.idmaq+' and r.cod_cve = "'+cod_cve+'"',0,frmprincipal.SqlGeneral);
    if frmprincipal.sqlgeneral.RecordCount > 0 then
      begin
      if (frmprincipal.sqlgeneral.FieldByName('nombre').AsString='PEDIDOS') then
        if (frmprincipal.sqlgeneral.Fieldbyname('cod_cve').AsString <> 'MONITOREO') and (frmprincipal.sqlgeneral.Fieldbyname('cod_cve').AsString <> 'DESCUENTOPP') and (frmprincipal.sqlgeneral.Fieldbyname('cod_cve').AsString <> 'CARGOS') then
          begin
          //querys('update articulos set backorder=backorder-'+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' where cod_cve='+quotedstr(frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString)+' and paquete=0',1,sqltemp);
          querys('update articulos set backorder=backorder-'+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+', '+
                 'existencia = existencia +('+dsrejilla.dataset.Fieldbyname('cant').AsString+'-'+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+'), '+
                 'apartado = apartado - '+dsrejilla.dataset.Fieldbyname('cant').AsString+' '+
                 'where cod_cve="'+frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString+'" and paquete=0  and inventariable = 1',1,sqltemp);
          end
        else
          begin
          if (frmprincipal.sqlgeneral.Fieldbyname('cod_cve').AsString <> 'MONITOREO') and (frmprincipal.sqlgeneral.Fieldbyname('cod_cve').AsString <> 'DESCUENTOPP') and (frmprincipal.sqlgeneral.Fieldbyname('cod_cve').AsString <> 'CARGOS') then
            querys('update articulos set apartado=apartado-'+frmprincipal.sqlgeneral.fieldbyname('cantidad').AsString+' where cod_cve='+quotedstr(frmprincipal.sqlgeneral.fieldbyname('cod_cve').AsString)+' and paquete=0  and inventariable = 1',1,sqltemp);

          OtrasSalidas(alta,DSSource,sqlgeneral);
          //trae el campo servicio
          querys('select servicio from articulos where cod_cve = ' +quotedstr(cod_cve),0,sqlgeneral);
          if sqlgeneral.FieldByName('servicio').AsInteger = 0 then
            querys('insert into CardexArt (cod_cve,idmovi,movimiento,FechaMov,iddoc,cant,usuario,HoraMov, descripcion) '+
                   'SELECT cod_cve,idmovi,"E",FechaMov,iddoc,cant,usuario,Hor0aMov, "Cancelacion de Venta" FROM CardexArt '+
                   'WHERE idCardexArt ='+dsrejilla.dataset.fieldbyname('idCardexArt').asstring,1,sqltemp);
          end;
      if alta then
        querys('delete from requisiciones where idrequisicion='+frmprincipal.sqlgeneral.fieldbyname('idrequisicion').AsString,1,sqltemp)
      else
        querys('update requisiciones set estatus = 4 where idrequisicion='+frmprincipal.sqlgeneral.fieldbyname('idrequisicion').AsString,1,sqltemp);


      querys('select idmovi from TipoMov where nombre="DEV/VENTAS"',0,sqlgeneral);
      temp:=sqlgeneral.Fields.Fields[0].AsString;

      OtrasSalidas(alta,DSSource,sqlgeneral);

      if BoCardex = 1 then
        begin
        //trae el campo servicio
        querys('select servicio from articulos where cod_cve = ' +quotedstr(cod_cve),0,sqlgeneral);
        if sqlgeneral.FieldByName('servicio').AsInteger = 0 then
          begin
          querys('insert into CardexArt(cod_cve,movimiento,idmovi,FechaMov,iddoc,cant,piezas,usuario,HoraMov, descripcion) values ('+
                 quotedstr(cod_cve)+',''E'','+temp+','+quotedstr(datetostr(FechaServidor))+','+idpedido+','+
                 dsrejilla.dataset.Fieldbyname('cant').AsString+','+dsrejilla.dataset.Fieldbyname('piezas').AsString+','+
                 quotedstr(frmprincipal.ucprincipal.CurrentUser.LoginName)+','+quotedstr(FormatDateTime('HH:mm:ss',Time))+
                 ', "Devolucion sobre Ventas")',1,sqlgeneral);
          querys('update articulos set apartado=apartado-'+inttostr(frmprincipal.sqlgeneral.fieldbyname('cantidad').Asinteger)+'+'+inttostr(frmprincipal.sqlgeneral.fieldbyname('piezas').Asinteger)+' where cod_cve='+quotedstr(cod_cve)+' and paquete=0  and inventariable = 1',1,sqltemp);
          end;
        end;
      end
    else
      begin
      OtrasSalidas(alta,dsrejilla,sqlgeneral);

      //trae el indice del concepto DEV/VENTAS para insertar la cancelacion de los articulos
      querys('select idmovi from TipoMov where nombre="DEV/VENTAS"',0,sqlgeneral);
      temp:=sqlgeneral.Fields.Fields[0].AsString;

      if (servicio = false) and (inventariable = true) then
        begin
        querys('insert into CardexArt(cod_cve,movimiento,idmovi,FechaMov,iddoc,cant,piezas,usuario,HoraMov, descripcion) values ('+
                quotedstr(cod_cve)+',''E'','+temp+','+quotedstr(datetostr(date))+','+idpedido+','+
                dsrejilla.dataset.Fieldbyname('cant').AsString+','+dsrejilla.dataset.Fieldbyname('piezas').AsString+','+
                quotedstr(frmprincipal.ucprincipal.CurrentUser.LoginName)+','+quotedstr(FormatDateTime('HH:mm:ss',Time))+
                ', "Devolucion sobre venta")',1,sqlgeneral);

        querys('update articulos set apartado=apartado-(('+dsrejilla.dataset.Fieldbyname('cant').AsString+'*piezasxunidad)+'+dsrejilla.dataset.Fieldbyname('piezas').AsString+'),existencia=existencia+('+dsrejilla.dataset.Fieldbyname('cant').AsString+'*piezasxunidad)+'+dsrejilla.dataset.Fieldbyname('piezas').AsString+' where cod_cve='+quotedstr(cod_cve)+' and paquete=0  and inventariable = 1',1,sqltemp);
        end;
      end;
    result := 0;
    end;
except
  result := 1;
end;
end;

procedure RegresaCancelacion(sqlgeneral:tmyquery; idmovcardex:integer; iddoc, idpedido:string);
var nota:string; sqlinserta:tmyquery; instal :boolean;
begin
sqlinserta := TMyQuery.Create(nil);
sqlinserta.Connection := DMAccesos.conexion;
case idmovcardex of
  10 : nota := 'Salida por regresar Cancelacion';
  32 : nota := 'Salida por Cancelacion de Nota de Credito';
  end;

if querys('Select idinstal from pedidos where idpedido='+idpedido+' and idinstal <> 0', 0, sqlinserta) = 0 then
    instal := false
  else
    instal := true;

sqlgeneral.First;
  while not sqlgeneral.Eof = true do
    begin
    if (instal) and (iddoc = idpedido) then  //si tiene instalacion y no viene de notas de credito
      querys('Update articulos set instalacion = instalacion + '+sqlgeneral.fieldbyname('cant').AsString+', '+
             ' existencia = existencia - '+sqlgeneral.fieldbyname('cant').AsString+
             ' where cod_cve ="'+sqlgeneral.fieldbyname('cod_cve').AsString+'" and inventariable = 1', 1, sqlinserta)
    else
      querys('Update articulos set existencia = existencia - '+sqlgeneral.fieldbyname('cant').AsString+
             ' where cod_cve ="'+sqlgeneral.fieldbyname('cod_cve').AsString+'" and inventariable = 1', 1, sqlinserta);
    querys('insert into CardexArt(cod_cve,movimiento,idmovi,FechaMov,iddoc,cant,usuario,HoraMov, descripcion) values ("'+
         SqlGeneral.fieldbyname('cod_cve').asstring+'","S",'+inttostr(idmovcardex)+',"'+datetostr(date)+'",'+iddoc+','+
         SqlGeneral.fieldbyname('cant').asstring+', "'+frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+
         timetostr(time)+'", "'+nota+'")',1,sqlinserta);
    sqlgeneral.Next;
    end;
end;


function ConectaServidor(ServerConec:TMyConnection;memo:tmemo):integer;
begin
result := 0;
        try
         //Crea la Variable para lectura de Archivo
        //saca la ip del servidor de mysql y el nombre de la bd de el archivo servidor.ini
        { ServerConec.Disconnect;
         memo.Clear;
         memo.Lines.LoadFromFile(uprincipal.my_path+'msdat.dll');
         ServerConec.Server:=memo.Lines.Strings[0];
         ServerConec.Database:=memo.Lines.Strings[1];    }
         ServerConec.Server:= DMAccesos.IniFile.ReadString('CONEXION', 'ipadd', '');
         ServerConec.Database:= DMAccesos.IniFile.ReadString('CONEXION', 'bd', '');
         ServerConec.Username := DMAccesos.IniFile.ReadString('CONEXION', 'usuario', '');
         ServerConec.Password := DMAccesos.IniFile.ReadString('CONEXION', 'pass', '');
         ServerConec.Connected:=true;
         result:=1;
       except
         application.MessageBox('no se logro la conexion con el servidor de base de datos.','Error de Conexion',mb_ok+mb_iconwarning);
         application.Terminate;
       end;
end;

function HoraLarga(hora:ttime):string;
var h,m,s,ml:word;
begin
decodetime(hora,h,m,s,ml);
result:=inttostr(h)+':'+inttostr(m)+':'+inttostr(s);
end;


function HoraServidor:Ttime;
Var query:TMyQuery;
begin
query:=TMyQuery.Create(nil);
query.Connection:=dmaccesos.conexion;
querys('select adddate(now(), interval valor hour) as hora from configuraciones where concepto ="ZonaHoraria"',0,query);
result:=query.fieldbyname('hora').AsDateTime;
query.Free;
end;

function FechaServidor:Tdate;
Var query:TMyQuery;
begin
query:=TMyQuery.Create(nil);
query.Connection:=dmaccesos.conexion;
querys('select adddate(now(), interval valor hour) as fecha from configuraciones where concepto ="ZonaHoraria" ',0,query);
result:=query.fieldbyname('fecha').AsDateTime;
query.Free;
end;

function ExisteNombre(Edit:TrzDBEdit;sqltext:string;query:tmyquery):integer;
begin
if edit.Text='' then
  begin
  application.MessageBox('Debe de especificar el nombre','Aviso',mb_iconinformation);
  edit.Clear;
  result:=1;
  exit;
  end;

//verifica que no exista en la tabla de lineas
querys(sqltext,0,query);
if query.RecordCount > 0 then
  begin
  application.MessageBox('Ya existe otro elemento con ese nombre y no se permiten duplicados','Aviso',mb_iconinformation);
  edit.Clear;
  result:=1;
  exit;
  end;
result:=0;
end;

function BuscaForma(nombre: string):integer;
var i:integer;
begin
result := 0;
delete(nombre,1,1);
for i:=0 to screen.FormCount-1 do
  begin
  // showmessage(screen.Forms[i].Name);
  if screen.Forms[i].Name=nombre then
    begin
    result:=1;
    exit;
    end
  else
    result := 0;
  end;

if i=screen.FormCount then
   result:=0;
end;

//valida que solo se tecleen numeros o un un punto
function ValidaNumeros(Caracter:char;punto:boolean):char;
begin
if (punto) and (caracter = '.') then
 caracter := #0;

if ((Caracter>#47)and(Caracter<#58))or(Caracter=#13)or(Caracter=#8)or(Caracter='.')or(Caracter='-') then
  begin
    Caracter:=Caracter;
  end
else
  begin
   Caracter:=#0;
  end;
result:=Caracter;
end;

//verifica que solo halla un punto en un string
function ValidaPunto(Cadena:string;Caracter:char):char;
var i:integer;
begin
  if Caracter = '.' then
     begin
       for i:=1 to length(Cadena) do
          begin
            if Cadena[i] = '.' then
               begin
                Caracter:=#0;
                break;
              end
          end;
      end;
result:=Caracter;
end;


//Funcion que valida si se esta editando o dando de alta un registro para que se guarden a cancele
function CerrarPantalla(Var tabla:TMyTable;btncancelar,btnalta,btnmodificar:TRzBitBtn):boolean;
  var resultado:integer; mensaje:string;
begin
result := false;
if tabla.State = dsedit then
   mensaje:='Se encuentra editando un registro, deseas guardar los cambios?';
if tabla.State = dsinsert then
   mensaje:='Se encuentra agregando un registro, deseas guardar la alta?';

if ((tabla.State = dsedit) or (tabla.State = dsinsert))and (tabla.Modified)  then
  begin
  resultado:=application.MessageBox(pchar(mensaje),'Cuidado',mb_yesnocancel);
  if resultado = 7 then //respuesta no
    begin
    btncancelar.Click;
    btncancelar.Click;
    result:=true;
    end
  else
    if resultado = 6 then  //respuesta si
      begin
      if tabla.State = dsedit then
        btnmodificar.Click
      else
        btnalta.Click;
      btncancelar.Click;
      result:=true;
      end
    else
      result:=false;
  end;
if (tabla.State <> dsedit) and (tabla.State <> dsinsert) then
   result:=true;
end;

//quita un caracter de una cadena y las comas y te la devuelve en un flotante
function QuitaCaracteres(Cadena,Caracter:string):double;
var temp:string;
begin
temp:=cadena;
//quita el signo de pesos
temp:=AnsiReplaceStr(temp,Caracter,'');
temp:=AnsiReplaceStr(temp,',','');
if temp='' then
temp:='0';
result:=strtofloat(temp);
end;

function querys(const consulta:string;const actualizacion:integer;Query:TMyQuery):integer;overload;
  var c : string;
begin
    gIntRegresa := querys2(consulta,actualizacion,Query);
       if(actualizacion = 1) then   
        if(AnsiContainsStr(consulta,'articulos')) then
          begin
          c:= consulta;
          //c:=AnsiReplaceStr(consulta,'\','\\');
          c:=AnsiReplaceStr(c,'"','\"');
          c:=AnsiReplaceStr(c,'"','');
          c:=StringReplace(c,#39,#92+#39,[rfReplaceAll, rfIgnoreCase]);  //porque no funciona?

          querys2('insert into LogSys (consulta,usuario,fecha,hora) values("'+c+'","'+frmprincipal.ucprincipal.CurrentUser.Username+'",CURDATE(),CURTIME())', 1,DMAccesos.sqlgeneral);
          end;
    result := gIntRegresa;
end;

function querys2(const consulta:string;const actualizacion:integer;Query:TMyQuery):integer;
  var c : string;
begin
c:=AnsiReplaceStr(consulta,'\','');
//c:=AnsiReplaceStr(consulta,'\','\\');
try
  if DMAccesos.conexion.Connected <> true then
    begin
    DMAccesos.conexion.Connect;
    if DMAccesos.conexion.Connected <> true then
      begin
      showmessage('Se perdio la conexion con la Base de Datos');
      exit;
      end;
    end;

  with query do
     begin
      close;
      sql.Clear;
      sql.Add(c);
      if actualizacion = 0 then
        begin
        open;
        result := recordcount;
        end
      else
        begin
        execute;
        result := RowsAffected;
        end;
      end;
except
  ClipBoard.SetTextBuf(PChar(c));
  application.MessageBox('ERROR DE CONSULTA SQL. Consulte el Administrador.','Error',mb_iconinformation);
  //application.MessageBox(pchar('Ocurrio un error al tratar ejecutar la siguiente consulta SQL, (valla a un editor y teclee CTRL + V):'+chr(13)+c),'Error',mb_iconinformation);
  result := 0;
  end;
end;

function querys(const consulta:string;const actualizacion:integer;Query:TADOQuery):integer;overload;
  var c : string;
begin
c:=AnsiReplaceStr(consulta,'\','');
try
  if DMREPORTES.conexionFE.Connected <> true then
    begin
    DMREPORTES.conexionFE.Connected := true;
    if DMAccesos.conexion.Connected <> true then
      begin
      showmessage('Se perdio la conexion con la Base de Datos MSSQL');
      exit;
      end;
    end;

  with query do
     begin
      Close;
      sql.Clear;
      sql.Add(c);
      if actualizacion = 0 then
        begin
        Open;
        result := recordcount;
        end
      else
        begin
        ExecSQL;
        result := RowsAffected;
        end;
      end;
except
  ClipBoard.SetTextBuf(PChar(c));
  application.MessageBox('ERROR DE CONSULTA MSSQL. Consulte el Administrador.','Error',mb_iconinformation);
  result := 0;
  end;
end;

function QueWindows:string;
 var Plataforma:string;
     Version:integer;
begin
    Version:=0;
    case Win32Platform of
      VER_PLATFORM_WIN32s:
        begin
          Result:='Plataforma: Win311 Versión: ' +
          IntTostr(Win32MajorVersion)+'.' +
          IntToStr(Win32MinorVersion);
          exit;
        end;
      VER_PLATFORM_WIN32_WINDOWS:
       begin
        Plataforma:='Plataforma: Win9X Versión: ';
        Version:=Win32BuildNumber and $0000FFFF;
       end;
      VER_PLATFORM_WIN32_NT:
       begin
        Plataforma:='Plataforma: WinNT Versión: ';
        Version:=Win32BuildNumber;
       end;
    end;

      if Win32CSDVersion = '' then
        Result:= Plataforma+IntTostr( Win32MajorVersion)+
                 '.'+
                 IntTostr( Win32MinorVersion)+
                 '.'+
                 IntTostr(Version)
       else
        Result:= Plataforma+IntTostr( Win32MajorVersion)+
                 '.'+
                 IntTostr( Win32MinorVersion)+
                 '.'+
                 IntTostr(Version)+
                 ' '+
                 Win32CSDVersion;
  end;

function PantallasVisibles(s:tscreen):integer;
var i,c:integer;
begin
c:=0;
   for i:=0 to s.FormCount -1 do
    if s.Forms[i].Showing then
       inc(c);
result := c;
end;

procedure ObtenerCorreo(forma, correo:string);
begin
formaproviene := forma;
correoproviene := correo;
end;

procedure OperacionReporte(const NombreReporte,Asunto,TipoImpresion:string;TipoReporteador:integer; correo:string='U');
var
hija:TfrmEnviarCorreo; SDArchivo:TRzSaveDialog; Launcher:TrzLauncher;
begin
dmreportes.sqlDatosEmpresa.Open;
{
//Tipo Reporteador          //Tipo Impresion
  0 -> Rave                  IMP -> Impresora
  1 -> Builder               PDF -> PDF

  'IMP';   IMPRESION CON VISTA PREVIA
  'IMPD';   IMPRESION DIRECTA
  'EML';
  'ARC';
  'XLS'  EXCEL CORREO   /*AUN NO ESTA*/
  'PDF' PDF CORREO
  'PDFC' CREA PDF SOLAMENTE
  'XLSD' GENERA EXCEL SIN ENVIO DE CORREO
  }

with dmreportes do
  begin
  if TipoImpresion = 'IMP' then
  begin
    if TipoReporteador = 0 then     // RAVE
    begin
              if NombreReporte = 'RepEventosCliente' then
                  RVP.ProjectFile:=uprincipal.my_path+'Reportes_alarmex.rav'
              else
                  RVP.ProjectFile:=uprincipal.my_path+'Reportes_sysalarm.rav';

              RVP.ExecuteReport(NombreReporte);
    end;

    if TipoReporteador = 1 then     // BUILDER
    begin
      ppReport.Template.DatabaseSettings.Name := NombreReporte;
      ppReport.Template.LoadFromDatabase;
      //ppReport.Template.SaveToDatabase;
      ppReport.Print;
    end;
  end;

  if TipoImpresion = 'IMPD' then
  begin
    if TipoReporteador = 0 then     // RAVE  sin revisar si funciona
    begin
      application.MessageBox('Este documento no puede tener impresion directa! Intente con Vista Previa','Atención',MB_ICONINFORMATION);
      {
      RVP.Engine:=RvSystem2;
      rvsystem2.DefaultDest:=rdprinter;
      if NombreReporte = 'RepEventosCliente' then
        RVP.ProjectFile:=uprincipal.my_path+'Reportes_alarmex.rav'
      else
        RVP.ProjectFile:=uprincipal.my_path+'Reportes_sysalarm.rav';
      RVP.ExecuteReport(NombreReporte);   }
    end;

    if TipoReporteador = 1 then     // BUILDER
    begin
      ppReport.Template.DatabaseSettings.Name := NombreReporte;
      ppReport.Template.LoadFromDatabase;
      ppreport.DeviceType := dtPrinter;
      ppReport.ShowPrintDialog := false;
      ppreport.ModalPreview := false;
      ppReport.Print;
    end;
  end;


  if TipoImpresion = 'PDF' then
  begin
    if FileExists(uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf') then
        DeleteFile(uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf');

    if TipoReporteador = 0 then     // RAVE
    begin
      RVP.Engine:=RvSystem2;
      rvsystem2.DefaultDest:=rdfile;
      if NombreReporte = 'RepEventosCliente' then
          RVP.ProjectFile:=uprincipal.my_path+'Reportes_alarmex.rav'
      else
          RVP.ProjectFile:=uprincipal.my_path+'Reportes_sysalarm.rav';

      rvsystem2.DefaultDest:=rdfile;
      RvSystem2.DoNativeOutput:=false;
      RvSystem2.RenderObject:=RvRenderPDF1;
      RvSystem2.OutputFileName:=uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf';

      rvp.ExecuteReport(NombreReporte);
      rvp.Engine:=rvsystem1;
      rvp.Close;
    end;   //rave

    if TipoReporteador = 1 then     // BUILDER
    begin

      ppReport.Template.DatabaseSettings.Name := NombreReporte;
      ppReport.Template.LoadFromDatabase;

      //ppReport.Template.SaveToDatabase;
      ppReport.AllowPrintToFile := True;
      ppReport.ShowPrintDialog := false;
      ppReport.TextFileName := uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf';
      ppReport.DeviceType := 'PDFFile';
      ppReport.Print;
    end;    // Builder

    application.CreateForm(TfrmEnviarCorreo, hija);
    frmprincipal.mmdatos.Clear;
    frmprincipal.mmdatos.Lines.Add(uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf');
    if correo = 'P' then
       hija.tipogrid := 'P';
    hija.inicializa(Asunto,frmprincipal.Mmdatos);
    //if formaproviene = 'Tfrmrepdetalle' then
    hija.edenviar.text := correoproviene;
    hija.Show;
  end;

  //    /***********

  if TipoImpresion = 'PDFC' then
  begin
    if FileExists(uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf') then
        DeleteFile(uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf');

    if TipoReporteador = 0 then     // RAVE
    begin
      RVP.Engine:=RvSystem2;
      rvsystem2.DefaultDest:=rdfile;
      if NombreReporte = 'RepEventosCliente' then
          RVP.ProjectFile:=uprincipal.my_path+'Reportes_alarmex.rav'
      else
          RVP.ProjectFile:=uprincipal.my_path+'Reportes_sysalarm.rav';

      rvsystem2.DefaultDest:=rdfile;
      RvSystem2.DoNativeOutput:=false;
      RvSystem2.RenderObject:=RvRenderPDF1;
      RvSystem2.OutputFileName:=uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf';

      rvp.ExecuteReport(NombreReporte);
      rvp.Engine:=rvsystem1;
      rvp.Close;
    end;   //rave

    if TipoReporteador = 1 then     // BUILDER
    begin

      ppReport.Template.DatabaseSettings.Name := NombreReporte;
      ppReport.Template.LoadFromDatabase;

      //ppReport.Template.SaveToDatabase;
      ppReport.AllowPrintToFile := True;
      ppReport.ShowPrintDialog := false;
      ppReport.TextFileName := uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.pdf';
      ppReport.DeviceType := 'PDFFile';
      ppReport.Print;
    end;    // Builder
  end;


  ///******************
  if TipoImpresion = 'ARC' then
  begin
    Launcher := TrzLauncher.Create(nil);
    Launcher.Action := 'Open';
    Launcher.WaitType := wtProcessMessages;
    SDArchivo := TrzSaveDialog.Create(nil);
    SDArchivo.Title := 'Guardar como';
    SDArchivo.InitialDir := GetCurrentDir;
    if TipoReporteador = 0 then
      SDArchivo.Filter := 'PDF file|*.pdf'
    else
      SDArchivo.Filter := 'PDF file|*.pdf|Excel file|*.xls';
    SDArchivo.DefaultExt := 'pdf';
    SDArchivo.FilterIndex := 1;

    if TipoReporteador = 0 then     // RAVE
    begin
      if SDArchivo.Execute then
      begin
        RVP.Engine:=RvSystem2;
        rvsystem2.DefaultDest:=rdfile;
         if NombreReporte = 'RepEventosCliente' then
              RVP.ProjectFile:=uprincipal.my_path+'Reportes_alarmex.rav'
          else
              RVP.ProjectFile:=uprincipal.my_path+'Reportes_sysalarm.rav';

        rvsystem2.DefaultDest:=rdfile;
        RvSystem2.DoNativeOutput:=false;
        RvSystem2.RenderObject:=RvRenderPDF1;
        RvSystem2.OutputFileName:=SDArchivo.FileName;
        rvp.Engine:=rvsystem2;
        rvp.ExecuteReport(NombreReporte);
        rvp.Close;
        //ShowMessage('File : '+SDArchivo.FileName);
        Launcher.FileName := SDArchivo.FileName;
        Launcher.Launch;
      end
      else
        ShowMessage('Cancelo la operacion de guardar archivo.');
      SDArchivo.Free;
    end;   //rave

    if TipoReporteador = 1 then     // BUILDER
    begin
      ppReport.Template.DatabaseSettings.Name := NombreReporte;
      ppReport.Template.LoadFromDatabase;
      ppReport.AllowPrintToFile := True;
      if SDArchivo.Execute then
      begin
        ppReport.ShowPrintDialog := false;
        ppReport.TextFileName := SDArchivo.FileName;
        if SDArchivo.FilterIndex = 1 then
          ppReport.DeviceType :=  'PDFFile'
        else
          ppReport.DeviceType :=  'ExcelFile';
        ppReport.Print;
        Launcher.FileName := SDArchivo.FileName;
        Launcher.Launch;
      end
      else
        ShowMessage('Cancelo la operacion de guardar archivo.');
      SDArchivo.Free;
    end;    // Builder
  end; //arc

  if TipoImpresion = 'XLSD' then
    if TipoReporteador = 1 then     // BUILDER
    begin
      ppReport.Template.DatabaseSettings.Name := NombreReporte;
      ppReport.Template.LoadFromDatabase;
      ppReport.AllowPrintToFile := True;
      ppReport.ShowPrintDialog := false;
      ppReport.TextFileName := uprincipal.my_path+NombreReporte+frmprincipal.idmaq+'.xls';
      ppReport.DeviceType :=  'ExcelFile';
      ppReport.Print;
    end;    // Builder
end;//with
dmreportes.sqlDatosEmpresa.Close;
end;

procedure bpcambios(tabla, clave, idtipo:string);
var sqlgen: TmyQuery;
begin
sqlgen:=tmyquery.Create(nil);
sqlgen.Connection := dmaccesos.conexion;
querys('DROP table If exists tmpCambios'+frmprincipal.idmaq, 1, sqlgen);
querys('Create Table tmpCambios'+frmprincipal.idmaq+' Select * from '+tabla+' where '+idtipo+'='+quotedstr(clave), 1, sqlgen);
sqlgen.Free;
end;

procedure apcambios(idtipo, clave, tabla, pantalla:string);
var
  i:integer;
  sqlanterior, sqlcambio, sqlactual, sqlins: TmyQuery;
  anterior, actual:variant;
begin
//NullStrictConvert := false;
sqlanterior:=tmyquery.Create(nil);
sqlanterior.Connection := dmaccesos.conexion;
sqlcambio:=tmyquery.Create(nil);
sqlcambio.Connection := dmaccesos.conexion;
sqlactual:=tmyquery.Create(nil);
sqlactual.Connection := dmaccesos.conexion;
sqlins:=tmyquery.Create(nil);
sqlins.Connection := dmaccesos.conexion;

querys('Select * from tmpCambios'+frmprincipal.idmaq+' where '+idtipo+'='+quotedstr(clave), 0, sqlanterior);
querys('Select * from '+tabla+' where '+idtipo+'='+quotedstr(clave), 0, sqlactual);
sqlanterior.First;
sqlactual.First;

while not sqlanterior.eof = true do
  begin
  for i:=0 to sqlanterior.FieldCount-1 do
    begin
    {if (sqlanterior.Fields.Fields[i].AsVariant = NULL) then
       //anterior := ''
       anterior := sqlanterior.Fields.Fields[i].AsVariant
    else    }
       anterior := sqlanterior.Fields.Fields[i].AsVariant;

    {if (sqlactual.Fields.Fields[i].AsVariant = NULL) then
       //actual := ''
       actual :=  sqlactual.Fields.Fields[i].AsVariant
    else        }
       actual := sqlactual.Fields.Fields[i].AsVariant;

    if anterior <> actual then
      begin

      {querys('Insert into Cambios (idcambio, idprimario, pantalla, tabla, campo, anterior, usuario, fecha, hora, nuevo) '+
             'Select if(idcambio is null, 1, max(idcambio)+1) as idcambio, "'+clave+'", "'+pantalla+'", "'+tabla+'", "'+
             sqlanterior.Fields.Fields[i].FieldName+'", "'+anterior+'","'+frmprincipal.ucprincipal.CurrentUser.loginname+
             '", "'+formatdatetime('yyyy/MM/dd', date)+'", "'+Formatdatetime('HH:mm:ss',time)+'", "'+actual+'" '+
             'from Cambios',1,sqlins);}
      if anterior=null then
        anterior:='';
      if actual=null then
        anterior:='';
      querys('Select max(idcambio) as total from Cambios', 0, sqlcambio);
      querys('Insert into Cambios set idcambio='+quotedstr(inttostr(sqlcambio.fieldbyname('total').asinteger+1))+', idprimario='+quotedstr(clave)+', tabla='+quotedstr(tabla)+
             ', anterior='+quotedstr(anterior)+',nuevo='+quotedstr(actual)+', usuario='+quotedstr(frmprincipal.ucprincipal.CurrentUser.loginname)+', fecha='+quotedstr(datetostr(date))+
             ',hora='+quotedstr(timetostr(time))+', campo='+quotedstr(sqlanterior.Fields.Fields[i].FieldName)+', pantalla='+quotedstr(pantalla),1,sqlins);
      end;
    end;
  sqlactual.Next;
  sqlanterior.Next;
  end;

querys('DROP table If exists tmpCambios'+frmprincipal.idmaq, 1, sqlins);
  sqlanterior.Free;
  sqlcambio.Free;
  sqlactual.Free;
  sqlins.Free;
 // NullStrictConvert := true;
end;

function Pascua(Anio: word): TDateTime;
var
  a, b, c, d, e, f, g, h, i, k, l, m, n: word;
  Mes, Dia: word;
begin
  { Devuelve la fecha del año en la que cae la Pascua de Resurrección.
    Se utiliza para ello el Algoritmo de Butcher }
  a := anio mod 19;
  b := anio div 100;
  c := anio mod 100;
  d := b div 4;
  e := b mod 4;
  f := (b + 8) div 25;
  g := (b - f + 1) div 3;
  h := (19 * a + b - d - g + 15) mod 30;
  i := c div 4;
  k := c mod 4;
  l := (32 + 2 * e + 2 * I - h - k) mod 7;
  m := (a + 11 * h - 22 * l) div 451;
  n := h + l - 7 * m + 114;
  Mes := n div 31;
  Dia := 1 + n mod 31;
 
  Result := EncodeDate(Anio, Mes, Dia);
end;

function DiaFestivo(fecha:TDate):boolean;
var a, m, d:word; sqlgeneral:TMyquery; i,j:integer;        // , b
begin
sqlgeneral := TMyQuery.Create(nil);
sqlgeneral.Connection := DMAccesos.conexion;
DecodeDate(fecha,a, m, d);
if querys('select dia, cambio, diasemana, semanames, semestral from DiasFestivos where mes ='+inttostr(m), 0, sqlgeneral) > 0 then
  begin
  sqlgeneral.First;
  while not sqlgeneral.Eof = true do
    begin
    if sqlgeneral.FieldByName('cambio').AsBoolean = false then
      begin
      if fecha = EncodeDate(a, m, sqlgeneral.FieldByName('dia').AsInteger) then
        begin
        if sqlgeneral.FieldByName('semestral').AsBoolean = true then
          begin
          if a > 2000 then
            begin
            if ((a-2000) mod 6) = 0 then
              begin
              result := true;
              exit;
              end
            else
              result := false;
            end
          else
            result := false;
          end
        else
          begin
          result := true;
          exit;
          end;
        end
      else
        result := false;
      end
    else
      begin
      i:= 0; j:=0;
      repeat
      inc(i);
      if DayOfWeek(EncodeDate(a, m, i)) = 2 then
        inc(j);      
      until(DayOfWeek(EncodeDate(a, m, i)) = 2) and (j=sqlgeneral.FieldByName('semanames').AsInteger);
      if EncodeDate(a, m, i) = fecha then
        begin
        result := true;
        exit;
        end
      else
        result := false;
      end;
    sqlgeneral.Next;
    end;
  end
else
  result := false;
sqlgeneral.Free;
end;


function DiasHabiles(fecha1, fecha2:TDate):integer;
var  hab:integer; fecha:tdate;
begin
    hab := 0;
    fecha := fecha1;
    repeat
      if DayOfTheWeek(fecha) <> 7 then
        if DiaFestivo(fecha) = false then
          if incday(Pascua(yearof(fecha)),-2) <> fecha then
            inc(hab);
      fecha := IncDay(fecha, 1);
      until (fecha=IncDay(fecha2, 1));
    result := hab;
end;

function DiasHabilesMes(ano, mes:integer):integer;
var  dm, hab, i:integer;
begin
dm := DaysInAMonth(ano, mes);
    hab := 0;
    for i:=1 to dm do
      begin
      if DayOfTheWeek(EncodeDate(ano, mes, i)) <> 7 then
        inc(hab);
      end;
    result := hab;
end;

function DiasHabilesMesAFecha(fecha:tdate):integer;
var  hab, i :integer;  dm, y, m:word;
begin
DecodeDate(fecha, y, m, dm);
    hab := 0;
    for i:=1 to dm do
      begin
      if DayOfTheWeek(EncodeDate(y, m, i)) <> 7 then
        inc(hab);
      end;
    result := hab;
end;

function CorreoGerentes:String;
var cadena:string;
//i:Integer;
begin
with dmreportes do
  begin
  querys('select email1 from usuarios as u left join puestos as p on(p.idpuesto=u.idpuesto) where p.nombre="GERENTE" and (email1 <> "")', 0, sqlgeneral8);
  sqlgeneral8.First;
  cadena := dmreportes.sqlgeneral8.fieldbyname('email1').asstring;
  sqlgeneral8.Next;
  while not sqlgeneral8.Eof = true do
    begin
    cadena := cadena+', '+dmreportes.sqlgeneral8.fieldbyname('email1').asstring;
    sqlgeneral8.Next;
    end;
  end;
result:=cadena;
end;

function CorreoUsuarios(condicion:string):String;
var cadena:string;
begin
with dmreportes do
  begin
  querys('select email1 from usuarios as u left join puestos as p on(p.idpuesto=u.idpuesto) '+
         'left join areas as a on a.idarea = u.idarea where email1 <> "" '+condicion, 0, sqlgeneral8);
  sqlgeneral8.First;
  cadena := dmreportes.sqlgeneral8.fieldbyname('email1').asstring;
  sqlgeneral8.Next;
  while not sqlgeneral8.Eof = true do
    begin
    cadena := cadena+', '+dmreportes.sqlgeneral8.fieldbyname('email1').asstring;
    sqlgeneral8.Next;
    end;
  end;
result:=cadena;
end;

procedure EventosPositivosOxxos(dfecha1,dfecha2:string);
var
sqlgeneral:TMyQuery;
begin
sqlgeneral := tmyquery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
  querys('DROP TABLE IF EXISTS TmpEventosPosCta'+frmprincipal.idmaq,1,sqlgeneral);
  //querys('CREATE TABLE TempEventosPos'+frmprincipal.idmaq+' (concepto varchar(100),total decimal default 0,id integer default 0)',1,sqlgeneral);

  querys('CREATE TABLE TmpEventosPosCta'+frmprincipal.idmaq+' (idcliente int(11)  default 0,  ap int(21)  default 0,  RobosPos int(21)  default 0,nombre varchar(254) default NULL,status varchar(200) default Null,  activacion double(17,0) default 0, '+
         ' detenidos double(17,0) default 0,  danos double(17,0) default 0,'+
         ' mercancia double(17,0) default 0,  asistencias int(21)  default 0,  total int(21)  default 0,  Intento int(21)  default 0, '+
         ' Asaltos int(21)  default 0,  Incendios int(21)  default 0, medicas int(21)  default 0, aa int(21)  default 0,fa int(21)  default 0,'+
         ' contacto varchar(254)  default null) ',1,sqlgeneral);

   querys('Insert into TmpEventosPosCta'+frmprincipal.idmaq+' (idcliente,nombre)   Select c.idcliente, if(c.rsocial is NULL or c.rsocial="", if(c.apaterno is NULL or c.apaterno="", c.nombre,'+
          ' if(c.amaterno is NULL or c.amaterno="", concat(c.nombre, " ", c.apaterno), concat(c.nombre, " ", c.apaterno, " ", c.amaterno))), c.rsocial) as nombre from clientes as c where c.estatus = 1 having nombre like  "%'+'oxxo'+'%" order by idcliente',1,sqlgeneral);

   querys('Select sk.idcliente, if(sk.conclusion =1, count(sk.id) ,0) as ap, if(sk.conclusion =2, count(sk.idcliente) ,0) as aa, if(sk.conclusion =3, count(sk.id) ,0) as fa, if(ap.activacion is null,0, sum(ap.activacion)) as activacion, '+
           ' if(ap.detenidos is null, 0, sum(ap.detenidos)) as detenidos, if(ap.danos is null, 0, sum(ap.danos)) as danos, '+
           //' if(ap.mercancia is null, 0, sum(ap.mercancia)) as mercancia, '+
           'if(ap.activacion =5, count(sk.id),if(ap.mercancia is null, 0, sum(ap.mercancia))) as mercancia, '+

           'count(sk.id) as total, if(ap.activacion = 0, count(ap.activacion), 0) as Intento, '+
           ' if(ap.activacion = 1, count(ap.activacion), 0) as RobosPos, if(ap.activacion = 2, count(ap.activacion), 0) as Asaltos, '+
          '   if(ap.activacion = 3, count(ap.activacion), 0) as Incendios, if(ap.activacion = 4, count(ap.activacion), 0) as medicas from sk_alarmas as sk inner join TmpEventosPosCta'+frmprincipal.idmaq+' as t on(t.idcliente= sk.idcliente) left join ActivPos as ap on ap.idsk=sk.id '+
          'where  sk.fecha_pc between "'+dfecha1+'" and "'+dfecha2+'" AND sk.conclusion in(1,2,3) group by sk.idcliente,conclusion',0,sqlgeneral);
   while not sqlgeneral.eof do
      begin

           querys('Update  TmpEventosPosCta'+frmprincipal.idmaq+' set ap = ap + '+sqlgeneral.fieldbyname('ap').asstring+',aa = aa+ '+sqlgeneral.fieldbyname('aa').asstring+',fa=fa+'+sqlgeneral.fieldbyname('fa').asstring+', activacion = activacion +'+sqlgeneral.fieldbyname('activacion').asstring+', '+
                  'detenidos = detenidos + '+sqlgeneral.fieldbyname('detenidos').asstring+',danos = danos+ '+sqlgeneral.fieldbyname('danos').asstring+' ,mercancia = mercancia+'+sqlgeneral.fieldbyname('mercancia').asstring+',total = total+ '+sqlgeneral.fieldbyname('total').asstring+',  '+
                  'Intento = Intento + '+sqlgeneral.fieldbyname('Intento').asstring+',RobosPos = RobosPos +'+sqlgeneral.fieldbyname('RobosPos').asstring+' ,Asaltos =Asaltos + '+sqlgeneral.fieldbyname('Asaltos').asstring+' ,Incendios = Incendios +'+sqlgeneral.fieldbyname('Incendios').asstring+', '+
                  ' medicas =medicas +  '+sqlgeneral.fieldbyname('medicas').asstring+'  where idcliente = '+sqlgeneral.fieldbyname('idcliente').asstring,1,dmreportes.sqlgeneral2);
      sqlgeneral.next;
      end;
   querys('DROP TABLE IF EXISTS tmpasaltos'+frmprincipal.idmaq,1,sqlgeneral);
   querys('create table tmpasaltos'+frmprincipal.idmaq+' Select sk.idcliente, if(ap.activacion = 0, 1, 0) as Intento, if(ap.activacion = 1, 1, 0) as RobosPos, if(ap.activacion = 2, 1, 0) as Asaltos, if(ap.activacion = 3, 1, 0) as Incendios, '+
          ' if(ap.activacion = 4, 1, 0) as medicas from sk_alarmas as sk inner join TmpEventosPosCta'+frmprincipal.idmaq+' as t on(t.idcliente= sk.idcliente) left join ActivPos as ap on ap.idsk=sk.id where  sk.fecha_pc between "'+dfecha1+'" and "'+dfecha2+'"  AND sk.conclusion in(1) ', 1, sqlgeneral);
   querys('Select idcliente, sum(Intento) as Intento, sum(RobosPos) as RobosPos, sum(Asaltos) as Asaltos, (Incendios) as Incendios, sum(medicas) as medicas from tmpasaltos'+frmprincipal.idmaq+' group by idcliente',0,sqlgeneral );
   while not sqlgeneral.eof do
      begin
           querys('Update  TmpEventosPosCta'+frmprincipal.idmaq+' set Intento='+sqlgeneral.fieldbyname('Intento').asstring+', RobosPos='+sqlgeneral.fieldbyname('RobosPos').asstring+', Asaltos='+sqlgeneral.fieldbyname('Asaltos').asstring+', Incendios='+sqlgeneral.fieldbyname('Incendios').asstring+', medicas ='+sqlgeneral.fieldbyname('medicas').asstring+'  where idcliente = '+sqlgeneral.fieldbyname('idcliente').asstring,1,dmreportes.sqlgeneral2);
           sqlgeneral.next;
      end;
  querys('DROP TABLE IF EXISTS tmpasaltos'+frmprincipal.idmaq,1,sqlgeneral);
  querys('select count(t.aid) as asistencias,sk.idcliente as idcliente  from sk_alarmas as sk inner join TmpEventosPosCta'+frmprincipal.idmaq+' as t1 on(t1.idcliente= sk.idcliente) INNER join tiempo_respuesta as t on t.aid=sk.id where sk.fecha_pc between "'+dfecha1+'" and "'+dfecha2+'" AND sk.conclusion in(1,2,3) group by sk.idcliente',0,sqlgeneral);
   while not sqlgeneral.eof do
      begin
           querys('Update TmpEventosPosCta'+frmprincipal.idmaq+' set asistencias = '+
           //'asistencias +  '+
           sqlgeneral.fieldbyname('asistencias').asstring+'  where idcliente = '+sqlgeneral.fieldbyname('idcliente').asstring,1,dmreportes.sqlgeneral2);
           sqlgeneral.next;
      end;



  //querys('',1,sqlgeneral);
           {' (idcliente int(11),Nombre varchar(255), estatus int(11),'+
         'activacion int(11), concepto varchar(60), detenidos int(11), danos int(11), total int(11), '+
         'Intento int(11), RobosPos int(11), Asaltos int(11), Incendios int(11), medicas int(11), ap int(11), '+
         'aa int(11), fa int(11)) '+}
  {
  querys('CREATE TABLE TmpEventosPosCta'+frmprincipal.idmaq+' '+

         'Select sk.idcliente, if(c.rsocial is NULL or c.rsocial="", if(c.apaterno is NULL or c.apaterno="", '+
         'c.nombre, if(c.amaterno is NULL or c.amaterno="", concat(c.nombre, " ", c.apaterno), concat(c.nombre'+
         ', " ", c.apaterno, " ", c.amaterno))), c.rsocial) as nombre, ac.status, '+
         ' if(activacion is null,0, sum(activacion)) as activacion, if(detenidos is null, 0, sum(detenidos)) as detenidos, '+
         'if(danos is null, 0, sum(danos)) as danos, if(mercancia is null, 0, sum(mercancia)) as mercancia, '+
         'count(t.aid) as asistencias, count(sk.id) as total, if(activacion = 0, count(activacion), '+
         '0) as Intento,  if(activacion = 1, count(activacion), 0) as RobosPos, if(activacion = 2, '+
         'count(activacion), 0) as Asaltos,  if(activacion = 3, count(activacion), 0) as Incendios, if(activacion '+
         '= 4, count(activacion), 0) as medicas, if(ac.status="ACTIVACION POSITIVA", count(sk.id) ,0) as ap, '+
         'if(ac.status="ACTIVACION ACCIDENTAL", count(sk.id) ,0) as aa, if(ac.status="FALSA ALARMA", count(sk.id),0) '+
         'as fa, ''SIN ASESOR                                                        '' as contacto from  sk_alarmas as sk left join clientes as c on c.idcliente = sk.idcliente left join alarmas_conclusion '+
         'as ac on (sk.conclusion=ac.id) left join ActivPos as ap on ap.idsk=sk.id left join tiempo_respuesta as t on '+
         't.aid=sk.id where sk.fecha_pc between "'+dfecha1+'" and "'+dfecha2+'" and ac.status in("ACTIVACION POSITIVA", '+
         '"ACTIVACION ACCIDENTAL", "FALSA ALARMA") '+
         'group by sk.idcliente, ap.id having nombre like "%'+'oxxo'+'%" order by sk.idcliente', 1, sqlgeneral);
         //'group by sk.idcliente, activacion having nombre like "%'++'%" order by sk.idcliente', 1, sqlgeneral);
                   }
       //ALTER TABLE temp_contratos0'+frmprincipal.idmaq+' CHANGE D'+y+' '+inttostr(dayof(FechaConciliacion))+mes+'  double ',1,sqlgeneral);
         //querys('update TmpEventosPosCta'+frmprincipal.idmaq+' as t1,TmpEventosPosCta'+frmprincipal.idmaq+' as t2,clientes as c,contactos as ct set t1.contacto = ct.idcontador  where ct.relacion like "%asesor%" group by  ct.idcontacto,t.idcliente'

         {
         querys('Select distinct t.idcliente as idcliente,ct.idcontador as contador,if(ct.apaterno '+
                 'is NULL or ct.apaterno="", ct.nombre, if(ct.amaterno is NULL or ct.amaterno="", concat(ct.nombre, " ", ct.apaterno), concat(ct.nombre, " ",'+
                 ' ct.apaterno, " ", ct.amaterno))) as contacto  from TmpEventosPosCta'+frmprincipal.idmaq+' as t left join clientes as c on c.idcliente=t.idcliente left Join contactos as ct ON (c.idcontacto=ct.idcontacto) '+
                ' where ct.relacion like "%asesor%" group by  ct.idcontacto,t.idcliente ',0,sqlgeneral);
        while not sqlgeneral.Eof do
          begin
               querys(' update TmpEventosPosCta'+frmprincipal.idmaq+' set contacto ='+''''+sqlgeneral.fieldbyname('contacto').AsString+''' where idcliente =  '+sqlgeneral.fieldbyname('idcliente').AsString,1,dmreportes.sqlgeneral2);
              sqlgeneral.Next;
          end;
          }

         //querys('update TmpEventosPosCta'+frmprincipal.idmaq+' as t1,TmpEventosPosCta'+frmprincipal.idmaq+' as t2,clientes as c,contactos as ct set t1.contacto = ct.idcontador  where ct.relacion like "%asesor%" group by  ct.idcontacto,t.idcliente'
         querys('Select distinct t.idcliente as idcliente,ct.idcontador as contador,if(ct.apaterno '+
                 'is NULL or ct.apaterno="", ct.nombre, if(ct.amaterno is NULL or ct.amaterno="", concat(ct.nombre, " ", ct.apaterno), concat(ct.nombre, " ",'+
                 ' ct.apaterno, " ", ct.amaterno))) as contacto  from TmpEventosPosCta'+frmprincipal.idmaq+' as t left join clientes as c on c.idcliente=t.idcliente left Join contactos as ct ON (c.idcontacto=ct.idcontacto) '+
                ' where (ct.relacion like "%asesor%" or cargo like "%asesor%" ) group by  ct.idcontacto,t.idcliente ',0,sqlgeneral);
        while not sqlgeneral.Eof do
          begin
               querys(' update TmpEventosPosCta'+frmprincipal.idmaq+' set contacto ='+''''+sqlgeneral.fieldbyname('contacto').AsString+''' where idcliente =  '+sqlgeneral.fieldbyname('idcliente').AsString,1,dmreportes.sqlgeneral2);
              sqlgeneral.Next;
          end;

                   {
  querys('Select  "'+dfecha1+'" AS f1, "'+dfecha2+'" as f2,t.idcliente, t.Nombre, status, sum(detenidos) as detenidos, sum(danos) as danos, sum(total) as total, '+
         'sum(Intento) as Intento, sum(RobosPos) as RobosPos, sum(Asaltos) as Asaltos, sum(Incendios) as Incendios, '+
         'sum(medicas) as Medicas, sum(ap) as ap, sum(aa) as aa, sum(fa) as fa, sum(asistencias) as asistencias, sum(mercancia) as Mercancias, if(ct.apaterno '+
         'is NULL or ct.apaterno="", ct.nombre, if(ct.amaterno is NULL or ct.amaterno="", concat(ct.nombre, " ", ct.apaterno), concat(ct.nombre, " ",'+
         ' ct.apaterno, " ", ct.amaterno))) as contacto '+
         'from TmpEventosPosCta'+frmprincipal.idmaq+' as t  '+
         'left Join contactos as ct ON t.id_contacto=ct.idcontador '+
         'group by t.idcliente order by contacto,t.idcliente', 0, dmreportes.sqlgeneral);

         }

  querys('Select  "'+dfecha1+'" AS f1, "'+dfecha2+'" as f2,t.idcliente, t.Nombre, status, sum(detenidos) as detenidos, sum(danos) as danos, sum(total) as total, '+
         'sum(Intento) as Intento, sum(RobosPos) as RobosPos, sum(Asaltos) as Asaltos, sum(Incendios) as Incendios, '+
         'sum(medicas) as Medicas, sum(ap) as ap, sum(aa) as aa, sum(fa) as fa, sum(asistencias) as asistencias, sum(mercancia) as Mercancias,  contacto '+
         'from TmpEventosPosCta'+frmprincipal.idmaq+' as t  '+
         'group by t.idcliente order by contacto,t.idcliente', 0, dmreportes.sqlgeneral);

  end;

function UsuarioNombre(tablanombre:string):string;
begin
result := 'if('+tablanombre+'.apaterno is NULL or '+tablanombre+'.apaterno="", '+tablanombre+'.nombre, if('+tablanombre+'.amaterno is NULL or '+tablanombre+'.amaterno="", concat('+
          tablanombre+'.nombre, " ", '+tablanombre+'.apaterno), concat('+tablanombre+'.nombre, " ", '+tablanombre+'.apaterno, " ", '+tablanombre+'.amaterno)))';
end;

function ClienteNombre(tablanombre:string):string;
begin
result := 'if('+tablanombre+'.rsocial is NULL or '+tablanombre+'.rsocial="", if('+tablanombre+'.apaterno is NULL or '+tablanombre+'.apaterno="", '+tablanombre+'.nombre, if('+tablanombre+'.amaterno is NULL or '+tablanombre+'.amaterno="", '+
          'concat('+tablanombre+'.nombre, " ", '+tablanombre+'.apaterno), concat('+tablanombre+'.nombre, " ", '+tablanombre+'.apaterno, " ", '+tablanombre+'.amaterno))), '+tablanombre+'.rsocial)';

end;

function GetIVA:double;
var
sqlgeneral:TMyQuery;
begin
if(IVA_Configuraciones = 0 ) then
 begin
    sqlgeneral := tmyquery.Create(nil);
    sqlgeneral.Connection := dmaccesos.conexion;
      if querys('Select valor from configuraciones where concepto = "IVA"', 0, sqlgeneral) > 0 then
         IVA_Configuraciones := sqlgeneral.fieldbyname('valor').AsFloat
      else
        begin
          querys('Insert into configuraciones (concepto, valor) values ("IVA", "0.11")', 1, sqlgeneral);
          IVA_Configuraciones := 0.11;
      end;

end;
         result := IVA_Configuraciones;
end;

function ActualUserId:Integer;
  var sqlgeneral:TMyQuery;
begin
sqlgeneral := tmyquery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
querys('select idusuario from usuarios as u left join UCTabUsers as uc on uc.UCIdUser=u.idusuario where UCLogin="'+frmprincipal.ucprincipal.CurrentUser.LoginName+'"', 0, sqlgeneral);
result := sqlgeneral.fieldbyname('idusuario').asinteger;
end;

function RecargosMonitoreo:string;
  var sqlgeneral:TMyQuery;
begin
sqlgeneral := tmyquery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
querys('Select valor from configuraciones where concepto = "RecargosMonitoreo"', 0, sqlgeneral);
result := sqlgeneral.fieldbyname('valor').AsString;
end;

function InteresesEquipo:string;
  var sqlgeneral:TMyQuery;
begin
sqlgeneral := tmyquery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
querys('Select valor from configuraciones where concepto = "InteresesEquipo"', 0, sqlgeneral);
result := sqlgeneral.fieldbyname('valor').AsString;
end;

function Reconexion:string;
  var sqlgeneral:TMyQuery;
begin
sqlgeneral := tmyquery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
querys('Select valor from configuraciones where concepto = "Reconexion"', 0, sqlgeneral);
result := sqlgeneral.fieldbyname('valor').AsString;
end;

function idmes(mes:string):integer;
var i:integer;
begin
result := 0;
for i:=1 to 12 do
  begin
  if uppercase(meses[i]) = uppercase(mes) then
    begin
    result := i;
    exit;
    end;
  end;
end;


procedure RepAbonosXCuenta(cuenta1,cuenta2,ano,TipoImpresion:string;actualizar:bool);
var fecha1,fecha2,sql,inicio:string;   //,mes
//    p, q: PChar;      n,  i: integer;
   function OcurrenciaWord(const str: string; const substr: string): integer;
  // Devuelve la cantidad de veces que una subcadena está en una cadena
  var
    p, q: PChar;
    n: integer;
  begin
    Result := 0;
    n := Length(substr);
    if n = 0 then exit;
    q := PChar(Pointer(substr));
    p := PChar(Pointer(str));
    while p <> nil do
        begin
             p := StrPos(p, q);
             if p <> nil then
              begin
                inc(Result);
                inc(p, n);
              end;
        end;
    end;
begin
  fecha1 := '';
  fecha2 := '';
  //i := 0;
  with dmreportes do
  begin
    //if (actualizar) then
    //begin
      //mes := formatdatetime('m',);
      i := strtoint(formatdatetime('m',now));
      fecha1 := formatdatetime('yyyy"/"mm"/"',now) +'/01';
      fecha2 := formatdatetime('yyyy"/"mm"/"dd',now) ;
       {
      mes := formatdatetime('m',);
      i := strtoint(mes);
      fecha1 := cboano.Text +'/'+ formatdatetime('mm',now)+'/01';
      fecha2 := formatdatetime('yyyy"/"mm"/"dd',now);
                 }
//############################################################################################3
      {querys('select sum(pc.abono) as abono,pc.idcliente as cuenta,month(pc.FechaAlta) as mes from PagosClientes as pc left join pedidos as p on(pc.idpedido=p.idpedido) '+
             ' where pc.FechaAlta between '+quotedstr(fecha1)+' and '+quotedstr(fecha2)+' and  p.estatus in(3,4,6) and p.idcliente between '+cuenta1+' and '+cuenta2+' and pc.movimiento in(0,2) group by pc.idcliente,mes order by pc.idcliente ',0,sqlgeneral2);
             //' where pc.FechaAlta between "2007/01/01" and "2007/11/20" and  p.estatus in(3,4) and pc.movimiento in(0,2)  group by pc.idcliente,mes order by pc.idcliente ',0,sqlgeneral2);
      ///hacer tabla para mostrar en reporte....
      while not sqlgeneral2.eof do
      begin
        if sqlgeneral2.fieldbyname('cuenta').AsString <> '' then
        begin
          querys('select idcliente from  ConcentradoAbonosxCuenta where idcliente='+quotedstr(sqlgeneral2.fieldbyname('cuenta').AsString)+' and year='+ano,0,sqlgeneral3);
          if sqlgeneral3.fieldbyname('idcliente').AsString <> '' then
            querys('Update ConcentradoAbonosxCuenta set M'+sqlgeneral2.fieldbyname('mes').AsString+'='+quotedstr(sqlgeneral2.fieldbyname('abono').AsString)+',total='+quotedstr(sqlgeneral2.fieldbyname('abono').AsString)+' +  total where idcliente ='+sqlgeneral2.fieldbyname('cuenta').AsString+' and year ='+ano+' ',1,sqlgeneral3)
          else
            querys('Insert into ConcentradoAbonosxCuenta (idcliente,M'+sqlgeneral2.fieldbyname('mes').AsString+',total,year) values('+quotedstr(sqlgeneral2.fieldbyname('cuenta').AsString)+','+quotedstr(sqlgeneral2.fieldbyname('abono').AsString)+','+quotedstr(sqlgeneral2.fieldbyname('abono').AsString)+','+ano+')',1,sqlgeneral3);
        end;
        sqlgeneral2.Next;
      end;
      querys('update ConcentradoAbonosxCuenta set total = M1+M2+M3+M4+M5+M6+M7+M8+M9+M10+M11+M12 where year ='+ano,1,sqlgeneral);
      //}
      // En esta parte vamos hacer los calculos para deternimar por lineas cuanto se apagado por mes .....
      {
      BorrarTablasPagosTemp;
      querys('Select nombre from lineas',0,sqlgeneral);
      while not sqlgeneral.eof do
      begin
      querys('Select Linea from ConcentradoAbonosxL where Linea ='+quotedstr(sqlgeneral.fieldbyname('nombre').AsString)+' and year='+cboano.Text,1,sqlgeneral3);
      if sqlgeneral3.fieldbyname('Linea').asstring = '' then
      begin
        querys('Insert into ConcentradoAbonosxL (Linea,year) values('+quotedstr(sqlgeneral.fieldbyname('nombre').AsString)+','+cboano.Text+')',1,sqlgeneral3);
      end;
      sqlgeneral.next;
      end;
      querys('CREATE TABLE temporalpagos'+frmprincipal.idmaq+' SELECT a.inventariable,dp.id,p.idcliente,dp.idpedido,l.nombre,a.moneda,if ( (truncate(((dp.costo*dp.tc)*1.1)*dp.cant,3) > p.TotMn),p.TotMn,(truncate(((dp.costo*dp.tc)*1.1)*dp.cant,3)) ) as TOTAL,'+
                 'if((round(((((dp.costo*dp.tc)*1.1)*dp.cant)*100)/p.TotMn,2)) > 100,100,(round(((((dp.costo*dp.tc)*1.1)*dp.cant)*100)/p.TotMn,2)) ) as Porcentaje,p.TotMn,month(pc.FechaAlta) as Mes '+
                 ' FROM DetPedido as dp LEFT JOIN pedidos as p ON (p.idpedido=dp.idpedido) LEFT JOIN articulos as a  ON (a.cod_cve=dp.cod_cve) LEFT JOIN lineas as l ON (l.idlinea=a.idlinea) LEFT JOIN '+
                 ' PagosClientes as pc ON (pc.idpedido = dp.idpedido) WHERE pc.FechaAlta between ''2006/01/01'' and ''2006/06/31'' and p.estatus in(3,4) and pc.movimiento in(0,2) and pc.abono > 0  GROUP BY dp.id ORDER BY dp.idpedido',1,sqlgeneral2);
      querys('Create Index idpedido on temporalpagos'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);
      //querys('CREATE TABLE temporalpagos100'+frmprincipal.idmaq+' SELECT pc.idpedido,sum(pc.abono) as abono FROM PagosClientes as pc  WHERE pc.FechaAlta between ''2006/01/01'' and ''2006/06/31'' and pc.movimiento in(0,2) and pc.abono> 0 GROUP BY idpedido',1,sqlgeneral2);
      //          querys('CREATE TABLE temporalpagos3'+frmprincipal.idmaq+' SELECT idpedido,sum(abono) as abono FROM temporalpagos100'+frmprincipal.idmaq+' group by idpedido',1,sqlgeneral2);
      querys('CREATE TABLE temporalpagos3'+frmprincipal.idmaq+' SELECT pc.idpedido,sum(pc.abono) as abono FROM PagosClientes as pc  WHERE pc.FechaAlta between ''2006/01/01'' and ''2006/06/31'' and pc.movimiento in(0,2) and pc.abono> 0 GROUP BY idpedido',1,sqlgeneral2);
      querys('Create Index idpedido on temporalpagos3'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);
      //tercero de la tabla temporal creamos otra pero ya con totalse por linea
      querys('CREATE TABLE temporalpagos2'+frmprincipal.idmaq+' SELECT idcliente,idpedido,nombre,sum(TOTAL)AS TOTAL,TotMn,Mes FROM temporalpagos'+frmprincipal.idmaq+' GROUP BY nombre,idpedido ORDER BY idpedido',1,sqlgeneral2);
      querys('CREATE INDEX idpedido on temporalpagos2'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);
      {
        //creamos otra tabla donde se mostrara el reporte
        querys('CREATE TABLE temporalpagos4'+frmprincipal.idmaq+' SELECT t2.idcliente,t2.idpedido,t3.abono,'+
                  'if (t3.abono <> '''',t3.abono,0) as MONITOREO,if (t3.abono <> '''',t3.abono,0) as INTERESES,if (t3.abono <> '''',t3.abono,0) as SERVICIO,if (t3.abono <> '''',t3.abono,0) as EQUIPO,if (t3.abono <> '''',t3.abono,0) as OTROS '+
                  'FROM temporalpagos2'+frmprincipal.idmaq+' as t2 LEFT JOIN temporalpagos3'+frmprincipal.idmaq+' as t3 ON (t3.idpedido=t2.idpedido) where abono <=0 GROUP BY t2.nombre,t2.idpedido ORDER BY t2.idpedido',1,sqlgeneral2);
        querys('Create Index idpedido on temporalpagos4'+frmprincipal.idmaq+' (idpedido)',1,sqlgeneral2);

        ///ahora insertamos a la tabla el pedido para poder comparar
        querys('INSERT INTO temporalpagos4'+frmprincipal.idmaq+' (idpedido,) SELECT idpedido FROM temporalpagos2'+frmprincipal.idmaq+' GROUP BY idpedido ORDER BY idpedido',1,sqlgeneral2);
        }
        {
          querys('SELECT t2.nombre as linea,ROUND((((t2.TOTAL*100)/t2.TotMn)/100)*t3.abono,2) as resultado,Mes '+
                 ' FROM temporalpagos2'+frmprincipal.idmaq+' as t2 LEFT JOIN temporalpagos3'+frmprincipal.idmaq+' as t3 ON (t3.idpedido=t2.idpedido) WHERE abono >0 GROUP BY t2.nombre,t2.idpedido ORDER BY t2.idpedido ',0,sqlgeneral);      //GROUP BY t2.nombre,mes
          while not sqlgeneral.Eof do begin
          querys('UPDATE ConcentradoAbonosxL SET m'+sqlgeneral.fieldbyname('Mes').AsString+'=m'+sqlgeneral.fieldbyname('Mes').AsString+'+'+quotedstr(sqlgeneral.fieldbyname('resultado').AsString)+' WHERE Linea='+quotedstr(sqlgeneral.fieldbyname('linea').AsString)+' and year ='+cboano.Text,1,sqlgeneral2);
                //querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET idcliente='+quotedstr(sqlgeneral.fieldbyname('cliente').AsString)+' ,'+sqlgeneral.fieldbyname('linea').AsString+'=('+quotedstr(sqlgeneral.fieldbyname('linea').AsString)+'  +  '+quotedstr(sqlgeneral.fieldbyname('resultado').AsString)+' ),  abono='+quotedstr(sqlgeneral.fieldbyname('pago').AsString)+'  WHERE idpedido='+quotedstr(sqlgeneral.fieldbyname('pedido').AsString),1,sqlgeneral2);
          sqlgeneral.Next;
          end;
              }
                {
             querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET MONITOREO=0 WHERE (MONITOREO IS NULL)' ,1,sqlgeneral2);
             querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET INTERESES=0 WHERE (INTERESES IS NULL)' ,1,sqlgeneral2);
             querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET SERVICIO=0 WHERE (SERVICIO IS NULL )' ,1,sqlgeneral2);
             querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET EQUIPO=0 WHERE (EQUIPO IS NULL)' ,1,sqlgeneral2);
             querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' SET OTROS=0 WHERE (OTROS IS NULL)' ,1,sqlgeneral2);
             querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' set EQUIPO= (abono-(MONITOREO+INTERESES+SERVICIO+OTROS))',1,sqlgeneral);
             querys('UPDATE temporalpagos4'+frmprincipal.idmaq+' set MONITOREO = IF ( EQUIPO < 1,MONITOREO + EQUIPO,MONITOREO)',1,sqlgeneral);
             querys('UPDATE  temporalpagos4'+frmprincipal.idmaq+' SET EQUIPO = IF ( EQUIPO < 1,0,EQUIPO)',1,sqlgeneral);
             querys('UPDATE  temporalpagos4'+frmprincipal.idmaq+' SET EQUIPO = IF ( EQUIPO < 0.1,0,EQUIPO), MONITOREO  = IF ( MONITOREO  < 0.1,0,MONITOREO ),INTERESES = IF ( INTERESES < 0.1,0,INTERESES),SERVICIO = IF ( SERVICIO < 0.1,0,SERVICIO) ',1,sqlgeneral);
                  }
        // querys('SELECT sum(EQUIPO),SUM(MONITOREO),SUM(INTERESES) as INTERESES FROM temporalpagos4'+frmprincipal.idmaq+' WHERE abono >0 and idcliente <> '' '' ',0,sqlgeneral);
        //for i:=11 to 11 do
    {querys('update ConcentradoAbonosxCuenta set L'+inttostr(i)+' = '''' where year ='+ano,1,sqlgeneral);
        //la segunda parte del reporte (empalme)
    querys('select pc.idcliente as cuenta,month(pc.FechaAlta) as mes,p.idpedido,p.concepto as memo, (CASE 1 WHEN un.nombre=''EQUIPO'' THEN ''E'' WHEN un.nombre=''SERVICIOS'' THEN ''S'' WHEN un.nombre=''CONEXION'' THEN ''C'' WHEN un.nombre=''MONITOREO'' THEN '+
              ' ''M'' WHEN un.nombre=''INTERESES'' THEN  ''I'' WHEN un.nombre=''RECONEXION'' THEN ''R'' WHEN un.nombre=''ENLACES'' THEN ''E'' WHEN un.nombre= ''REINSTALACION'' THEN ''L'' WHEN un.nombre= ''CAMBIO CONTROL'' THEN ''T'' WHEN  '+
              ' un.nombre= ''AMPLIACION'' THEN ''P'' WHEN un.nombre= ''EQUIPO2'' THEN ''Q'' WHEN un.nombre= ''BAJAS'' THEN ''B'' WHEN un.nombre= ''GARANTIAS'' THEN ''G'' END) AS Unidad from PagosClientes as pc left join pedidos as p on(pc.idpedido=p.idpedido) '+
              //' left join UnidadNegocio as un on(un.idUnidadNegocio=p.idUnidadNegocio)  where pc.FechaAlta between '+quotedstr(fecha1)+' and '+quotedstr(fecha2)+' and  p.estatus in(3,4) and pc.movimiento in(0,2) and abono > 0 group by p.idpedido order by pc.idcliente',0,sqlgeneral);
              ' left join UnidadNegocio as un on(un.idUnidadNegocio=p.idUnidadNegocio)  where pc.FechaAlta between '+quotedstr(fecha1)+' and '+quotedstr(fecha2)+' and  p.estatus in(3,4,6) and  p.idcliente between '+cuenta1+' and '+cuenta2+' and pc.movimiento in(0,2) and abono > 0 group by p.idpedido order by pc.idcliente',0,sqlgeneral);
              //' left join UnidadNegocio as un on(un.idUnidadNegocio=p.idUnidadNegocio)  where pc.FechaAlta between "2007/01/01" and "2007/11/11" and  p.estatus in(3,4) and pc.movimiento in(0,2) and abono > 0  group by p.idpedido order by pc.idcliente',0,sqlgeneral);

        while not sqlgeneral.Eof do
        begin
          if sqlgeneral.FieldByName('unidad').AsString = 'M' then
          begin
            if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'anual') > 0 then
              querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''A'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano+' ',1,sqlgeneral3)
            else
            begin
              /// querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=L'+sqlgeneral.fieldbyname('mes').AsString+' + ''M'' where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+cboano.Text+' ',1,sqlgeneral3);
              //comparar con todos los meses ok
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'ene') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''1'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'febr') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''2'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'marz') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''3'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'abri') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''4'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'may') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''5'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'juni') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''6'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'juli') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''7'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'agost') > 0 then
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''8'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'sept') > 0 then
                 querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''9'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'oct') > 0 then
                 querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''O'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'nov') > 0 then
                 querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''N'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              if OcurrenciaWord(LowerCase(sqlgeneral.FieldByName('memo').AsString),'dic') > 0 then
                 querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''',''D'') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano,1,sqlgeneral3);
              end;
              end
              else
                querys('Update ConcentradoAbonosxCuenta set L'+sqlgeneral.fieldbyname('mes').AsString+'=concat(ifnull(L'+sqlgeneral.fieldbyname('mes').AsString+',""),'''','+quotedstr(sqlgeneral.fieldbyname('unidad').AsString)+') where idcliente ='+sqlgeneral.fieldbyname('cuenta').AsString+' and year ='+ano+' ',1,sqlgeneral3);
               sqlgeneral.Next;
            end;
          end
          else
          begin
            ///mostrar reporte  }
      //querys('Select  *,'+ano+' as ano from ConcentradoAbonosxCuenta where year='+ano+' and idcliente between '+cuenta1+' and '+cuenta2+' order by idcliente ',0,sqlgeneral);
      inicio := 'select idcliente,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12, ' + #13#10 +
             'cast(if(INSTR(m1,''-'')>0,''0'',m1) as UNSIGNED)+cast(if(INSTR(m2,''-'')>0,''0'',m2) as UNSIGNED)+cast(if(INSTR(m3,''-'')>0,''0'',m3) as UNSIGNED)+' + #13#10 +
             'cast(if(INSTR(m4,''-'')>0,''0'',m4) as UNSIGNED)+cast(if(INSTR(m5,''-'')>0,''0'',m5) as UNSIGNED)+cast(if(INSTR(m6,''-'')>0,''0'',m6) as UNSIGNED)+' + #13#10 +
             'cast(if(INSTR(m7,''-'')>0,''0'',m7) as UNSIGNED)+cast(if(INSTR(m8,''-'')>0,''0'',m8) as UNSIGNED)+cast(if(INSTR(m9,''-'')>0,''0'',m9) as UNSIGNED)+' + #13#10 +
             'cast(if(INSTR(m10,''-'')>0,''0'',m10) as UNSIGNED)+cast(if(INSTR(m11,''-'')>0,''0'',m11) as UNSIGNED)+cast(if(INSTR(m12,''-'')>0,''0'',m12) as UNSIGNED) as total';
      sql := ' from(' + #13#10 +
             'select idcliente,' + 
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p1) as m1,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p2) as m2,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p3) as m3,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p4) as m4,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p5) as m5,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p6) as m6,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p7) as m7,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p8) as m8,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p9) as m9,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p10) as m10,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p11) as m11,' + #13#10 +
             '(select if(p.estatus in (3,4),if(if(pc2.restante=0,max(pc.fechaalta),pc2.restante) is null,''0'',' + #13#10 +
             'if(pc2.restante=0,max(pc.fechaalta),pc2.restante)),if(p.estatus=1,''0'',if(p.estatus=5,''REM2'',''0''))) as pago ' + #13#10 +
             'from pedidos p left join PagosClientes pc on p.idpedido=pc.idpedido' + #13#10 +
             'left join PagosClientes pc2 on pc.idpedido=pc2.idpedido and pc2.movimiento=0' + #13#10 +
             'where p.idpedido=r.p12) as m12' + #13#10 +
             'from RemiMon r ' + #13#10 +
             'where anio='+ano+' and idcliente between '+cuenta1+' and '+cuenta2+' order by idcliente) as t ';
      querys(inicio+sql,0,sqlgeneral);
      inicio:='select sum(cast(if(INSTR(m1,''-'')>0,''0'',m1) as UNSIGNED)) as m1,' + #13#10 +
              'sum(cast(if(INSTR(m2,''-'')>0,''0'',m2) as UNSIGNED)) as m2,' + #13#10 +
              'sum(cast(if(INSTR(m3,''-'')>0,''0'',m3) as UNSIGNED)) as m3,' + #13#10 +
              'sum(cast(if(INSTR(m4,''-'')>0,''0'',m4) as UNSIGNED)) as m4,' + #13#10 +
              'sum(cast(if(INSTR(m5,''-'')>0,''0'',m5) as UNSIGNED)) as m5,' + #13#10 +
              'sum(cast(if(INSTR(m6,''-'')>0,''0'',m6) as UNSIGNED)) as m6,' + #13#10 +
              'sum(cast(if(INSTR(m7,''-'')>0,''0'',m7) as UNSIGNED)) as m7,' + #13#10 +
              'sum(cast(if(INSTR(m8,''-'')>0,''0'',m8) as UNSIGNED)) as m8,' + #13#10 +
              'sum(cast(if(INSTR(m9,''-'')>0,''0'',m9) as UNSIGNED)) as m9,' + #13#10 +
              'sum(cast(if(INSTR(m10,''-'')>0,''0'',m10) as UNSIGNED)) as m10,' + #13#10 +
              'sum(cast(if(INSTR(m11,''-'')>0,''0'',m11) as UNSIGNED)) as m11,' + #13#10 +
              'sum(cast(if(INSTR(m12,''-'')>0,''0'',m12) as UNSIGNED)) as m12';
      querys(inicio+sql,0,sqlgeneral2);
      if(sqlgeneral.RecordCount >0) then
        OperacionReporte('AbonosxCuenta2','Reporte de abonos por cuenta en el año('+ano+')',TipoImpresion, 1)
      else
        Application.MessageBox('No hay datos a mostrar!','Aviso!',MB_OK);
    //end;
  end;//dmreportes...
end;



function BuscarCostoPromedioSistema:boolean;
begin
 querys('select valor from configuraciones where concepto="CostoPromedio" and (valor = "1" or valor = "SI") ',0,dmaccesos.sqlgeneral);
  if dmaccesos.sqlgeneral.FieldByName('valor').AsString <> '' then
     result := true
  else
     result := false;
end;

procedure CalculaCostoPromedio(NuevoCosto:Double; _entrada,CodCve, operacion:string; CantidadEntrada:Integer);
var sqlgeneral:TMyQuery;
begin
{  ** Nota para calculo de costo promedio,
para las devoluciones y cancelacion de ventas y compras se utiliza el
ultimo costo promedio calculado y no el que tenia en el momento de compra o venta. La venta sale con el costo
promedio actual. La compra entra con el costo de proveedor }

sqlgeneral := TMyQuery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;

//Actualiza el Costo Promedio
//deshabilitado el costo promedio es solo de referencia , no el costo a vender
querys('UPDATE articulos SET CostoPromedio=ROUND(((costo*(existencia/piezasxunidad)) '+operacion+' ('+FloattoStr(Nuevocosto)+'*('+
       inttostr(CantidadEntrada)+'/piezasxunidad)))/(existencia '+operacion+' '+inttostr(CantidadEntrada)+'),2) WHERE cod_cve="'+
       CodCve+'"', 1, sqlgeneral);

//validar si el sistema de compras actualiza los valores de costo y precios venta
if((BuscarCostoPromedioSistema= true) and (_entrada = 'E'))  then
  begin
  //Actualiza el Ultimo Costo
  //deshabilitado el ultimo costo es el costo pero el de la venta.
  querys('UPDATE articulos SET costo = '+FloattoStr(Nuevocosto)+' WHERE articulos.cod_cve = "'+CodCve+'"', 1, sqlgeneral);

  //Actualiza los Precios de Venta y el de Descuento
  querys('UPDATE articulos SET precioa = ROUND((('+FloattoStr(Nuevocosto)+' * (utila/100)) + '+FloattoStr(Nuevocosto)+'),0), '+
         'preciob = ROUND((('+FloattoStr(Nuevocosto)+' * (utilb/100)) + '+FloattoStr(Nuevocosto)+'),0), '+
         'precioc = ROUND((('+FloattoStr(Nuevocosto)+' * (utilc/100)) + '+FloattoStr(Nuevocosto)+'),0), '+
         'preciod = ROUND((('+FloattoStr(Nuevocosto)+' * (utild/100)) + '+FloattoStr(Nuevocosto)+'),0), '+
         'precio_desc = ROUND((('+FloattoStr(Nuevocosto)+' * (desc_esp/100)) + '+FloattoStr(Nuevocosto)+'),0) '+
         'WHERE cod_cve = "'+CodCve+'"', 1, sqlgeneral);      {   }
  end;
end;

procedure RepFindeTurno(dia,turno,TipoImpresion:string);
var
   cadena1,cadena2,cadena3:string;
begin
   with DMREPORTES do
   begin

      // SE OBTIENEN LAS ACTIVACIONES POSITIVAS CON CTA Y NOMBRE DEL CLIENTE
      cadena1:= 'SELECT a.idcliente as cuenta, if(((length(c.rsocial) = 0) or ifnull(c.rsocial,1)),concat_ws(" ",c.nombre,c.apaterno,c.amaterno),c.rsocial) as nombre, ac.status as tipo, n.nota '+
                'FROM sk_alarmas a left join NotasActivacionesPositivas as n on(a.id = n.id), alarmas_conclusion ac, clientes c, turnos t '+
                'WHERE t.nombre = "'+turno+'" and t.idarea = 4 and a.conclusion = ac.id and '+
                'a.conclusion = 1 and a.idcliente = c.idcliente';

      // SE OBTIENEN LAS ACTIVACIONES AGRUPADAS POR CONCLUSION
      cadena2:= 'SELECT ac.status as Tipo, count(*) as Cuantos, t.nombre as turno, a.fecha_pc as fecha '+
                'FROM sk_alarmas a, turnos t, alarmas_conclusion ac '+
                'WHERE t.nombre = "'+turno+'" and t.idarea = 4 and a.conclusion = ac.id';

      // SE OBTIENEN LOS SERVICIOS REALIZADOS POR LOS PATRULLEROS
      cadena3:= 'SELECT count(*) as Servicios '+
                'FROM servicios s, usuarios u, turnos t '+
                'WHERE s.nomop = u.codigo and u.idarea = 4 and t.nombre = "'+turno+'" and t.idarea = 4';

      if turno = 'NOCTURNO' then
        begin
         cadena1:= cadena1 + ' and ((a.fecha_pc = "'+dia+'" and (a.hora_pc between t.HoraInicio and "24:00:00"))'+
                             ' or  ( a.fecha_pc = "'+datetostr(strtodate(dia)+1)+'" and (a.hora_pc between "00:00:01" and t.HoraFin)))' ;
         cadena2:= cadena2 + ' and ((a.fecha_pc = "'+dia+'" and (a.hora_pc between t.HoraInicio and "24:00:00"))'+
                             ' or  ( a.fecha_pc = "'+datetostr(strtodate(dia)+1)+'" and (a.hora_pc between "00:00:01" and t.HoraFin))) GROUP BY a.conclusion';
         cadena3:= cadena3 + ' and ((s.fecha_creacion = "'+dia+'" and (s.hora_creacion between t.HoraInicio and "24:00:00"))'+
                             ' or  ( s.fecha_creacion = "'+datetostr(strtodate(dia)+1)+'" and (s.hora_creacion between "00:00:01" and t.HoraFin)))';
        end
      else
        begin
         cadena1:= cadena1 + ' and a.fecha_pc = "'+dia+'" and a.hora_pc between t.HoraInicio and t.HoraFin';
         cadena2:= cadena2 + ' and a.fecha_pc = "'+dia+'" and a.hora_pc between t.HoraInicio and t.HoraFin GROUP BY a.conclusion';
         cadena3:= cadena3 + ' and s.fecha_creacion = "'+dia+'" and s.hora_creacion between t.HoraInicio and t.HoraFin';
        end;

      querys(cadena1,0,sqlgeneral);
      querys(cadena2,0,sqlgeneral2);
      querys(cadena3,0,sqlgeneral3);

      if (sqlgeneral2.RecordCount > 0) then
         OperacionReporte('FinDeTurno','Reporte de Fin de Turno',TipoImpresion, 1)
      else
         Application.MessageBox('No hay datos que mostrar!','Aviso!',MB_OK+MB_ICONASTERISK);

   end;// with
end;

procedure ComboMeses(combo:TRzComboBox);overload;
var i :integer;
begin
combo.Clear;
for i := 1 to 12 do
  combo.Items.Add(meses[i]);
combo.ItemIndex := 0;
end;

procedure ComboMeses(combo:TComboBox);overload;
var i :integer;
begin
combo.Clear;
for i := 1 to 12 do
  combo.Items.Add(meses[i]);
combo.ItemIndex := 0;
end;

procedure ComboYear(combo:TComboBox);overload;
var i:integer;
begin
combo.Clear;
for i:= 1990 to yearof(today)+5 do
  combo.Items.Add(inttostr(i));
combo.Text := inttostr(yearof(today));
end;

procedure ComboYear(combo:TRzComboBox);overload;
var i:integer;
begin
combo.Clear;
for i:= 1990 to yearof(today)+5 do
  combo.Items.Add(inttostr(i));
combo.Text := inttostr(yearof(today));
end;

procedure ComboContratos(combo:TRzComboBox);
//var i:integer;
begin
  combo.Clear;
  querys('select tipocont,nombre from contratos',0,DMREPORTES.sqlgeneral2);
  while DMREPORTES.sqlgeneral2.Eof do
  begin
    combo.Items.Add(dmreportes.sqlgeneral2.fieldbyname('nombre').AsString);
  end;
  combo.Text := inttostr(yearof(today));
end;


procedure RepClientesDeudores(meses,ano,TipoImpresion:string);
var
   cadena:string;
// FUNCION PARA BUSCAR UN MES EN UNA CADENA
   function BuscaMes(cadena:string;mes:string):boolean;
   var
      m,p1,p2:integer;
      tmp:string;
      encontro:boolean;
   begin
      tmp:= '';
      encontro:= false;
      cadena:= UpperCase(cadena);
      mes:= UpperCase(mes);
      p1:= 1; p2:= Length(cadena);

      // se realiza la busqueda
      for m:=p1 to p2 do
      begin
         if (copy(cadena,m,1) <> ' ') and (copy(cadena,m,1) <> ',') then
            tmp:= tmp + copy(cadena,m,1)
         else
         begin
            if tmp = mes then
               encontro:= true;
            tmp:= '';
         end;
      end;
      Result:= encontro;
   end;
begin
   with DMREPORTES do
   begin
      cadena:= 'SELECT m.idcliente as cuenta, if(((length(c.rsocial) = 0) or ifnull(c.rsocial,1)),concat_ws(" ",c.nombre,c.apaterno,c.amaterno),c.rsocial) AS nombre, if(c.idgiro=1,1,2) as giro, '+ano+' as ano, "'+meses+'" as meses '+
               'FROM	ConcentradoAbonosxMonitoreo m, clientes c '+
               'WHERE m.idcliente = c.idcliente and c.idcliente <> 10000 and c.estatus = 1 and m.anio = "'+ano+'"';

      if BuscaMes(meses,'ENERO')      then cadena:= cadena + ' and m1= "0"';
      if BuscaMes(meses,'FEBRERO')    then cadena:= cadena + ' and m2= "0"';
      if BuscaMes(meses,'MARZO')      then cadena:= cadena + ' and m3= "0"';
      if BuscaMes(meses,'ABRIL')      then cadena:= cadena + ' and m4= "0"';
      if BuscaMes(meses,'MAYO')       then cadena:= cadena + ' and m5= "0"';
      if BuscaMes(meses,'JUNIO')      then cadena:= cadena + ' and m6= "0"';
      if BuscaMes(meses,'JULIO')      then cadena:= cadena + ' and m7= "0"';
      if BuscaMes(meses,'AGOSTO')     then cadena:= cadena + ' and m8= "0"';
      if BuscaMes(meses,'SEPTIEMBRE') then cadena:= cadena + ' and m9= "0"';
      if BuscaMes(meses,'OCTUBRE')    then cadena:= cadena + ' and m10="0"';
      if BuscaMes(meses,'NOVIEMBRE')  then cadena:= cadena + ' and m11="0"';
      if BuscaMes(meses,'DICIEMBRE')  then cadena:= cadena + ' and m12="0"';
      cadena:= cadena + ' order by giro,cuenta';
      querys(cadena,0,sqlgeneral);

      if (sqlgeneral.RecordCount > 0) then
         OperacionReporte('ClientesDeudores','Reporte de Clientes Deudores',TipoImpresion, 1)
      else
         Application.MessageBox('No hay datos que mostrar!','Aviso!',MB_OK+MB_ICONASTERISK);
   end; // WITH
end;

procedure RepEstandaresVentas(fecha1,fecha2:string;meta:integer;TipoImpresion:string);
var
   fecS1,fecS2,fecM1,fecM2,fecA1,fecA2:TDate;
begin
   with DMREPORTES do
   begin
      fecS1:= strtodate(fecha1);
      fecS2:= strtodate(fecha2);
      fecM1:= strtodate(inttostr(yearof(strtodate(fecha1)))+'/'+inttostr(monthof(strtodate(fecha1)))+'/01');
      fecM2:= strtodate(fecha2);
      fecA1:= strtodate(inttostr(yearof(strtodate(fecha1)))+'/01/01');
      fecA2:= strtodate(fecha2);

      //application.MessageBox(pchar(datetostr(fecS1)+' - '+datetostr(fecS2)),'Semana',MB_OK+MB_ICONASTERISK);
      //application.MessageBox(pchar(datetostr(fecM1)+' - '+datetostr(fecM2)),'Mes',MB_OK+MB_ICONASTERISK);
      //application.MessageBox(pchar(datetostr(fecA1)+' - '+datetostr(fecA2)),'Anio',MB_OK+MB_ICONASTERISK);

      //  REPORTE DE VENDEDORES TRADICIONALES (VISITAS)
      querys('select t1.puesto, t1.cod, t1.Nombre, sum(t1.visS) as visS, sum(t1.visM) as visM, sum(t1.visA) as visA, '+inttostr(meta)+' as meta, "Semana '+inttostr(WeekOfTheYear(fecS1))+' '+inttostr(yearof(fecS1))+'" as semana '+
               'from '+
	            '(select u.codigo as cod, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, if(u.idpuesto=1,1,if(u.idpuesto=41,2,3)) as puesto, '+
	            'count(*) as visS, 0 as visM, 0 as visA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecS1)+'" and "'+datetostr(fecS2)+'" and op.idorigen in (2) and u.estatus=1 '+
	            'group by av.idvendedor '+
            'UNION ALL '+
	            'select u.codigo as cod, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, if(u.idpuesto=1,1,if(u.idpuesto=41,2,3)) as puesto, '+
	            '0 as visS, count(*) as visM, 0 as visA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecM1)+'" and "'+datetostr(fecM2)+'" and op.idorigen in (2) and u.estatus=1 '+
   	         'group by av.idvendedor '+
            'UNION ALL '+
	            'select u.codigo as cod, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, if(u.idpuesto=1,1,if(u.idpuesto=41,2,3)) as puesto, '+
	            '0 as visS, 0 as visM, count(*) as VisA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
            	'where av.fecha_creacion between "'+datetostr(fecA1)+'" and "'+datetostr(fecA2)+'" and op.idorigen in (2) and u.estatus=1 '+
	            'group by av.idvendedor) as t1 '+
               'group by t1.cod '+
            'order by t1.puesto, t1.visS desc',0,sqlgeneral);

      //  REPORTE DE VENDEDORES DE CASA (LLAMADAS)
      querys('select 1, t1.codigo, t1.Nombre, sum(t1.EqS) as EqS, sum(t1.CEqS) as CEqS, sum(t1.AmpS) as AmpS, sum(t1.CAmpS) as CAmpS, '+
             'sum(t1.EqM) asEqM, sum(t1.CEqM) as CEqM, sum(t1.AmpM) as AmpM, sum(t1.CAmpM) as CAmpM, sum(t1.EqA) as EqA, sum(t1.CEqA) as CEqA, sum(t1.AmpA) as AmpA, sum(t1.CAmpA) as CAmpA '+
               'from '+
	            //	SEMANAL
	            '(select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
	            'count(*) as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecS1)+'" and "'+datetostr(fecS2)+'" and op.idorigen in (1) and u.idpuesto = 41 '+
	            'and av.idtipo_oportunidad in (1,2,9,7,23,13) and u.estatus=1 '+
	            'group by av.idvendedor '+
            'UNION ALL '+
	            'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
	            '0 as EqS, count(*) as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'left join presupuestos2 as pr on (pr.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecS1)+'" and "'+datetostr(fecS2)+'" and op.idorigen in (1) and u.idpuesto = 41 and pr.estatus = 1 '+
	            'and av.idtipo_oportunidad in (1,2,9,7,23,13) '+
	            'group by av.idvendedor '+
            'UNION ALL '+
	            'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
	            '0 as EqS, 0 as CEqS, count(*) as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecS1)+'" and "'+datetostr(fecS2)+'" and op.idorigen in (1) and u.idpuesto = 41 '+
	            'and av.idtipo_oportunidad in (24,25,4,5,10,3,6) and u.estatus=1 '+
	            'group by av.idvendedor '+
            'UNION ALL '+
	            'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
	            '0 as EqS, 0 as CEqS, 0 as AmpS, count(*) as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'left join presupuestos2 as pr on (pr.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecS1)+'" and "'+datetostr(fecS2)+'" and op.idorigen in (1) and u.idpuesto = 41 and pr.estatus = 1 '+
	            'and av.idtipo_oportunidad in (24,25,4,5,10,3,6) '+
	            'group by av.idvendedor '+
            'UNION ALL '+
	            //	MENSUAL
	            'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
	            '0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, count(*) as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecM1)+'" and "'+datetostr(fecM2)+'" and op.idorigen in (1) and u.idpuesto = 41 '+
	            'and av.idtipo_oportunidad in (1,2,9,7,23,13) and u.estatus=1 '+
	            'group by av.idvendedor '+
            'UNION ALL '+
	            'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
	            '0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, count(*) as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
	            'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'left join presupuestos2 as pr on (pr.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecM1)+'" and "'+datetostr(fecM2)+'" and op.idorigen in (1) and u.idpuesto = 41 and pr.estatus = 1 '+
	            'and av.idtipo_oportunidad in (1,2,9,7,23,13) '+
	            'group by av.idvendedor '+
            'UNION ALL '+
	            'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
	            '0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, count(*) as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
            	'from usuarios as u '+
	            'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
	            'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
	            'where av.fecha_creacion between "'+datetostr(fecM1)+'" and "'+datetostr(fecM2)+'" and op.idorigen in (1) and u.idpuesto = 41 '+
            	'and av.idtipo_oportunidad in (24,25,4,5,10,3,6) and u.estatus=1 '+
            	'group by av.idvendedor '+
            'UNION ALL '+
            	'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, count(*) as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
            	'from usuarios as u '+
            	'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
            	'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
            	'left join presupuestos2 as pr on (pr.idoportunidad=av.idoportunidad) '+
            	'where av.fecha_creacion between "'+datetostr(fecM1)+'" and "'+datetostr(fecM2)+'" and op.idorigen in (1) and u.idpuesto = 41 and pr.estatus = 1 '+
            	'and av.idtipo_oportunidad in (24,25,4,5,10,3,6) '+
            	'group by av.idvendedor '+
            'UNION ALL '+
            	//	ANUAL
            	'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, count(*) as EqA, 0 as CEqA, 0 as AmpA, 0 as CAmpA '+
            	'from usuarios as u '+
            	'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
            	'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
            	'where av.fecha_creacion between "'+datetostr(fecA1)+'" and "'+datetostr(fecA2)+'" and op.idorigen in (1) and u.idpuesto = 41 '+
            	'and av.idtipo_oportunidad in (1,2,9,7,23,13) and u.estatus=1 '+
            	'group by av.idvendedor '+
            'UNION ALL '+
            	'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, count(*) as CEqA, 0 as AmpA, 0 as CAmpA '+
            	'from usuarios as u '+
            	'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
            	'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
            	'left join presupuestos2 as pr on (pr.idoportunidad=av.idoportunidad) '+
            	'where av.fecha_creacion between "'+datetostr(fecA1)+'" and "'+datetostr(fecA2)+'" and op.idorigen in (1) and u.idpuesto = 41 and pr.estatus = 1 '+
            	'and av.idtipo_oportunidad in (1,2,9,7,23,13) '+
            	'group by av.idvendedor '+
            'UNION ALL '+
            	'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, count(*) as AmpA, 0 as CAmpA '+
            	'from usuarios as u '+
            	'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
            	'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
            	'where av.fecha_creacion between "'+datetostr(fecA1)+'" and "'+datetostr(fecA2)+'" and op.idorigen in (1) and u.idpuesto = 41 '+
            	'and av.idtipo_oportunidad in (24,25,4,5,10,3,6) and u.estatus=1 '+
            	'group by av.idvendedor '+
            'UNION ALL '+
            	'select u.codigo, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as EqS, 0 as CEqS, 0 as AmpS, 0 as CAmpS, 0 as EqM, 0 as CEqM, 0 as AmpM, 0 as CAmpM, 0 as EqA, 0 as CEqA, 0 as AmpA, count(*) as CAmpA '+
            	'from usuarios as u '+
            	'left join agenda_vendedores as av on (u.idusuario = av.idvendedor) '+
            	'left join oportunidades as op on (op.idoportunidad=av.idoportunidad) '+
            	'left join presupuestos2 as pr on (pr.idoportunidad=av.idoportunidad) '+
            	'where av.fecha_creacion between "'+datetostr(fecA1)+'" and "'+datetostr(fecA2)+'" and op.idorigen in (1) and u.idpuesto = 41 and pr.estatus = 1 '+
            	'and av.idtipo_oportunidad in (24,25,4,5,10,3,6) '+
            	'group by av.idvendedor) as t1 '+
            'group by t1.codigo',0,sqlgeneral2);

      //  REPORTE DE CUENTAS NUEVAS POR VENDEDOR
      querys('select t1.codigo, t1.puesto, t1.Nombre, sum(t1.ctasS) as ctasS, sum(t1.ctasM) as ctasM, sum(t1.ctasA) as ctasA '+
               'from '+
	            '(SELECT u.codigo, if(u.idpuesto=1,1,if(u.idpuesto=41,2,3)) as puesto, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'count(*) as ctasS, 0 as ctasM, 0 as ctasA '+
            	'FROM pedidos as p '+
            	'LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) '+
            	'LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
            	'LEFT JOIN contratos as con ON(con.TipoCont=c.TipoCont) '+
            	'LEFT JOIN UnidadNegocio as tp On(tp.idUnidadNegocio=p.idUnidadNegocio) '+
            	'WHERE p.estatus in(3,4) and p.FechaRemision between "'+datetostr(fecS1)+'" and "'+datetostr(fecS2)+'" '+
            	'and tp.instalacion =1 and tp.CuentaNueva = 1 and con.estatus=1 and u.estatus=1 '+
            	'group by u.codigo '+
            'UNION ALL '+
            	'SELECT u.codigo, if(u.idpuesto=1,1,if(u.idpuesto=41,2,3)) as puesto, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as ctasS, count(*) as ctasM, 0 as ctasA '+
            	'FROM pedidos as p '+
            	'LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) '+
            	'LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
            	'LEFT JOIN contratos as con ON(con.TipoCont=c.TipoCont) '+
            	'LEFT JOIN UnidadNegocio as tp On(tp.idUnidadNegocio=p.idUnidadNegocio) '+
            	'WHERE p.estatus in(3,4) and p.FechaRemision between "'+datetostr(fecM1)+'" and "'+datetostr(fecM2)+'" '+
            	'and tp.instalacion =1 and tp.CuentaNueva = 1 and con.estatus=1 and u.estatus=1 '+
            	'group by u.codigo '+
            'UNION ALL '+
            	'SELECT u.codigo, if(u.idpuesto=1,1,if(u.idpuesto=41,2,3)) as puesto, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as ctasS, 0 as ctasM, count(*) as ctasA '+
            	'FROM pedidos as p '+
            	'LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) '+
            	'LEFT JOIN clientes as c ON (c.idcliente=p.idcliente) '+
            	'LEFT JOIN contratos as con ON(con.TipoCont=c.TipoCont) '+
            	'LEFT JOIN UnidadNegocio as tp On(tp.idUnidadNegocio=p.idUnidadNegocio) '+
            	'WHERE p.estatus in(3,4) and p.FechaRemision between "'+datetostr(fecA1)+'" and "'+datetostr(fecA2)+'" '+
            	'and tp.instalacion =1 and tp.CuentaNueva = 1 and con.estatus=1 and u.estatus=1 '+
            	'group by u.codigo) as t1 '+
            'group by t1.codigo '+
            'order by t1.puesto',0,sqlgeneral3);

      // REPORTE DE TOTAL EN DOLARES
      querys('select t1.codigo, if(t1.idpuesto=1,1,if(t1.idpuesto=41,2,3)) as puesto, t1.Nombre, '+
               'ROUND(sum(t1.ToTDllsS),2) as totS, ROUND(sum(t1.ToTDllsM),2) as totM, ROUND(sum(ToTDllsA),2) as totA '+
               'from '+
            	'(SELECT u.codigo, u.idpuesto, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'sum(if(tp.comisiones =1, if(dp.tc<>1,cant*dp.costo,(cant*dp.costo)/p.TipoCambio),0)) as ToTDllsS, 0 as ToTDllsM, 0 as ToTDllsA '+
            	'FROM DetPedido as dp '+
            	'LEFT JOIN pedidos as p ON (p.idpedido=dp.idpedido) '+
            	'LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) '+
            	'LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) '+
            	'LEFT JOIN UnidadNegocio as tp On (tp.idUnidadNegocio=p.idUnidadNegocio) '+
            	'WHERE p.estatus in(3,4) and p.FechaRemision between "'+datetostr(fecS1)+'" and "'+datetostr(fecS2)+'" and tp.instalacion =1 and a.idlinea = 4 '+
            	'and left(tp.nombre,4) <> "CCTV" and u.estatus=1 '+
            	'GROUP BY u.codigo '+
            	'HAVING ToTDllsS > 0 or u.idpuesto in (1,41) '+
            'UNION ALL '+
            	'SELECT u.codigo, u.idpuesto, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as ToTDllsS, sum(if(tp.comisiones =1, if(dp.tc<>1,cant*dp.costo,(cant*dp.costo)/p.TipoCambio),0)) as ToTDllsM, 0 as ToTDllsA '+
            	'FROM DetPedido as dp '+
            	'LEFT JOIN pedidos as p ON (p.idpedido=dp.idpedido) '+
            	'LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) '+
            	'LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) '+
            	'LEFT JOIN UnidadNegocio as tp On (tp.idUnidadNegocio=p.idUnidadNegocio) '+
            	'WHERE p.estatus in(3,4) and p.FechaRemision between "'+datetostr(fecM1)+'" and "'+datetostr(fecM2)+'" and tp.instalacion =1 and a.idlinea = 4 '+
            	'and left(tp.nombre,4) <> "CCTV" and u.estatus=1 '+
            	'GROUP BY u.codigo '+
            	'HAVING ToTDllsM > 0 or u.idpuesto in (1,41) '+
            'UNION ALL '+
            	'SELECT u.codigo, u.idpuesto, concat_ws(" ",u.nombre,u.apaterno,u.amaterno) as Nombre, '+
            	'0 as ToTDllsS, 0 as toTDllsM, sum(if(tp.comisiones =1, if(dp.tc<>1,cant*dp.costo,(cant*dp.costo)/p.TipoCambio),0)) as ToTDllsA '+
            	'FROM DetPedido as dp '+
            	'LEFT JOIN pedidos as p ON (p.idpedido=dp.idpedido) '+
            	'LEFT JOIN articulos as a ON (a.cod_cve=dp.cod_cve) '+
            	'LEFT JOIN usuarios as u ON (u.idusuario=p.idvendedor) '+
            	'LEFT JOIN UnidadNegocio as tp On (tp.idUnidadNegocio=p.idUnidadNegocio) '+
            	'WHERE p.estatus in(3,4) and p.FechaRemision between "'+datetostr(fecA1)+'" and "'+datetostr(fecA2)+'" and tp.instalacion =1 and a.idlinea = 4 '+
            	'and left(tp.nombre,4) <> "CCTV" and u.estatus=1 '+
            	'GROUP BY u.codigo '+
            	'HAVING ToTDllsA > 0 or u.idpuesto in (1,41)) as t1 '+
            'group by t1.codigo '+
            'order by puesto, t1.codigo',0,sqlgeneral4);

      OperacionReporte('MetaVendedores3','Reporte de Estandares de Ventas',TipoImpresion,1);

   end; // with dmreportes
end;

function BooltoInt(Bool:Boolean):Integer;
begin
if Bool = true then
  result := 1
else
  result := 0;
end;

procedure RepEstatusPedidos(rmes,mes,restatus,ano,TipoImpresion:string);
var
   cadena,where:string;
begin
   with DMREPORTES do
   begin
      where:= '';
      cadena:= 'SELECT m.idcliente as cuenta, if(((length(c.rsocial) = 0) or ifnull(c.rsocial,1)),concat_ws(" ",c.nombre,c.apaterno,c.amaterno),c.rsocial) AS nombre, '+
               ano+' as ano, "'+rmes+'" as meses, m.l'+mes+' as Estatus '+
               'FROM ConcentradoAbonosxMonitoreo m left join clientes c on (m.idcliente=c.idcliente) '+
               'WHERE c.idcliente not in (9999,10000) and c.estatus = 1 and m.anio = "'+ano+'" and c.TipoCont in ("001","006","005") ';

      if rmes = 'ENERO'      then where:= where + ' and m1= "0" and l1 in  ('+restatus+')';
      if rmes = 'FEBRERO'    then where:= where + ' and m2= "0" and l2 in  ('+restatus+')';
      if rmes = 'MARZO'      then where:= where + ' and m3= "0" and l3 in  ('+restatus+')';
      if rmes = 'ABRIL'      then where:= where + ' and m4= "0" and l4 in  ('+restatus+')';
      if rmes = 'MAYO'       then where:= where + ' and m5= "0" and l5 in  ('+restatus+')';
      if rmes = 'JUNIO'      then where:= where + ' and m6= "0" and l6 in  ('+restatus+')';
      if rmes = 'JULIO'      then where:= where + ' and m7= "0" and l7 in  ('+restatus+')';
      if rmes = 'AGOSTO'     then where:= where + ' and m8= "0" and l8 in  ('+restatus+')';
      if rmes = 'SEPTIEMBRE' then where:= where + ' and m9= "0" and l9 in  ('+restatus+')';
      if rmes = 'OCTUBRE'    then where:= where + ' and m10="0" and l10 in ('+restatus+')';
      if rmes = 'NOVIEMBRE'  then where:= where + ' and m11="0" and l11 in ('+restatus+')';
      if rmes = 'DICIEMBRE'  then where:= where + ' and m12="0" and l12 in ('+restatus+')';
      where:= where + ' order by Estatus, cuenta';
      cadena:= cadena + where;
      querys(cadena,0,sqlgeneral);

      if (sqlgeneral.RecordCount > 0) then
         OperacionReporte('EstatusPedidos','Reporte de Estatus de Pedidos',TipoImpresion, 1)
      else
         Application.MessageBox('No hay datos que mostrar!','Aviso!',MB_OK+MB_ICONASTERISK);
   end; // WITH
end;

{function Derechos(campo:string):Boolean;
begin
with dmreportes do
  begin
  querys('select idusuario, '+campo+' from usuarios where idusuario='+inttostr(ActualUserId), 0, sqlgeneral4);
  result := sqlgeneral4.FieldByName(campo).AsBoolean;
  end;
end;}

procedure commadelimitedtostrarray(cadena:string); //vector:array of string);
var p, i :integer; c:string;
begin
i:=0;
SetLength(vector, 0);
repeat
 SetLength(vector, i+1);
 p:= AnsiPos(',', cadena);
 if p = 0 then
   c:= AnsiMidStr(cadena, 1, length(cadena))
 else
   c:= AnsiMidStr(cadena, 1, p-1);

 vector[i] := c;
 if p = 0 then
   cadena := ''
 else
   delete(cadena, 1, p);
 inc(i);
until length(cadena) = 0;
end;

function strinvector(cadena:string):boolean;
var i:integer;
begin
result := false;
for i:= 0 to length(vector)-1 do
  begin
  if cadena = vector[i] then
    begin
    result := true;
    exit;
    end;
  end;
end;

function DerechosSys(derecho:string):boolean;
var sqlgeneral:tMyQuery; idderecho:string;
begin
sqlgeneral := TMyQuery.Create(nil);
sqlgeneral.Connection := DMAccesos.conexion;
result:=false;

querys('select idderecho from Derechos where nombre = "'+derecho+'"', 0, sqlgeneral);
idderecho := sqlgeneral.fieldbyname('idderecho').AsString;

querys('Select derechos, tipo from UsuariosDerechos ud left join areas a on a.idarea=ud.idusuario where tipo = 1 '+
       'and a.nombre="'+frmprincipal.AreaUsuario+'" UNION Select derechos, tipo from UsuariosDerechos ud left join '+
       'puestos p on p.idpuesto=ud.idusuario left join areas a on a.idarea=p.idarea where tipo = 2 and p.nombre="'+
       frmprincipal.PuestoUsuario+'" and a.nombre="'+frmprincipal.AreaUsuario+'" UNION Select derechos, tipo from '+
       'UsuariosDerechos ud left join usuarios u on u.idusuario=ud.idusuario where tipo = 3 and u.idusuario = '+
       inttostr(frmprincipal.ucprincipal.CurrentUser.UserID), 0, sqlgeneral);
sqlgeneral.First;
while not sqlgeneral.Eof do
  begin

  commadelimitedtostrarray(sqlgeneral.FieldByName('derechos').AsString);//, vector);


  case sqlgeneral.FieldByName('tipo').AsInteger of
    1: if (strinvector(idderecho)) or (sqlgeneral.FieldByName('derechos').AsString = '0') then
          begin
          result := true;
          exit;
          end;

    2:  if (strinvector(idderecho)) or (sqlgeneral.FieldByName('derechos').AsString = '0') then
          begin
          result := true;
          exit;
          end;

    3:  if (strinvector(idderecho)) or (sqlgeneral.FieldByName('derechos').AsString = '0') then
          begin
          result := true;
          exit;
          end;
    end;
  sqlgeneral.Next;
  end;
end;

function UsuarioPropiedad(campo, idusuario:string):String;
begin
with dmreportes do
  begin
  querys('select idusuario, '+campo+' from usuarios where idusuario='+idusuario, 0, sqlgeneral4);
  result := sqlgeneral4.FieldByName(campo).AsString;
  end;
end;

procedure RegresarAPedido(idpedido,idcliente:string);
var
   restante:double;
begin
   querys('delete from RemiFact where idpedido='+idpedido,1,dmreportes.sqlgeneral);
   //trae el cargo hecho al cliente
   querys('select restante from PagosClientes where idpedido = '+idpedido+' and movimiento = 0',0,dmreportes.sqlgeneral);
   //actualiza el saldo del cliente
   restante:= 0;
   if dmreportes.sqlgeneral.RecordCount > 0 then
      restante:= dmreportes.sqlgeneral.FieldByName('restante').AsFloat;
   bpcambios('clientes', idcliente, 'idcliente');
   querys('update clientes set saldo = saldo-'+floattostr(restante)+' where idcliente='+idcliente,1,dmreportes.sqlgeneral);
   apcambios('idcliente', idcliente, 'clientes', 'RegresarAPedido');
   //elimina los cargos de PagosClientes
   querys('delete from PagosClientes where idpedido='+idpedido,1,dmreportes.sqlgeneral);
   //elimina la instalacion
   querys('delete from instalaciones where idpedido='+idpedido,1,dmreportes.sqlgeneral);
   //actualiza el estatus del cliente
   querys('update pedidos set estatus=0,Saldo=0, idinstal=0 where idpedido='+idpedido,1,dmreportes.sqlgeneral);

   querys('select cod_cve,piezas,cant from DetPedido where idpedido='+idpedido,1,dmreportes.sqlgeneral);
   WHILE NOT DMREPORTES.sqlgeneral.Eof do
    begin
         querys('insert into CardexArt(cod_cve,movimiento,idmovi,FechaMov,iddoc,cant,piezas,usuario,HoraMov, descripcion) values ("'+
         dmreportes.SqlGeneral.fieldbyname('cod_cve').asstring+'","E",34,CURDATE(),'+idpedido+','+
         dmreportes.SqlGeneral.fieldbyname('cant').asstring+','+dmreportes.SqlGeneral.Fieldbyname('piezas').AsString+',"'+
         frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+timetostr(time)+'", "Devoluciones sobre venta")',1,dmreportes.sqlgeneral8);
         DMREPORTES.sqlgeneral.Next;
    end;

end;

function OcurrenciaWord(const str: string; const substr: string): integer;
   // Devuelve la cantidad de veces que una subcadena está en una cadena
   var
    p, q: PChar;
    n: integer;
begin
    Result := 0;
    n := Length(substr);
    if n = 0 then exit;
    q := PChar(Pointer(substr));
    p := PChar(Pointer(str));
    while p <> nil do
    begin
      p := StrPos(p, q);
      if p <> nil then
      begin
         inc(Result);
         inc(p, n);
      end;
    end;
end;

function checarcorreo(email: string): Boolean;
   var
     s: string;
     epos: Integer;
begin
     epos:=pos('@', email);
     if epos > 1 then
     begin
       s:= copy(email,epos+1,Length(email));
       if (pos('.',s)> 1) and (pos('.',s)<length(s)) then
         Result:=true
       else
         Result:=false;
     end
     else
       Result:=false;
end;

function GetConfiguraciones(Concepto:string; valor:boolean=true):string;
var sqlgeneral:tMyQuery; v:string;
begin
sqlgeneral := TMyQuery.Create(nil);
sqlgeneral.Connection := DMAccesos.conexion;
if valor = true then
  v:= 'valor'
else
  v:= 'ValorMemo';
querys('select '+v+' as valor from configuraciones where concepto = "'+concepto+'"',0, sqlgeneral );
result := sqlgeneral.fieldbyname('valor').AsString;
end;

procedure llenarcuentasActivas;
begin
   querys('insert into cuentasActivas (idcliente,tipocont,idcategoria,mes,ano,fecha)'+
          ' select t1.idcliente,t1.tipocont,t1.idcategoria,"'+inttostr(MonthOf(today))+'","'+inttostr(yearof(today))+'",curdate()'+
          ' from (select idcliente,tipocont,idcategoria from clientes c where estatus=1) as t1'+
          ' left join(select c.idcliente,p.idpedido,sum(p.SubTotal) as Total from clientes c left '+
          ' join pedidos p on (c.idcliente=p.idcliente)'+
          ' where c.estatus=1 and p.estatus in (3,4,5) and (p.concepto like "%ene%" or p.concepto '+
          ' like "%enro%" or p.concepto like "%anual%")  and p.concepto like "%2008%" and'+
          ' p.idUnidadNegocio in (4) and tipocont in ("001","005","004","006","010","012","15")'+
          ' group by idcliente) as t2 on t1.idcliente=t2.idcliente where t1.idcliente<>"10000"',1,dmreportes.sqlgeneral);
end;

procedure llenarRemiMon;
var cadmes, ano:string;
    mes :integer;
begin
   ano := '2008';

   for mes := 1 to 12 do
   begin
      case mes of
      1: cadmes := '"%ene%" or p.concepto like "%enro%"';
      2: cadmes := '"%feb%"';
      3: cadmes := '"%mar%"';
      4: cadmes := '"%abr%"';
      5: cadmes := '"%may%"';
      6: cadmes := '"%jun%"';
      7: cadmes := '"%jul%"';
      8: cadmes := '"%ago%"';
      9: cadmes := '"%sep%"';
      10: cadmes := '"%oct%"';
      11: cadmes := '"%nov%"';
      12: cadmes := '"%dic%"';
      end;
      querys('update RemiMon as rm, ( select idcliente, idpedido, idremision, idfactura from ( Select distinct rm.idcliente, p.idpedido, '+
             'max(idremicion) as idremision, p.idfactura from RemiMon rm left join pedidos p on (rm.idcliente=p.idcliente) left join '+
             'RemiFact rf using(idpedido) left join NotasCredito nc on nc.idfactura=p.idfactura where p.estatus in (3,4,5) and '+
             'p.idUnidadNegocio in (4)  and p.concepto like "%'+ano+'%"  and (p.concepto like '+cadmes+') '+
             'and nc.idfactura is null group by idcliente, p.idpedido ) as m group by idcliente order by idcliente ) as q '+
             'set R'+inttostr(mes)+'=idremision, P'+inttostr(mes)+'=idpedido where rm.idcliente=q.idcliente', 1, dmreportes.sqlgeneral);

   end;

end;

//sync
function CuentaApartada : integer;
var  idvendedor:string;       // i : integer;
    sqlgeneral : tmyquery;
begin
   sqlgeneral := tmyquery.Create(nil);
   sqlgeneral.Connection := dmaccesos.conexion;
   if querys('select UCIdUser as id from UCTabUsers where UCLogin = "'+frmprincipal.ucprincipal.CurrentUser.LoginName+'"',0,sqlgeneral)>0 then
      idvendedor:=sqlgeneral.fieldbyname('id').asstring
   else
      idvendedor:='0';

   //Trae el numero de cuenta menor disponible de las que tiene apartadas el vendedor
   result := 0;
   querys('Select idcliente from clientes where estatus=3 and idvendedor='+idvendedor, 0, sqlgeneral);
   if sqlgeneral.RecordCount>0 then
   begin
      sqlgeneral.First;
      result:=sqlgeneral.fieldbyname('idcliente').AsInteger;
   end
   else
   begin
      querys('select max(idcliente) from clientes',0,SqlGeneral);
      result:=SqlGeneral.Fields.Fields[0].AsInteger + 1;
   end;
   sqlgeneral.Free;
end;

function ShowNetworkStatus:boolean;
var Flags : DWORD;
begin
Result := IsNetworkAlive(@Flags);
end;

procedure DatosConexion;
//var //Host	: PHostEnt; Destino: In_addr;
//s:string;
begin
   {if ShowNetworkStatus = true then
   begin
      //Hace el ping
      //Destino.S_addr := inet_addr(Pchar(GetConfiguraciones('IpServer', true)));
      s :=   dmaccesos.IniFile.ReadString('CONEXION', 'ipadd', '');
      Destino.S_addr := inet_addr(Pchar(s));
      if( Destino.S_addr = 0 )then
         //Host := GetHostbyName(PChar(GetConfiguraciones('IpServer', true)))
         Host := GetHostbyName(PChar(s))
      else
         Host := GetHostbyAddr(@Destino,sizeof(in_addr), AF_INET);

      if (Host = nil ) and (s <> '10.0.0.245') then
      begin
         with dmaccesos do
         begin
            conexion.Server   := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'ipadd', '');
            conexion.Database := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'bd', '');
            conexion.Username := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'usuario', '');
            conexion.Password := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'pass', '');
         end;
      end
      else
      begin    }
         with dmaccesos do
         begin
            conexion.Server   := IniFile.ReadString('CONEXION', 'ipadd', '');
            conexion.Database := IniFile.ReadString('CONEXION', 'bd', '');
            conexion.Username := IniFile.ReadString('CONEXION', 'usuario', '');
            conexion.Password := IniFile.ReadString('CONEXION', 'pass', '');
            conexion.Port     := strtoint(IniFile.ReadString('CONEXION', 'puerto', ''));
         end;
     { end;
   end
   else
   begin
      with dmaccesos do
      begin
         conexion.Server   := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'ipadd', '');
         conexion.Database := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'bd', '');
         conexion.Username := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'usuario', '');
         conexion.Password := DMSincronizar.IniFile.ReadString('CONEXION_LOCAL', 'pass', '');
      end;
   end;    }
end;

function ConectadaServidor:boolean;
begin
//if GetConfiguraciones('IpServer', true) = DMAccesos.conexion.Server then
  result := true;
{else
  result := false;}
end;

function PrimeroMesActual : tdate;
begin
result := EncodeDate(yearof(today), monthof(today),1);
end;

function ValidaCancelacionMensualidad(idpedido, idcliente:string):boolean;
var sqlgeneral,  sqlgeneral2:TMyQuery;
begin
sqlgeneral := TMyQuery.Create(nil);
sqlgeneral.Connection := dmaccesos.conexion;
sqlgeneral2 := TMyQuery.Create(nil);
sqlgeneral2.Connection := dmaccesos.conexion;

if querys('Select idpedido from pedidos where idpedido = '+idpedido+' and estatus > 2', 0, sqlgeneral) = 0 then
  begin
  result := false;
  exit;
  end;

querys('Select cod_cve, anualidad from DetPedido d left join pedidos p on p.idpedido=d.idpedido where d.idpedido = '+idpedido+')', 0, sqlgeneral);
while not eof = true do
  begin
  if querys('Select cod_cve, idcliente, d.idpedido from DetPedido d left join pedidos p on p.idpedido=d.idpedido where '+
            'p.idcliente = '+idcliente+' and p.idpedido <> '+idpedido+' and p.estatus > 2 and d.cod_cve ="'+
            sqlgeneral.fieldbyname('cod_cve').AsString+'" and anualidad = "'+sqlgeneral.fieldbyname('anualidad').AsString+'"', 0, sqlgeneral2) = 0 then
     begin
     result := false;
     exit;
     end;
  result := true;
  sqlgeneral.next;
  end;
end;

function generarpedidosCom(cliente:string;nomeses:integer; valida:boolean):boolean;
var   x,mes,year,cont,pos:integer;     // cant,
      idpedido,tc,costohr,piva,primdia,ultdia,m:string;  // noserie,   ,cadena
      subtotal,iva,total:double;
begin
   with dmreportes do
   begin
      if querys('select noserie from comunicadores where estatus=1 and disponible=1',0,sqlgeneral5)=0 then
      begin
           application.MessageBox('NO HAY COMUNICADORES DISPONIBLES... NO SE PODRAN GENERAR LOS PEDIDOS','Aviso',MB_OK+MB_ICONWARNING);
           result:=false;
           exit;
      end;
      cont:=0;
      mes:=MonthOf(date);
      year:=YearOf(date);
      //validar que tenga un pedido de equipo para poder asignar el comunicador y que tenga instalacion
      if valida then
           if querys('Select idpedido,idcliente,concepto,totmn from pedidos p left join DetPedido dp using(idpedido) '+
              ' left join UnidadNegocio u on u.idunidadnegocio=p.idunidadnegocio '+
              ' where p.idcliente='+cliente+' and u.instalacion=1 and p.estatus in (0,3) and dp.cod_cve="instcomunicador"',0,sqlgeneral5)=0 then
            begin
              application.MessageBox('NO SE PUEDEN GENERAR LOS PEDIDOS, LA CUENTA NO TIENE NINGUN PEDIDO DE EQUIPO','AVISO',MB_ICONINFORMATION);
              result := false;
              exit;
            end;
      for x:=0 to nomeses-1 do
      begin
         //validar los meses cambio de dic a ene
         if (mes+x)>12 then
         begin
            inc(cont);
            pos:=cont;
         end
         else
            pos:=mes+x;
         //validar el cambio de anio
         if (mes+x)=13 then
          inc(year);
         if pos<10 then
            m:='0'+inttostr(pos)
         else
            m:=inttostr(pos);
         primdia:=inttostr(year)+'/'+m+'/01';
         ultdia:=inttostr(year)+'/'+m+'/'+inttostr(DaysInMonth(strtodate(primdia)));

         //BUSQUEDA DE VARIABLES
         querys('select max(idpedido)+1 as pedido from pedidos',0,sqlgeneral5);
         idpedido:=sqlgeneral5.fieldbyname('pedido').asstring;
         querys('select valor from configuraciones where concepto="TipoCambio"',0,SqlGeneral5);
         tc:=sqlgeneral5.fieldbyname('valor').asstring;
         querys('select valor from configuraciones where concepto="CostoHora"',0,sqlgeneral5);
         costohr:=sqlgeneral5.fieldbyname('valor').asstring;
         querys('select valor from configuraciones where concepto="IVA"',0,sqlgeneral5);
         piva:=sqlgeneral5.fieldbyname('valor').AsString;
         querys('select idcategoria from clientes where idcliente='+cliente,0,sqlgeneral6);
         querys('select costomensual from categorias where idcategoria='+sqlgeneral6.fieldbyname('idcategoria').asstring,0,sqlgeneral5);
         subtotal:=sqlgeneral5.fieldbyname('costomensual').asfloat;
         iva:=subtotal*(strtofloat(piva));
         total:=(subtotal+iva);
         querys('select descripcion from UnidadNegocio where idunidadnegocio=4',0,sqlgeneral6);
         querys('select valor from configuraciones where concepto="RentaComunicador"',0,sqlgeneral5);
         subtotal:=sqlgeneral5.fieldbyname('valor').AsFloat;
         iva:=subtotal*(strtofloat(piva));
         total:=subtotal+iva;
         //GENERAR LOS PEDIDOS DE LA RENTA DEL COMUNICADOR
         if querys('select idpedido from pedidos where idcliente='+cliente+' and idunidadnegocio=2 '+
         ' and fechacreacion="'+primdia+'" and concepto like "%comunicador%" and concepto like "%'+UpperCase(meses[pos])+'%" and'+
         ' concepto like "%'+inttostr(year)+'%"',0,sqlgeneral5)=0 then
         begin
            querys('select idorigen,idvendedor from clientes where idcliente='+cliente,0,sqlgeneral6);
            //pedido
            querys('insert into pedidos (idpedido,idcliente,idunidadnegocio,idorigen,fechacreacion,usuario,fecha,hora,tipocambio,'+
            'totmat,costohrs,subtotal,piva,iva,totdlls,totmn,estatus,concepto,idvendedor,fechavencimiento) values ('+
            idpedido+','+cliente+',2,'+sqlgeneral6.fieldbyname('idorigen').asstring+',"'+primdia+'","'+
            frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+timetostr(time)+'",'+tc+','+
            Format('%8.2f',[subtotal])+','+costohr+','+Format('%8.2f',[subtotal])+','+piva+
            ','+Format('%8.2f',[iva])+','+Format('%8.2f',[(total/strtofloat(tc))])+','+Format('%8.2f',[total])+
            ',0,"RENTA MENSUAL DE COMUNICADOR CORRESPONDIENTE A '+uppercase(meses[pos])+' DE '+inttostr(year)+'","'+
            sqlgeneral6.fieldbyname('idvendedor').asstring+'","'+ultdia+'")',1,sqlgeneral5);
            //detalle pedido
            querys('insert into DetPedido (idpedido,cant,cod_cve,utilidad,costo,tc,usuario,fecha,hora) values ('+
            inttostr(strtoint(idpedido))+',1,"RENTACOM'+m+'","A",'+Format('%8.2f',[subtotal])+',1,"'+
            frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+timetostr(time)+'")',1,sqlgeneral5);
            //GENERAR BOLETAS COMUNICADOR
            querys(GeneraBoletas(strtoint(cliente),strtoint(idpedido),ultdia,floattostr(subtotal)),1,sqlgeneral5);
            //INSERTAR RENTAS COMUNICADOR
            //INSERTAR LAS RENTAS DE LOS COMUNICADORES
            querys('insert into rentascom (idcliente,idpedido,fechaalta,fecharenta,usuario,fecha,hora) '+
            'values ('+cliente+',"'+idpedido+'","'+datetostr(date)+'","'+ultdia+'","'+
            frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+
            timetostr(time)+'")',1,sqlgeneral6);
         end;
      end;
      result:=true;
   end;
end;

function generarpedidosPol(cliente:string;nomeses:integer):boolean;
var   x,mes,year,cont,pos:integer;     // cant,
      idpedido,tc,costohr,piva,primdia,ultdia,m:string;  // noserie,   ,cadena
      subtotal,iva,total:double;
begin
   with dmreportes do
   begin
      cont:=0;
      mes:=MonthOf(date);
      year:=YearOf(date);
      for x:=0 to nomeses-1 do
      begin
         //validar los meses cambio de dic a ene
         if (mes+x)>12 then
         begin
            inc(cont);
            pos:=cont;
         end
         else
            pos:=mes+x;
         //validar el cambio de anio
         if (mes+x)=13 then
          inc(year);
         if pos<10 then
            m:='0'+inttostr(pos)
         else
            m:=inttostr(pos);
         primdia:=inttostr(year)+'/'+m+'/01';
         ultdia:=inttostr(year)+'/'+m+'/'+inttostr(DaysInMonth(strtodate(primdia)));

         //BUSQUEDA DE VARIABLES
         querys('select max(idpedido)+1 as pedido from pedidos',0,sqlgeneral5);
         idpedido:=sqlgeneral5.fieldbyname('pedido').asstring;
         querys('select valor from configuraciones where concepto="TipoCambio"',0,SqlGeneral5);
         tc:=sqlgeneral5.fieldbyname('valor').asstring;
         querys('select valor from configuraciones where concepto="CostoHora"',0,sqlgeneral5);
         costohr:=sqlgeneral5.fieldbyname('valor').asstring;
         querys('select valor from configuraciones where concepto="IVA"',0,sqlgeneral5);
         piva:=sqlgeneral5.fieldbyname('valor').AsString;
         querys('select valor from configuraciones where concepto="PolizaManto"',0,sqlgeneral5);
         subtotal:=sqlgeneral5.fieldbyname('valor').AsFloat;
         iva:=subtotal*(strtofloat(piva));
         total:=subtotal+iva;
         //GENERAR LOS PEDIDOS DE LA RENTA DEL COMUNICADOR
         if querys('select idpedido from pedidos where idcliente='+cliente+' and idunidadnegocio=19 '+
         ' and fechacreacion="'+primdia+'" and concepto like "%poliza%" and concepto like "%'+UpperCase(meses[pos])+'%" and'+
         ' concepto like "%'+inttostr(year)+'%"',0,sqlgeneral5)=0 then
         begin
            querys('select idorigen,idvendedor from clientes where idcliente='+cliente,0,sqlgeneral6);
            //pedido
            querys('insert into pedidos (idpedido,idcliente,idunidadnegocio,idorigen,fechacreacion,usuario,fecha,hora,tipocambio,'+
            'totmat,costohrs,subtotal,piva,iva,totdlls,totmn,estatus,concepto,idvendedor,fechavencimiento) values ('+
            idpedido+','+cliente+',2,'+sqlgeneral6.fieldbyname('idorigen').asstring+',"'+primdia+'","'+
            frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+timetostr(time)+'",'+tc+','+
            Format('%8.2f',[subtotal])+','+costohr+','+Format('%8.2f',[subtotal])+','+piva+
            ','+Format('%8.2f',[iva])+','+Format('%8.2f',[(total/strtofloat(tc))])+','+Format('%8.2f',[total])+
            ',0,"POLIZA DE MANTENIMIENTO DE CCTV DEL '+uppercase(meses[pos])+' DE '+inttostr(year)+'","'+
            sqlgeneral6.fieldbyname('idvendedor').asstring+'","'+ultdia+'")',1,sqlgeneral5);
            //detalle pedido
            querys('insert into DetPedido (idpedido,cant,cod_cve,utilidad,costo,tc,usuario,fecha,hora) values ('+
            inttostr(strtoint(idpedido))+',1,"PMCCTV'+m+'","A",'+Format('%8.2f',[subtotal])+',1,"'+
            frmprincipal.ucprincipal.CurrentUser.LoginName+'","'+datetostr(date)+'","'+timetostr(time)+'")',1,sqlgeneral5);
            //GENERAR BOLETAS COMUNICADOR
            querys(GeneraBoletas(strtoint(cliente),strtoint(idpedido),ultdia,floattostr(subtotal)),1,sqlgeneral5);
         end;
      end;
      result:=true;
   end;
end;

procedure eliminarpedidosCom(cliente,tipo:string);
var unegocio,clave:string;
begin
   with dmreportes do
   begin
      if tipo='17' then
      begin
        unegocio:='2';
        clave:='RENTACOM';
      end;
      if tipo='18' then
      begin
        unegocio:='2';
        clave:='PMCCTV';
      end;
      querys('select idpedido,concepto from pedidos p left join DetPedido dp using(idpedido) '+
      ' where p.estatus=0 and idunidadnegocio='+unegocio+' and dp.cod_cve LIKE "%'+clave+'%" and p.idcliente='+cliente+
      ' and fechacreacion>"'+datetostr(Date)+'"',0,sqlgeneral);
      sqlgeneral.First;
      while not sqlgeneral.Eof do
      begin
         querys('delete from pedidos where idpedido='+sqlgeneral.fieldbyname('idpedido').asstring,1,sqlgeneral2);
         querys('delete from DetPedido where idpedido='+sqlgeneral.fieldbyname('idpedido').asstring,1,sqlgeneral2);
         querys('delete from rentascom where idpedido='+sqlgeneral.fieldbyname('idpedido').asstring,1,sqlgeneral2);
         querys('delete from boletas where idpedido='+sqlgeneral.fieldbyname('idpedido').asstring,1,sqlgeneral2);
         sqlgeneral.Next;
      end;
   end;
end;

procedure saldarcontratocortesia(cliente,pedido,fechacreacion,fechavence:string);
var idremision:integer; tc,total:string;
begin
   with dmreportes do
   begin
      //actualizar el pedido a REM2 y dejarlo en estatus saldado
      querys('update pedidos set estatus=5, saldado=1, saldo=0 where idpedido='+pedido,1,sqlgeneral);
      //trae el ultimo idremison
      querys('select idremicion from folios',0,sqlgeneral);
      idremision:=sqlgeneral.fieldbyname('idremicion').AsInteger+1;
      querys('insert into RemiFact (idremicion,idpedido,idfactura,FechaAlta,HoraAlta,UsuarioAlta) '+
      'values( '+inttostr(idremision)+','+pedido+' ,"0","'+fechacreacion+'","'+TimeToStr(time)+'","ADMIN") ',1,sqlgeneral);
      //traer el total del pedido para insertar los pagos
      querys('select totmn from pedidos where idpedido='+pedido,0,sqlgeneral2);
      total:=sqlgeneral2.fieldbyname('totmn').asstring;
      querys('insert into PagosClientes (movimiento,idcliente,idpedido,idremicion,FechaAlta,cargo,FechaVence,usuario,fecha,hora,'+
      'restante,abono) values( 0,'+cliente+','+pedido+','+inttostr(idremision)+',"'+fechacreacion+'",'+
      total+',"'+fechaVence+'","ADMIN",CURDATE(),'+'CURTIME(),0,0) ',1,sqlgeneral);
      //tipo de cambio
      tc:=GetConfiguraciones('tipocambio',true);
      querys('select pc.idpago as idpago,t.nombre from PagosClientes pc,TiposPagos t where pc.idpedido= '+
      pedido+' and t.idtipopago=19',0,sqlgeneral2);
      querys('INSERT INTO PagosClientes (moneda,TipoPago,TipoCambio,idpago_afecta,idcliente,'+
      'idpedido,abono,idremicion,movimiento,usuario,FechaVence,fecha,hora,FechaAlta,TipoCobro,notas) '+
      'values("P","COR","'+tc+'",'+sqlgeneral2.fieldbyname('idpago').asstring +','+
      ''+cliente+','+pedido+','+total+','+inttostr(idremision)+',11,"ADMIN","'+fechavence+'",curdate(),CURTIME(),"'+fechacreacion+'",3,'+
      '"'+'ABONO POR '+sqlgeneral2.fieldbyname('nombre').AsString+'")',1,sqlgeneral);
      querys('update folios set idremicion='+inttostr(idremision),1,sqlgeneral);
   end;
end;

procedure LiberarMemoria;
begin
  if Win32Platform = VER_PLATFORM_WIN32_NT then
    SetProcessWorkingSetSize(GetCurrentProcess, $FFFFFFFF, $FFFFFFFF);
end;

function ProgramsFileDir:string;
Var Reg:TRegistry;
begin
//Obtener el directorio "Archivos de Programa\"
   Reg:=TRegistry.Create;
   Reg.RootKey:=HKEY_LOCAL_MACHINE;
   If Not Reg.OpenKeyReadOnly('\SOFTWARE\Microsoft\Windows\CurrentVersion') Then
     Raise Exception.Create('Program Files Path Error');
   result:=Reg.ReadString('ProgramFilesDir');
end;


function SentenceCase(cadena:string):string;
begin
cadena := LowerCase(cadena);
result := UpperCase(LeftStr(cadena, 1)) + RightStr(cadena, length(cadena)-1);
end;

function TitleCase(cadena:string):string;
var i, b:integer;
begin
cadena := LowerCase(cadena);
cadena := UpperCase(LeftStr(cadena, 1)) + RightStr(cadena, length(cadena)-1);
b:= -1;
for i:= 0 to length(cadena)-1 do
  begin
  if (cadena[i] = ' ') or (cadena[i] = '.') then
    b:= i+1;

  if b = i then
    cadena := LeftStr(cadena, i-1) + UpperCase(MidStr(cadena, i, 1))  + RightStr(cadena, length(cadena)-(i));
  end;
result := cadena;
end;

function CopiaTodo(Origen,Destino:String):LongInt;
var
	F : TShFileOpStruct;
	sOrigen, sDestino : String;
begin
	try
		//Result := 0;
		sOrigen := Origen + #0;
		sDestino := Destino + #0;
		with F do
		begin
			Wnd := Application.Handle;
			wFunc := FO_COPY;
			pFrom := @sOrigen[1];
			pTo := @sDestino[1];
			fFlags := FOF_ALLOWUNDO or FOF_NOCONFIRMATION
		end;
		Result := ShFileOperation(F);
	except
		//close;
    result := 0;
	end;
end;

function ServiceGetStatus(
  sMachine,
  sService : string ) : DWord;
var
  //
  // service control
  // manager handle
  schm,
  //
  // service handle
  schs   : SC_Handle;
  //
  // service status
  ss     : TServiceStatus;
  //
  // current service status
  dwStat : DWord;
begin
  dwStat := 0;

  // connect to the service
  // control manager
  schm := OpenSCManager(
    PChar(sMachine),
    Nil,
    SC_MANAGER_CONNECT);

  // if successful...
  if(schm > 0)then
  begin
    // open a handle to
    // the specified service
    schs := OpenService(
      schm,
      PChar(sService),
      // we want to
      // query service status
      SERVICE_QUERY_STATUS);

    // if successful...
    if(schs > 0)then
    begin
      // retrieve the current status
      // of the specified service
      if(QueryServiceStatus(
           schs,
           ss))then
      begin
        dwStat := ss.dwCurrentState;
      end;

      // close service handle
      CloseServiceHandle(schs);
    end;

    // close service control
    // manager handle
    CloseServiceHandle(schm);
  end;

  Result := dwStat;
end;

function ServiceRunning(
  sMachine,
  sService : string ) : boolean;
begin
  Result := SERVICE_RUNNING =
    ServiceGetStatus(
      sMachine, sService );
end;

//////////////////////

//#FE

function FacturaElectronica(idcliente, idpedido, formapago, Estado, TipoCFD:string; directo:boolean; pesos:boolean = true; imprimir :boolean = true):string;
var Encabezado, Detalle, Impuestos, Folio, serie, SubTotal, sumaImpuestos, IVA, PIVA, IEPS, Total, rfc, impresora, email,
    concepto, Letra, dec, costoart, totalart, formaPA,  FXComprobante, factura,iddoc,  FechaFactura, cadena,
    VersionFE, AnoAprobacion, NumAprobacion, subtotalpesos, ivapesos, totalpesos, TipoCambio,
    tmpser, regimen, metodopago, ctaban, usaIEPS,
    calle, numext, numint, colonia, localidad, referencia, municipio, estadodom, pais, cp, lugarexp,
    misc01,  misc02, misc03, misc04, misc05, misc06, misc07, misc08,
    misc09, misc10, misc11, misc12, misc13, misc14, misc15, pIEPS :string;
    memo :Tmemo;
    otrasseries : TStringList;
    deducibleIEPS : boolean;
begin
memo := tmemo.Create(nil);
memo.Parent := frmprincipal;
memo.visible := false;
memo.Text := '';

Encabezado := ''; Detalle := ''; Impuestos := '';
usaIEPS := '0';
pIEPS := GetConfiguraciones('IEPS');

with dmreportes do
begin
  if TipoCFD = 'FA' then
  begin
    querys('Select idfactura, FechaFactura from pedidos where idpedido = '+idpedido, 0, sqlgeneral7);
    factura := sqlgeneral7.fieldbyname('idfactura').asstring;
    FechaFactura := sqlgeneral7.fieldbyname('FechaFactura').asstring;
    SeparaSerieFolio(factura, Serie, Folio);
    iddoc := idpedido;
    FXComprobante := 'ingreso';
  end;

  if TipoCFD = 'NC' then
  begin
    querys('Select idnc, idfactura, letras, FechaNc from NotasCredito join FoliosFE where concat(serie, idnc) = "'+idpedido+'" and procedencia = "NC FE"', 0, sqlgeneral7);
    factura := sqlgeneral7.fieldbyname('letras').asstring + idpedido;
    FechaFactura := sqlgeneral7.fieldbyname('FechaNc').asstring;
    serie :=  sqlgeneral7.fieldbyname('letras').asstring;
    Folio := sqlgeneral7.fieldbyname('idnc').asstring;
    iddoc := sqlgeneral7.fieldbyname('idfactura').asstring;
    FXComprobante := 'egreso';
  end;

  //VALIDA si se usara el IEPS
  if querys('Select letras from FoliosFE where letras in('+GetConfiguraciones('serieIEPS')+')', 0, sqlgeneral7) > 0 then
  begin
    if sqlgeneral7.fieldbyname('letras').asstring = serie then
       usaIEPS := '1';
  end;


  //importante minusculas
  //ENCABEZADO
  querys('Select VersionFE, AnoAprobacion, NumAprobacion from FoliosFE where letras = "'+Serie+'"', 0, sqlgeneral7);
  VersionFE := sqlgeneral7.fieldbyname('VersionFE').asstring;
  AnoAprobacion := sqlgeneral7.fieldbyname('AnoAprobacion').asstring;
  NumAprobacion := sqlgeneral7.fieldbyname('NumAprobacion').asstring;

  sqlDatosEmpresa.Open;
  calle := SentenceCase(sqlDatosEmpresaCalle.AsString);
  numext := sqlDatosEmpresaNumero.AsString;
  numint := sqlDatosEmpresanumint.AsString;
  colonia := TitleCase(sqlDatosEmpresaColonia.AsString);
  localidad := SentenceCase(sqlDatosEmpresaciudad.AsString);
  referencia := SentenceCase(sqlDatosEmpresareferencia.AsString);
  municipio := SentenceCase(sqlDatosEmpresaciudad.AsString);
  estadodom := TitleCase(sqlDatosEmpresaestado.AsString);
  pais := SentenceCase(GetConfiguraciones('pais', true));
  cp := sqlDatosEmpresaCP.AsString;

  //Datos Empresa   1-41
  if formapago = '' then
    formapago := 'en una sola exhibicion';

  Encabezado := '~' + Folio + '|' + TitleCase(sqlDatosEmpresanombre.AsString) + '|' + AnsiReplaceStr(sqlDatosEmpresarfc.AsString, '-', '') +
                '|' + calle + '|' + numext + '|' + numint + '|' + colonia + '|' + localidad +'|' + referencia +
                '|' + municipio + '|' + estadodom + '|' + pais + '|' + cp +
                '|' + sqlDatosEmpresatelefono.AsString + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                VersionFE + '|' + Serie + '|' + NumAprobacion + '|' + formapago +
                '|' + FormatDateTime('yyyy-mm-dd', strtodate(FechaFactura)) + '|' + FormatDateTime('hh:mm:ss', time) +
                '|' + calle + '|' + numext + '|' + numint + '|' + colonia + '|' + localidad +'|' + referencia +
                '|' + municipio + '|' + estadodom + '|' + pais + '|' + cp + '|' ;

  sqlDatosEmpresa.Close;

  //Datos del cliente
  querys('Select '+ClienteNombre('cf')+' as nombre, RFCCres, cf.dir, cf.numero, col.nombre as colonia, col.cp, '+
         'e.nombre as estado, m.nombre as municipio, Left(g.nombre,12) as giro, left(u.codigo,4) as vendedor, c.sector, '+
         '"" as responsable, "" as puesto, t.telefono, if(c.email like "%@%", c.email, "") as email, deducibleIEPS  '+
         'from clientes c left join contactos con on con.idcontacto=c.idcontacto and procedencia = "clientes" '+
         'left join ClientesFact cf on c.idfact=cf.idfact Left join colonias col on col.idcol = cf.idcol '+
         'Left join municipios m on m.idmnp=col.idmnp Left join estados e on e.idestado = col.idestado '+
         'Left join giros g on c.idgiro = g.idgiro left join usuarios u on u.idusuario=c.idvendedor '+
         'Left join telefonos t on t.idtel=c.idtel '+
         'where c.idcliente = '+idcliente+' group by c.idcliente', 0, sqlgeneral8);
  email := sqlgeneral8.fieldbyname('email').AsString;
  rfc := trim(AnsiReplaceStr(sqlgeneral8.fieldbyname('RFCCres').AsString, '-', ''));
  deducibleIEPS :=  sqlgeneral8.fieldbyname('deducibleIEPS').AsBoolean;

  if deducibleIEPS = false then
    usaIEPS := '0';

  Encabezado := Encabezado + UpperCase(sqlgeneral8.fieldbyname('nombre').AsString) + '|' + RFC +
                '|' +  UpperCase(sqlgeneral8.fieldbyname('dir').AsString) + '|' + sqlgeneral8.fieldbyname('numero').AsString + '|' + '|' +
                 UpperCase(sqlgeneral8.fieldbyname('colonia').AsString) + '|' + '|' + '|' +
                 UpperCase(sqlgeneral8.fieldbyname('municipio').AsString) +','+ '|' +
                 UpperCase(sqlgeneral8.fieldbyname('estado').AsString) + '|' +  UpperCase(GetConfiguraciones('Pais', true)) +
                '|' + sqlgeneral8.fieldbyname('cp').AsString + '|' ;


  //Datos del monto
  if pesos = true then
  begin

    TipoCambio := '1';

    if TipoCFD = 'FA' then
      cadena := 'select a.cod_cve, d.cant, p.piva, p.concepto, p.idpedido, a.moneda,  p.TipoCambio, '+
               '(d.costo*d.tc) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) -'+
               '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))*d.tc,2) as Total '+
               'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve '+
               'left join pedidos p on p.idpedido = d.idpedido '+
               'where d.idpedido = ' + idpedido + ' '+
               'order by d.cod_cve asc';
        {querys('Select piva, sum(SubTotal) as SubTotal, sum(IEPS) as IEPS, '+
              ' sum(Impuesto) as Impuesto, sum(Total) as Total, '+
              'letras(sum(Total), "PESOS") as letras, concepto  '+
              'from ( '+
              'select piva, idpedido, cod_cve, round(if(1<>'+usaIEPS+', SubTotal, SubTotal/1.'+pIEPS+'),2) as SubTotal, '+
              'if(1<>'+usaIEPS+', 0, SubTotal-round(SubTotal/1.'+pIEPS+',2)) as IEPS, Impuesto, Total, concepto from ('+
              'select p.piva, p.idpedido, d.cod_cve, '+
              'round( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
              '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))*d.tc,2) as SubTotal, '+

              'round( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
              '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas) ) * p.piva*d.tc, 2 ) as Impuesto, '+
              'round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
              '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas)) * (1 + p.piva)*d.tc,2)  as Total, p.concepto '+
              'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve '+
              'left join pedidos p on p.idpedido = d.idpedido where d.idpedido = ' + idpedido + ' '+
              ') as t '+
              ') as p group by idpedido '+
              'order by cod_cve asc', 0, sqlgeneral7);  }

    if TipoCFD = 'NC' then
      cadena := 'select a.cod_cve, d.cant, nc.observaciones as concepto, nc.piva, concat(d.serie, d.idnc) as idpedido, a.moneda,  nc.TipoCambio, '+
           '(d.costo*d.tc) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
           '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))*d.tc,2) as Total '+
           'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve '+
           'left join NotasCredito nc on nc.idnc = d.idnc and nc.serie=d.serie '+
           'where concat(d.serie, d.idnc) = "' + idpedido + '" '+
           'order by d.cod_cve asc';
      { querys('Select piva, sum(SubTotal) as SubTotal, '+
             ' sum(Impuesto) as Impuesto, sum(Total) as Total,  sum(IEPS) as IEPS, '+
             'letras(sum(Total), "PESOS") as letras, concepto  '+
             'from ( '+
             'select piva, idpedido, cod_cve, round(if(1<>'+usaIEPS+', SubTotal, SubTotal/1.'+pIEPS+'),2) as SubTotal, '+
             'if(1<>'+usaIEPS+', 0, SubTotal-round(SubTotal/1.'+pIEPS+',2)) as IEPS, Impuesto, Total, concepto from ('+
             'select nc.piva, nc.idnc, d.cod_cve, '+
             'round( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
             '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
             '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))*d.tc,2) as SubTotal, '+

             'round( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
             '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
             '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))   * nc.piva*d.tc, 2 ) as Impuesto, '+

             'round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
             '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
             '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))   * (1 + nc.piva)*d.tc, 2 ) as Total, '+

             'nc.observaciones as concepto '+

             'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve '+
             'left join NotasCredito nc on nc.idnc = d.idnc and nc.serie=d.serie '+
             'where concat(nc.serie, nc.idnc) = "' + idpedido + '" '+
             ') as t '+
             ') as p group by idnc order by cod_cve asc', 0, sqlgeneral7);  }

    querys('Select SubTotal, IEPS, round((SubTotal+IEPS) *piva,2) as Impuesto, '+
           'round((SubTotal+IEPS) *(1+piva),2) as Total, '+
           'letras(round((SubTotal+IEPS) *(1+piva),2), "PESOS") as letras, concepto, piva from ( '+
           'Select sum(Total) as SubTotal, concepto, '+
           'if(1<>'+usaIEPS+', 0, round(sum(Total)*0.'+pIEPS+',2)) as IEPS, piva, idpedido from ( '+
           'select cod_cve, cant,  piva, concepto, idpedido, ' +
           //'round(if(moneda = "D", if(1<>0, costo, costo/1.25) * TipoCambio, if(1<>0, costo, costo/1.25)), 2) as costo, '+
           'round(if(1<>'+usaIEPS+', costo, costo/1.'+pIEPS+'),2) as costo, '+
           //'round(if(moneda = "D", (if(1<>0, costo, round( costo/1.25,2))*cant) * TipoCambio, if(1<>0, costo, round( costo/1.25,2))*cant), 2) as Total from ( '+
           'round(if(1<>'+usaIEPS+', costo, round( costo/1.'+pIEPS+',2))*cant,2) as Total  from ( '+
           {'select a.cod_cve, d.cant, p.piva, p.concepto, '+
           '(d.costo*d.tc) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) -'+
           '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))*d.tc,2) as Total '+
           'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve '+
           'left join pedidos p on p.idpedido = d.idpedido '+
           'where d.idpedido = ' + idpedido + ' '+
           'order by d.cod_cve asc'+}
           cadena +
           ' ) as t  ) as t  group by idpedido) as t', 0, sqlgeneral7);

    SubTotal := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Subtotal').AsFloat]));
    IEPS := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('IEPS').AsFloat]));
    IVA := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Impuesto').AsFloat]));
    PIVA := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('piva').AsFloat * 100]));
    Total := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Total').AsFloat]));

    sumaImpuestos := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('IEPS').AsFloat+sqlgeneral7.fieldbyname('Impuesto').AsFloat]));

    subtotalpesos := SubTotal;
    ivapesos := IVA;
    totalpesos := Total;
  end
  else       //dolares
  begin
    //Datos del monto
    if TipoCFD = 'FA' then
      cadena := 'select a.cod_cve, d.cant, p.concepto, p.TipoCambio, p.piva, '+
                '(d.costo) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
                '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas)),2) as Total '+
                'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve '+
                'left join pedidos p on p.idpedido = d.idpedido '+
                'where d.idpedido = ' + idpedido + ' '+
                'order by d.cod_cve asc';
      { querys('select TipoCambio, piva, idpedido, cod_cve, round(if(1<>'+usaIEPS+', SubTotal, SubTotal/1.'+pIEPS+'),2) as SubTotal, '+
               'if(1<>'+usaIEPS+', 0, SubTotal-round(SubTotal/1.'+pIEPS+',2)) as IEPS, Impuesto, Total, letras, concepto from ('+

               'select p.TipoCambio, p.piva, round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))),2) as SubTotal, '+

               'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * p.piva, 2 ) as Impuesto, '+

               'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + p.piva), 2 ) as Total, '+

               'letras(round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + p.piva), 2 ), "DOLARES") as letras, '+

               'p.concepto '+

               'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve left join pedidos p '+
               'on p.idpedido = d.idpedido where d.idpedido = ' + idpedido + ' group by p.idpedido order by d.cod_cve asc'+
               ') as t ', 0, sqlgeneral7);   }

    if TipoCFD = 'NC' then
      cadena := 'select a.cod_cve, nc.TipoCambio, nc.piva, nc.observaciones as concepto, d.cant, '+
           '(d.costo) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
           '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas)),2) as Total '+
           'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve '+
           'left join NotasCredito nc on nc.idnc = d.idnc and nc.serie=d.serie '+
           'where concat(d.serie, d.idnc) = "' + idpedido + '" '+
           'order by d.cod_cve asc';
        {querys('select TipoCambio, piva, idpedido, cod_cve, round(if(1<>'+usaIEPS+', SubTotal, SubTotal/1.'+pIEPS+'),2) as SubTotal, '+
               'if(1<>'+usaIEPS+', 0, SubTotal-round(SubTotal/1.'+pIEPS+',2)) as IEPS, Impuesto, Total, letras, concepto from ('+

               'select nc.TipoCambio, nc.piva, round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))),2) as SubTotal, '+

               'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * nc.piva, 2 ) as Impuesto, '+

               'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + nc.piva), 2 ) as Total, '+

               'letras(round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
               '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
               '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + nc.piva), 2 ), "DOLARES") as letras, '+

               'nc.observaciones as concepto '+

               'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve left join NotasCredito nc '+
               'on nc.idnc = d.idnc where concat(d.serie, d.idnc) = "' + idpedido + '" group by nc.idnc order by d.cod_cve asc'+
               ') as t ', 0, sqlgeneral7);}

    querys('Select SubTotal, IEPS, TipoCambio, round((SubTotal+IEPS) *piva,2) as Impuesto, '+
           'round((SubTotal+IEPS) *(1+piva),2) as Total, '+
           'letras(round((SubTotal+IEPS) *(1+piva),2), "DOLARES") as letras, concepto, piva from ( '+
           'Select sum(Total) as SubTotal, concepto, TipoCambio, '+
           'if(1<>'+usaIEPS+', 0, round(sum(Total)*0.'+pIEPS+',2)) as IEPS, piva from ( '+
           'select cod_cve, cant,  piva, concepto, round(if(1<>'+usaIEPS+', costo, costo/1.'+pIEPS+'),2) as costo, '+
           'round(if(1<>'+usaIEPS+', costo, round( costo/1.'+pIEPS+',2))*cant,2) as Total, TipoCambio from ( '+
           cadena +
           ' ) as t ) as t ) as t', 0, sqlgeneral7);

    SubTotal := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Subtotal').AsFloat]));
    IEPS := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('IEPS').AsFloat]));
    IVA := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Impuesto').AsFloat]));
    Total := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Total').AsFloat]));
    PIVA := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('piva').AsFloat * 100]));

    sumaImpuestos := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('IEPS').AsFloat+sqlgeneral7.fieldbyname('Impuesto').AsFloat]));

    TipoCambio := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));
    subtotalpesos := trim(Format('%8.2f',[strtofloat(SubTotal)*sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));
    ivapesos := trim(Format('%8.2f',[strtofloat(IVA)*sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));
    totalpesos := trim(Format('%8.2f',[strtofloat(Total)*sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));
  end;



  concepto := AnsiReplaceStr(AnsiReplaceStr(sqlgeneral7.fieldbyname('concepto').AsString, char(#10), ''), char(#13),' ');
  Letra := uppercase(sqlgeneral7.fieldbyname('letras').AsString);

  //IMPRESORA
  if imprimir = true then
  begin
    querys('Select letras from FoliosFE fe left join puestos p on p.idpuesto =fe.idproc where letras = "'+serie+'" and '+
           '((procedencia = "PUESTO" and p.nombre = "CAJERA") or procedencia = "AUXILIAR" )', 0, dmreportes.sqlgeneral3);
    if dmreportes.sqlgeneral3.FieldByName('letras').AsString = serie then
      impresora := GetConfiguraciones('ImpresoraCajaFE', true)
    else
    begin
      querys('Select letras from FoliosFE fe left join puestos p on p.idpuesto =fe.idproc left join areas a on '+
             'a.idarea=p.idarea where procedencia = "PUESTO" '+
             'and p.nombre = "GERENTE" and a.nombre = "COBRANZA" and letras = "'+serie+'"', 0, dmreportes.sqlgeneral3);
      if dmreportes.sqlgeneral3.FieldByName('letras').AsString = serie then
        impresora := GetConfiguraciones('ImpresoraLotesFE', true)
      else
        impresora := GetConfiguraciones('ImpresoraFE', true);
    end;
  end
  else
    impresora := '';


  // Letra := '(' + uppercase(NumToLetras.Letras) + ' PESOS ' + dec + '/100)';
  //54-59
  Encabezado := Encabezado + SubTotal + '|' + IVA + '|' + Total + '|' + Estado + '|' + TipoCFD + '|' + '|' ;

  //Miscelaneos
  misc01 := idcliente;
  misc02 := UpperCase(sqlgeneral8.fieldbyname('giro').AsString);
  misc03 := UpperCase(sqlgeneral8.fieldbyname('responsable').AsString);
  misc04 := UpperCase(sqlgeneral8.fieldbyname('puesto').AsString);
  misc05 := trim(iddoc);
  misc06 := FormaPa;
  misc07 := sqlgeneral8.fieldbyname('vendedor').AsString;
  misc08 := sqlgeneral8.fieldbyname('sector').AsString;
  misc09 := '';
  misc10 := concepto;
  misc11 := trim(sqlgeneral8.fieldbyname('telefono').AsString);
  misc12 := '';             //serie esp
  misc13 := '';
  misc14 := '';
  misc15 := impresora;

  if leftstr(VersionFE,1) <> '2' then
  begin
    misc07 := impresora;
    misc15 := '1';
  end;

  otrasseries := TStringList.Create;
  //verificar si es formato diferente
  tmpser :=  GetConfiguraciones('OtroFormatoFE');
  split(',', tmpser, otrasseries);
  for i := 0 to otrasseries.Count -1 do
  begin
     if otrasseries[i] = serie then
       misc12 := '['+serie+']';
  end;

  regimen := GetConfiguraciones('regimenfiscal');
  lugarexp := municipio + ', ' + estadodom;

  {if querys('SELECT TipoPago, nomSAT, @tipo := if(@tipo="", nomSAT, concat(@tipo, ", ", nomSAT)) as tipo, @c:=@c+1 as c '+
         'from ( select distinct pc.TipoPago, tp.nomSAT, @tipo := "", @c:=0 from PagosClientes pc '+
         'left join TiposPagos tp on left(tp.iniciales,2)=pc.TipoPago '+
         'where pc.idpedido = ' + idpedido + ' and pc.movimiento not in(0, 3) '+
         'and pc.TipoPago is not null ) as t order by c desc', 0, sqlgeneral3) > 0 then
    metodopago := sqlgeneral3.fieldbyname('tipo').AsString
  else
     metodopago := 'No Identificado';

  if querys('SELECT @cb := if(@cb="", ctaban, concat(@cb, ", ", ctaban)) as cb , @c:=@c+1 as c  '+
            'from ( select distinct ctaban, @cb:="" from PagosClientes pc '+
            'where pc.idpedido = ' + idpedido + ' and pc.movimiento not in(0, 3) '+
            'and pc.TipoPago is not null and ctaban <> "") as t order by c desc', 0, sqlgeneral3) > 0 then
    ctaban := sqlgeneral3.fieldbyname('cb').AsString
  else
     ctaban := 'No Identificado';    }
  if TipoCFD = 'FA' then
  begin
    if querys('SELECT TipoPago, nomSAT, @tipo := if(@tipo="", nomSAT, concat(@tipo, ", ", nomSAT)) as tipo, '+
              'if(ctaban<>"No identificado", RIGHT(ctaban,4), "No identificado") as cb, @c:=@c+1 as c '+
              'from ( select distinct pc.TipoPago, tp.nomSAT, @tipo := "", @c:=0, '+
              'if(ctaban="", "No identificado", ctaban) as ctaban, @cb:="" '+
              'from PagosClientes pc left join TiposPagos tp on tp.iniciales=pc.TipoPago '+
              'where pc.idpedido = ' + idpedido + ' and pc.movimiento not in(0, 3) and iniciales <> "NC" '+
              'and pc.TipoPago is not null ) as t order by c desc', 0, sqlgeneral3) > 0 then
    begin
      metodopago := sqlgeneral3.fieldbyname('tipo').AsString;
      ctaban := sqlgeneral3.fieldbyname('cb').AsString;
    end
    else
    begin
      metodopago := 'No Identificado';
      ctaban := 'No Identificado';
    end;

    //si el metodo es no identificado
    if metodopago = 'No Identificado' then
    begin                                       //if(ctaban = "" or ctaban is null, "No Identificado", RIGHT(ctaban,4)) as ctaban
      if querys('select nomSAT, RIGHT(ctaban,4) as ctaban  from DetClientes dc '+
                'INNER JOIN TiposPagos tp on dc.tipocargo = tp.nombre where dc.idcliente =' + idcliente, 0, sqlgeneral3) > 0 then
        begin
          metodopago := sqlgeneral3.fieldbyname('nomSAT').AsString;
          ctaban := sqlgeneral3.fieldbyname('ctaban').AsString;
        end;
    end;
  end
  else
  begin
    metodopago := 'No Identificado';
    ctaban := 'No Identificado';
  end;


  //Adenda   60-193
  Encabezado := Encabezado + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + 'MXN' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + letra + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +

                //idcliente + '|' +
                //UpperCase(sqlgeneral8.fieldbyname('giro').AsString) + '|' + UpperCase(sqlgeneral8.fieldbyname('responsable').AsString) + '|' +
                //UpperCase(sqlgeneral8.fieldbyname('puesto').AsString) + '|' + trim(iddoc) + '|' + FormaPago + '|' +
                //sqlgeneral8.fieldbyname('vendedor').AsString + '|' + sqlgeneral8.fieldbyname('sector').AsString +
                //'|' + '|' + concepto + '|' + trim(sqlgeneral8.fieldbyname('telefono').AsString) + '|' + '|' + '|' + '|' + impresora +

                misc01 + '|' + misc02 + '|' + misc03 + '|' + misc04 + '|' + misc05 + '|' + misc06 + '|' +
                misc07 + '|' + misc08 + '|' + misc09 + '|' + misc10 + '|' + misc11 + '|' + misc12 + '|' +
                misc13 + '|' + misc14 + '|' + misc15 +

                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + email + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + subtotalpesos + '|' + ivapesos + '|' + totalpesos + '|' + '|' + '|' + '|' + '|' +
                '|' + piva + '|' + IEPS + '|' + '|' + '|' + regimen + '|' + ctaban + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                '|' + TipoCambio + '|' + '|' + '|' + lugarexp +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                AnoAprobacion + '|' + '|' + metodopago + '|' + FXComprobante + '|'+ '|' +
                sumaImpuestos ; //+ chr(13) ;
  memo.Lines.Add(Encabezado);

  //DETALLE FACTURA
  if pesos = true then
  begin
    if TipoCFD = 'FA' then
      querys('select cod_cve, descripcion, cant,  nom_envase,  '+
             'round(if(1<>'+usaIEPS+', costo, costo/1.'+pIEPS+'),2) as costo, '+
             'round(if(1<>'+usaIEPS+', costo, round( costo/1.'+pIEPS+',2))*cant,2) as Total  from ('+
             'select a.cod_cve, a.nombre as descripcion, d.cant, '+
             //'if(a.inventariable=0, "No aplica", nom_envase) as nom_envase, '+
             'IF (a.inventariable = 0, if(nom_envase <>"" or nom_envase is not null, nom_envase,"No aplica"), nom_envase) AS nom_envase,'+
             '(d.costo*d.tc) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
             '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))*d.tc,2) as Total '+
             'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve where d.idpedido = ' + idpedido + ' '+
             'order by d.cod_cve asc) as t', 0, sqlgeneral8);

    if TipoCFD = 'NC' then
      querys('select cod_cve, descripcion, cant,  nom_envase,  '+
             'round(if(1<>'+usaIEPS+', costo, costo/1.'+pIEPS+'),2) as costo, '+
             'round(if(1<>'+usaIEPS+', costo, round( costo/1.'+pIEPS+',2))*cant,2) as Total  from ('+
             'select a.cod_cve, a.nombre as descripcion, d.cant, '+
              //'if(a.unidades_caja > 0, "CAJA", "PIEZAS") as nom_envase, '+
              //'if(a.inventariable=0, "No aplica", nom_envase) as nom_envase, '+
             'IF (a.inventariable = 0, if(nom_envase <>"" or nom_envase is not null, nom_envase,"No aplica"), nom_envase) AS nom_envase,'+
             '(d.costo*d.tc) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
             '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))*d.tc,2) as Total '+
             'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve where concat(d.serie, d.idnc) = "' + idpedido + '" '+
             'order by d.cod_cve asc) as t', 0, sqlgeneral8);
  end
  else
  begin
    if TipoCFD = 'FA' then
      querys('select cod_cve, descripcion, cant,  nom_envase,  '+
             'round(if(1<>'+usaIEPS+', costo, costo/1.'+pIEPS+'),2) as costo, '+
             'round(if(1<>'+usaIEPS+', costo, round( costo/1.'+pIEPS+',2))*cant,2) as Total  from ('+
             'select a.cod_cve, a.nombre as descripcion, d.cant, '+
             //'if(a.unidades_caja > 0, "CAJA", "PIEZAS") as nom_envase, '+
             //'if(a.inventariable=0, "No aplica", nom_envase) as nom_envase, '+
             'IF (a.inventariable = 0, if(nom_envase <>"" or nom_envase is not null, nom_envase,"No aplica"), nom_envase) AS nom_envase,'+
             '(d.costo) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
             '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas)),2) as Total '+
             'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve where d.idpedido = ' + idpedido + ' '+
             'order by d.cod_cve asc) as t', 0, sqlgeneral8);

    if TipoCFD = 'NC' then
      querys('select cod_cve, descripcion, cant,  nom_envase,  '+
             'round(if(1<>'+usaIEPS+', costo, costo/1.'+pIEPS+'),2) as costo, '+
             'round(if(1<>'+usaIEPS+', costo, round( costo/1.'+pIEPS+',2))*cant,2) as Total  from ('+
             'select a.cod_cve, a.nombre as descripcion, d.cant, '+
             //'if(a.unidades_caja > 0, "CAJA", "PIEZAS") as nom_envase, '+
             //'if(a.inventariable=0, "No aplica", nom_envase) as nom_envase, '+
             'IF (a.inventariable = 0, if(nom_envase <>"" or nom_envase is not null, nom_envase,"No aplica"), nom_envase) AS nom_envase,'+
             '(d.costo) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
             '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas)),2) as Total '+
             'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve '+
             'where concat(d.serie, d.idnc) = "' + idpedido + '" '+
             'order by d.cod_cve asc) as t', 0, sqlgeneral8);
  end;

  sqlgeneral8.First;
  while not sqlgeneral8.Eof = true do
  begin
   { if usaIEPS = '1' then
      begin
      costoart:= trim(Format('%8.2f',[sqlgeneral8.fieldbyname('costo').AsFloat/(1+(strtofloat(pIEPS)/100))]));
      //totalart :=  trim(Format('%8.2f',[sqlgeneral8.fieldbyname('cant').AsInteger*(sqlgeneral8.fieldbyname('costo').AsFloat/(1+(strtofloat(pIEPS)/100)))]));
      totalart :=  trim(Format('%8.2f',[sqlgeneral8.fieldbyname('cant').AsInteger*strtofloat(costoart)]));
      end
    else
      begin   }
      costoart:= trim(Format('%8.2f',[sqlgeneral8.fieldbyname('costo').AsFloat]));
      totalart := trim(Format('%8.2f',[sqlgeneral8.fieldbyname('Total').AsFloat]));
    //  end;

    Detalle := //Detalle +
               SentenceCase(sqlgeneral8.fieldbyname('descripcion').AsString) + '|' + sqlgeneral8.fieldbyname('cant').AsString + '|' +
               SentenceCase(sqlgeneral8.fieldbyname('nom_envase').AsString) + '|' + costoart + '|' +
               totalart + '|' +  '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + sqlgeneral8.fieldbyname('cod_cve').AsString + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' ;

               //chr(13);
    if sqlgeneral8.Bof then
      memo.lines.Add('¬' + Detalle)
    else
      memo.lines.Add(Detalle);
    sqlgeneral8.Next;
  end;

  //IMPUESTOS
  Impuestos := '¬' + 'TR' + '|' + 'IVA' +  '|' + IVA +  '|' + PIVA ;//+ chr(13);
  memo.Lines.Add(Impuestos);

  if usaIEPS = '1' then
  begin
    pIEPS := trim(Format('%8.2f',[strtofloat(pIEPS)]));
    Impuestos := 'TR' + '|' + 'IEPS' +  '|' + IEPS +  '|' + pIEPS ;//;
    memo.Lines.Add(Impuestos);
  end;




  if directo = true then
  begin
    memo.Lines.SaveToFile(Getconfiguraciones('FEPathEntrada', true)+uppercase(Serie)+folio+'-'+idcliente+'-'+idpedido+'.txt');
    case ValidaFacturaElectronica(false, Getconfiguraciones('FEPathEntrada', true)+uppercase(Serie)+folio+'-'+idcliente+'-'+idpedido+'.txt', uppercase(Serie),folio) of
        0: //El archivo no se ha procesado
           showmessage('El archivo no se ha procesado. Revise que el servicio de EkoCFD este iniciado');
        1: //El archivo tuvo problemas
           begin
           showmessage('El archivo contiene errores. REVISAR si se tiene que regresar a Remision');
           //RegresarARemision(idpedido, idcliente);
           end;
        2: //Especie de error P
           begin
           showmessage('El archivo tiene errores. REVISAR si se tiene que regresar a Remision');
           //RegresarARemision(idpedido, idcliente);
           end;
        3: //Exito
           showmessage('Se proceso electronica y exitosamente');
        4: //no se encontro el archivo
           begin
           showmessage('No se encontro el archivo. REVISAR si se tiene que regresar a Remision');
           //RegresarARemision(idpedido, idcliente);
           end;
      end;
  end;
  result := memo.Text;
  memo.Free;
  end; // with
end;

function FacturaElectronicaDlls(idcliente, idpedido, formapago, Estado, TipoCFD:string; directo:boolean; pesos:boolean = false; imprimir :boolean = true):string;
{var Encabezado, Detalle, Impuestos, Folio, serie, SubTotal, IVA, PIVA, Total, rfc, impresora,
    concepto, Letra, dec, formaPAgo,  FXComprobante, factura, iddoc, email,          //  tabla,
    VersionFE, AnoAprobacion, NumAprobacion, subtotalpesos, ivapesos, totalpesos,
    TipoCambio, FechaFactura, tmpser, regimen,
    misc01,  misc02, misc03, misc04, misc05, misc06, misc07, misc08, misc09, misc10, misc11, misc12, misc13, misc14, misc15 :string;
    memo :Tmemo;
    otrasseries : TStringList;     }
begin
  FacturaElectronica(idcliente, idpedido, formapago, Estado, TipoCFD, directo, pesos, imprimir);
  {
memo := tmemo.Create(nil);
memo.Parent := frmprincipal;
memo.visible := false;
memo.Text := '';

Encabezado := ''; Detalle := ''; Impuestos := '';

with dmreportes do
  begin
  if TipoCFD = 'FA' then
    begin
    querys('Select idfactura, FechaFactura from pedidos where idpedido = '+idpedido, 0, sqlgeneral7);
    factura := sqlgeneral7.fieldbyname('idfactura').asstring;
    FechaFactura := sqlgeneral7.fieldbyname('FechaFactura').asstring;
    SeparaSerieFolio(factura, Serie, Folio);
    iddoc := idpedido;
    FXComprobante := 'ingreso';  //importante minusculas
    end;

  if TipoCFD = 'NC' then
    begin
    querys('Select idfactura, letras, FechaNc from NotasCredito join FoliosFE where concat(serie, idnc) = "'+idpedido+'" and procedencia = "NOTA CRED"', 0, sqlgeneral7);
    factura := sqlgeneral7.fieldbyname('letras').asstring + idpedido;
    FechaFactura := sqlgeneral7.fieldbyname('FechaNc').asstring;
    serie :=  sqlgeneral7.fieldbyname('letras').asstring;
    Folio := sqlgeneral7.fieldbyname('idnc').asstring;
    iddoc := sqlgeneral7.fieldbyname('idfactura').asstring;
    FXComprobante := 'egreso';  //importante minusculas
    end;


  //ENCABEZADO

  querys('Select VersionFE, AnoAprobacion, NumAprobacion from FoliosFE where letras = "'+Serie+'"', 0, sqlgeneral7);
  VersionFE := sqlgeneral7.fieldbyname('VersionFE').asstring;
  AnoAprobacion := sqlgeneral7.fieldbyname('AnoAprobacion').asstring;
  NumAprobacion := sqlgeneral7.fieldbyname('NumAprobacion').asstring;

  //Datos Empresa
  sqlDatosEmpresa.Open;
  //1-41
  Encabezado := '~' + Folio + '|' + TitleCase(sqlDatosEmpresanombre.AsString) + '|' + AnsiReplaceStr(sqlDatosEmpresarfc.AsString, '-', '') + '|' + SentenceCase(sqlDatosEmpresaCalle.AsString) +
                '|' + sqlDatosEmpresaNumero.AsString + '|' + '|' + TitleCase(sqlDatosEmpresaColonia.AsString) + '|' + '|' + '|' +
                SentenceCase(sqlDatosEmpresaciudad.AsString)+ '|' + TitleCase(sqlDatosEmpresaestado.AsString) + '|' +
                SentenceCase(GetConfiguraciones('pais', true)) + '|' + sqlDatosEmpresaCP.AsString +
                '|' + sqlDatosEmpresatelefono.AsString + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                VersionFE + '|' + Serie + '|' + NumAprobacion + '|' + 'en una sola exhibicion' +
                '|' + FormatDateTime('yyyy-mm-dd', strtodate(FechaFactura)) + '|' + FormatDateTime('hh:mm:ss', time) +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' ;

  sqlDatosEmpresa.Close;

  //Datos del cliente
  querys('Select '+ClienteNombre('cf')+' as nombre, RFCCres, cf.dir, cf.numero, col.nombre as colonia, col.cp, '+
         'e.nombre as estado, m.nombre as municipio, Left(g.nombre,12) as giro, left(u.codigo,4) as vendedor, c.sector, '+
         '"" as responsable, "" as puesto, t.telefono, if(c.email like "%@%", c.email, "") as email '+
         'from clientes c left join contactos con on con.idcontacto=c.idcontacto and procedencia = "clientes" '+
         'left join ClientesFact cf on c.idfact=cf.idfact Left join colonias col on col.idcol = cf.idcol '+
         'Left join municipios m on m.idmnp=col.idmnp Left join estados e on e.idestado = col.idestado '+
         'Left join giros g on c.idgiro = g.idgiro left join usuarios u on u.idusuario=c.idvendedor '+
         'Left join telefonos t on t.idtel=c.idtel '+
         'where c.idcliente = '+idcliente+' group by c.idcliente', 0, sqlgeneral8);
  rfc := trim(AnsiReplaceStr(sqlgeneral8.fieldbyname('RFCCres').AsString, '-', ''));
  email := sqlgeneral8.fieldbyname('email').AsString;

  //42-53
  Encabezado := Encabezado + UpperCase(sqlgeneral8.fieldbyname('nombre').AsString) + '|' + RFC +
                '|' +  UpperCase(sqlgeneral8.fieldbyname('dir').AsString) + '|' + sqlgeneral8.fieldbyname('numero').AsString + '|' + '|' +
                 UpperCase(sqlgeneral8.fieldbyname('colonia').AsString) + '|' + '|' + '|' +
                 UpperCase(sqlgeneral8.fieldbyname('municipio').AsString) +','+ '|' +
                 UpperCase(sqlgeneral8.fieldbyname('estado').AsString) + '|' +  UpperCase(GetConfiguraciones('Pais', true)) +
                '|' + sqlgeneral8.fieldbyname('cp').AsString + '|' ;


  //Datos del monto
  if TipoCFD = 'FA' then
  querys('select p.TipoCambio, p.piva, round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))),2) as SubTotal, '+

         'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * p.piva, 2 ) as Impuesto, '+

         'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + p.piva), 2 ) as Total, '+

         'letras(round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + p.piva), 2 ), "DOLARES") as letras, '+

         'p.concepto '+

         'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve left join pedidos p '+
         'on p.idpedido = d.idpedido where d.idpedido = ' + idpedido + ' group by p.idpedido order by d.cod_cve asc', 0, sqlgeneral7);

  if TipoCFD = 'NC' then
  querys('select nc.TipoCambio, nc.piva, round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))),2) as SubTotal, '+

         'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * nc.piva, 2 ) as Impuesto, '+

         'round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + nc.piva), 2 ) as Total, '+

         'letras(round(sum( if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + '+
         '((((d.costo/a.piezasxunidad) - ((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, '+
         '( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas))  ) * (1 + nc.piva), 2 ), "DOLARES") as letras, '+

         'nc.observaciones as concepto '+

         'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve left join NotasCredito nc '+
         'on nc.idnc = d.idnc where concat(d.serie, d.idnc) = "' + idpedido + '" group by nc.idnc order by d.cod_cve asc', 0, sqlgeneral7);

  SubTotal := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Subtotal').AsFloat]));
  IVA := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Impuesto').AsFloat]));
  Total := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('Total').AsFloat]));
  PIVA := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('piva').AsFloat * 100]));

  TipoCambio := trim(Format('%8.2f',[sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));
  subtotalpesos := trim(Format('%8.2f',[strtofloat(SubTotal)*sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));
  ivapesos := trim(Format('%8.2f',[strtofloat(IVA)*sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));
  totalpesos := trim(Format('%8.2f',[strtofloat(Total)*sqlgeneral7.fieldbyname('TipoCambio').AsFloat]));

  concepto := AnsiReplaceStr(AnsiReplaceStr(sqlgeneral7.fieldbyname('concepto').AsString, char(#10), ''), char(#13),' ');
  Letra := uppercase(sqlgeneral7.fieldbyname('letras').AsString);


  //IMPRESORA
  querys('Select letras from FoliosFE fe left join puestos p on p.idpuesto =fe.idproc where letras = "'+serie+'" and '+
         '((procedencia = "PUESTO" and p.nombre = "CAJERA") or procedencia = "AUXILIAR" )', 0, dmreportes.sqlgeneral3);
  if dmreportes.sqlgeneral3.FieldByName('letras').AsString = serie then
    impresora := GetConfiguraciones('ImpresoraCajaFE', true)
  else
    begin
    querys('Select letras from FoliosFE fe left join puestos p on p.idpuesto =fe.idproc left join areas a on '+
           'a.idarea=p.idarea where procedencia = "PUESTO" '+
           'and p.nombre = "GERENTE" and a.nombre = "COBRANZA" and letras = "'+serie+'"', 0, dmreportes.sqlgeneral3);
    if dmreportes.sqlgeneral3.FieldByName('letras').AsString = serie then
      impresora := GetConfiguraciones('ImpresoraLotesFE', true)
    else
      impresora := GetConfiguraciones('ImpresoraFE', true);
    end;

  //Letra := '(' + uppercase(NumToLetras.Letras) + ' DOLARES ' + dec + '/100)';

  Encabezado := Encabezado + SubTotal + '|' + IVA + '|' + Total + '|' + Estado + '|' + TipoCFD + '|' + '|' ;

  //Adenda
  //54 - 193

    //Miscelaneos
  misc01 := idcliente;
  misc02 := UpperCase(sqlgeneral8.fieldbyname('giro').AsString);
  misc03 := UpperCase(sqlgeneral8.fieldbyname('responsable').AsString);
  misc04 := UpperCase(sqlgeneral8.fieldbyname('puesto').AsString);
  misc05 := trim(iddoc);
  misc06 := FormaPago;
  misc07 := sqlgeneral8.fieldbyname('vendedor').AsString;
  misc08 := sqlgeneral8.fieldbyname('sector').AsString;
  misc09 := '';
  misc10 := concepto;
  misc11 := trim(sqlgeneral8.fieldbyname('telefono').AsString);
  misc12 := '';
  misc13 := '';
  misc14 := '';
  misc15 := impresora;

  if VersionFE <> '2.0' then
    begin
    misc07 := impresora;
    misc15 := '1';
    end;

    otrasseries := TStringList.Create;
  //verificar si es formato diferente
  tmpser :=  GetConfiguraciones('OtroFormatoFE');
  split(',', tmpser, otrasseries);
  for i := 0 to otrasseries.Count -1 do
  begin
     if otrasseries[i] = serie then
       misc12 := '['+serie+']';
  end;

  regimen := GetConfiguraciones('regimenfiscal');

  Encabezado := Encabezado + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + 'USD' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + letra + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +

                //idcliente + '|' +
                //UpperCase(sqlgeneral8.fieldbyname('giro').AsString) + '|' + UpperCase(sqlgeneral8.fieldbyname('responsable').AsString) + '|' +
                //UpperCase(sqlgeneral8.fieldbyname('puesto').AsString) + '|' + trim(iddoc) + '|' + FormaPago + '|' +
                //sqlgeneral8.fieldbyname('vendedor').AsString + '|' + sqlgeneral8.fieldbyname('sector').AsString +
                //'|' + '|' + concepto + '|' + trim(sqlgeneral8.fieldbyname('telefono').AsString) + '|' + '|' + '|' + '|' + impresora +

                misc01 + '|' + misc02 + '|' + misc03 + '|' + misc04 + '|' + misc05 + '|' + misc06 + '|' +
                misc07 + '|' + misc08 + '|' + misc09 + '|' + misc10 + '|' + misc11 + '|' + misc12 + '|' +
                misc13 + '|' + misc14 + '|' + misc15 +

                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + email + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + subtotalpesos + '|' + ivapesos + '|' + totalpesos + '|' + '|' + '|' + '|' + '|' +
                '|' + piva + '|' + '|' +
                '|' + '|' + regimen + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + TipoCambio + '|' + '|' + '|' +
                '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
                AnoAprobacion + '|' + '|' + '|' + FXComprobante + '|'+ '|' +
                IVA ; //+ chr(13) ;
  memo.Lines.Add(Encabezado);
  //DETALLE FACTURA

  if TipoCFD = 'FA' then
  querys('select a.cod_cve, a.nombre as descripcion, d.cant, if(a.unidades_caja > 0, "CAJA", "PIEZAS") as nom_envase, '+
         '(d.costo) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
         '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas)),2) as Total '+
         'from DetPedido as d inner join articulos as a on d.cod_cve = a.cod_cve where d.idpedido = ' + idpedido + ' '+
         'order by d.cod_cve asc', 0, sqlgeneral8);

  if TipoCFD = 'NC' then
  querys('select a.cod_cve, a.nombre as descripcion, d.cant, if(a.unidades_caja > 0, "CAJA", "PIEZAS") as nom_envase, '+
         '(d.costo) as costo, round(if (a.aplica_desc = 1, (((d.costo-(d.costo*a.desc_esp/100)) )*d.cant) + ((((d.costo/a.piezasxunidad) - '+
         '((d.costo/a.piezasxunidad)*a.desc_esp/100))))*d.piezas, ( d.costo*d.cant ) +((d.costo/a.piezasxunidad)*d.piezas)),2) as Total '+
         'from DetNotasCredito as d inner join articulos as a on d.cod_cve = a.cod_cve '+
         'where concat(d.serie, d.idnc) = "' + idpedido + '" '+
         'order by d.cod_cve asc', 0, sqlgeneral8);

  sqlgeneral8.First;
  while not sqlgeneral8.Eof = true do
    begin
    Detalle := //Detalle +
               SentenceCase(sqlgeneral8.fieldbyname('descripcion').AsString) + '|' + sqlgeneral8.fieldbyname('cant').AsString + '|' +
               SentenceCase(sqlgeneral8.fieldbyname('nom_envase').AsString) + '|' + trim(Format('%8.2f',[sqlgeneral8.fieldbyname('costo').AsFloat])) + '|' +
               trim(Format('%8.2f',[sqlgeneral8.fieldbyname('Total').AsFloat])) + '|' +  '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + sqlgeneral8.fieldbyname('cod_cve').AsString + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' +
               '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' + '|' ;

               //chr(13);
    if sqlgeneral8.Bof then
      memo.lines.Add('¬' + Detalle)
    else
      memo.lines.Add(Detalle);
    sqlgeneral8.Next;
    end;

  //IMPUESTOS
  Impuestos := '¬' + 'TR' + '|' + 'IVA' +  '|' + IVA +  '|' + PIVA ;//+ chr(13);
  memo.Lines.Add(Impuestos);


  if directo = true then
    begin
    memo.Lines.SaveToFile(Getconfiguraciones('FEPathEntrada', true)+uppercase(Serie)+folio+'-'+idcliente+'-'+idpedido+'.txt');
    case ValidaFacturaElectronica(false, Getconfiguraciones('FEPathEntrada', true)+uppercase(Serie)+folio+'-'+idcliente+'-'+idpedido+'.txt',uppercase(Serie),folio) of
        0,2: //El archivo no se ha procesado
           showmessage('El archivo no se ha procesado. Revise que el servicio de EkoCFD este iniciado');
        1: //El archivo tuvo problemas
           begin
           showmessage('El archivo contiene errores. REVISAR si se tiene que regresar a Remision');
           //RegresarARemision(idpedido, idcliente);
           end;
        3: //Exito
           showmessage('Se proceso electronica y exitosamente');
        4: //no se encontro el archivo
           begin
           showmessage('No se encontro el archivo. REVISAR si se tiene que regresar a Remision');
           //RegresarARemision(idpedido, idcliente);
           end;
      end;
    end;
  result := memo.Text;
  memo.Free;
  end; // with    }
end;

function CancelarFacturaElectronica(factura:string; directo:boolean):string;
var folio, serie:string;
    memo :Tmemo;
begin
memo := tmemo.Create(nil);
memo.Parent := frmprincipal;
memo.visible := false;
SeparaSerieFolio(factura, Serie, Folio);

with dmreportes do
  begin
  sqlDatosEmpresa.open;
  memo.Lines.Add( serie+ '|' + folio + '|' + AnsiReplaceStr(sqlDatosEmpresarfc.AsString, '-', '') + '|' +
            FormatDateTime('yyyy-mm-dd', today) + '|' + FormatDateTime('hh:mm:ss', time) + '|' + '|' +
            frmprincipal.ucprincipal.CurrentUser.Username +
             '|' +'|' +'|' +'|' +'|' );
  sqlDatosEmpresa.close;
  end;
if directo = true then
  begin
  memo.Lines.SaveToFile(Getconfiguraciones('FEPathEntrada', true)+uppercase(Serie)+folio+'.can');

case ValidaFacturaElectronica(false, Getconfiguraciones('FEPathEntrada', true)+uppercase(Serie)+folio+'.can', uppercase(Serie),folio) of
        0: //El archivo no se ha procesado
           showmessage('El archivo no se ha procesado. Revise que el servicio de EkoCFD este iniciado');
        1,2,4: //El archivo tuvo problemas
           begin
           showmessage('No se encontro el archivo. Favor de Deshacer la cancelacion');
           end;
        3: //Exito
           showmessage('Se proceso electronica y exitosamente');
        end;
  end;
result := memo.text;
memo.Free;
end;

function IsNumeric(const S: string): Boolean;
var
  P: PChar;
begin
  P      := PChar(S);
  Result := False;
  while P^ <> #0 do
  begin
    if not (P^ in ['0'..'9']) then Exit;
    Inc(P);
  Result := True;
  end;
end;

procedure SeparaSerieFolio(const idfactura:string; var Serie, Folio:string);
var i, h:integer;
begin
Folio := idfactura;
  h:= 0;
  for i:= 1 to Length(Folio) do
    begin
    if IsNumeric(Folio[i]) = true then
      begin
      h := i;
      break;
      end;
    end;
  Serie := AnsiLeftStr(Folio, h-1);
  Delete(Folio, 1, h-1);
end;

function ValidaFacturaElectronica(lotes:boolean; path, serie, folio:string):integer;
var idemisor:string;
begin
sleep(strtoint(GetConfiguraciones('FETimeOut', true)));
{
  0 //El archivo no se ha procesado
  1 //El archivo tuvo problemas
  2 //Especie de error P
  3 //Exito
  4 //no se encontro el archivo
}
try
   dmreportes.conexionFE.Connected := true;
   idemisor := GetConfiguraciones('EntidadId_Emisor',true);
   if querys('Select Serie_Comprobante, Folio From Tbl_FAK_CFD_Movimiento '+
          'Where Serie_Comprobante = '''+serie+''' and Folio = '+folio+' and EntidadId_Emisor='+idemisor, 0, dmreportes.sqlADO1) > 0 then
      result := 3
   else
      result := 1;

except



if lotes = false then
  begin
  if FileExists(path) then
    result := 0 //El archivo no se ha procesado
  else
    begin
    if (FileExists(AnsiReplaceStr(AnsiReplaceStr(path, 'txt', 'tx1'), 'Entrada', 'Procesados'))) OR (FileExists(AnsiReplaceStr(AnsiReplaceStr(path, 'txt', 'tx2'), 'Entrada', 'Procesados'))) OR (FileExists(AnsiReplaceStr(AnsiReplaceStr(path, 'txt', 'tx3'), 'Entrada', 'Procesados'))) then
          result := 3 //Exito
    else
      begin
      if FileExists(AnsiReplaceStr(path, 'txt', 'txp')) then
         begin
         result := 2; //Especie de error P
         end
      else
         begin
         if FileExists(AnsiReplaceStr(path, 'txt', 'txx')) then
            begin
            result := 1; //El archivo tuvo problemas
            end
         else
            begin
            if FileExists(AnsiReplaceStr(AnsiReplaceStr(path, 'txt', 'txX'), 'Entrada', 'Erroneos')) then
               begin
               //DeleteFile(AnsiReplaceStr(path, 'txt', 'txx'));
               result := 1; //El archivo tuvo problemas
               end
            else
               result := 4 //no se encontro el archivo
            end;
         end;
      end;
    end;
  end
else
  begin
  result := 6;
  end;
  end;
end;

procedure RegresarARemision(idpedido, idcliente:string);
var idfactura, serie, folio:string;
begin
with dmreportes do
  begin
  querys('Select idfactura from RemiFact where idpedido='+idpedido+' and idfactura <> "0"', 0, sqlgeneral3);
  idfactura := sqlgeneral3.fieldbyname('idfactura').AsString;
  SeparaSerieFolio(idfactura, Serie, Folio);
  querys('Update pedidos set estatus=3, idfactura ="0", FechaCierre="" where idpedido='+idpedido,1,sqlgeneral3);
  querys('Update PagosClientes set idfactura = "0" where idpedido ='+idpedido, 1, sqlgeneral5);
  querys('Delete from RemiFact where idpedido = '+idpedido+' and idfactura = "'+idfactura+'"', 1, sqlgeneral3);
  //if querys('Select folio from FoliosFE where letras="'+serie+'" and folio='+folio, 0, sqlgeneral6) = 1 then
    querys('update FoliosFE set folio=folio-1, usuario="'+frmprincipal.ucprincipal.CurrentUser.LoginName+'", '+
           'fecha = "'+datetostr(date)+'", hora="'+FormatDateTime('HH:mm:ss', time)+'" where letras="'+serie+'" '+
           'and folio ='+folio,1,sqlgeneral3);
  frmprincipal.ucprincipal.Log('Regreso a remision el Pedido '+idpedido,2);
  end;
end;


function RGBToColor(sColor : string) : TColor;
begin
   Result := RGB(StrToInt('$'+Copy(sColor, 1, 2)),StrToInt('$'+Copy(sColor, 3, 2)),StrToInt('$'+Copy(sColor, 5, 2))) ;
end;

function ValidarCelularSMS(tel:string) :string;
var cadena: string; //pos:integer;
begin
  cadena:= tel;
  cadena:= AnsiReplaceStr(cadena,' ','');
  cadena:= AnsiReplaceStr(cadena,'/','');
  cadena:= AnsiReplaceStr(cadena,'$','');
  cadena:= AnsiReplaceStr(cadena,'%','');
  cadena:= AnsiReplaceStr(cadena,'[a..z]','');
  cadena:= AnsiReplaceStr(cadena,'044-','');
  querys('select REPLACE(left("'+cadena+'",3),"001","") as c',0,DMREPORTES.sqlgeneral);
  cadena:=  dmreportes.sqlgeneral.fieldbyname('c').AsString;
  result:= cadena;
end;

function GetFamilyAddress(ipaddress:string):string;
var fam : string; i, c, p : integer;
begin
c := 0;  p:=0;
for i := 0  to length(ipaddress) do
begin
  if ipaddress[i] = '.' then
    inc(c);
  if c = 3 then
    begin
    p := i;
    inc(c);
    end;
end;

fam := LeftStr(ipaddress, p-1);
result := fam;
end;

function ValidarRFC(rfc : string; simsg : boolean = true):boolean;
var msg, persona, r1, r2, r3 : string;
    i, a, m, d : integer;
    f : TDate;
    ban : boolean;
begin

ban := true;

rfc := AnsiReplaceStr(rfc, '-', '');

if rfc = '' then
  begin
  msg := 'RFC esta vacio.';
  ban := false;
  end;

r1 := LeftStr(rfc, 4);
r3 := RightStr(rfc, 3);
if IsNumeric(RightStr(r1,1)) then
  begin
  persona := 'M';
  r1 := LeftStr(rfc, 3);
  r2 := MidStr(rfc, 4,6);
  end
else
  begin
  persona := 'F';
  r2 := MidStr(rfc, 5,6);
  end;

if persona = 'F' then
  begin
  if length(rfc) > 13 then
    begin
    msg := 'Hay un error en el RFC. La longitud es mayor a la correspondiente.';
    ban :=  false;
    end;
  end;

if persona = 'M' then
  begin
  if length(rfc) > 12 then
    begin
    msg := 'Hay un error en el RFC. La longitud es mayor a la correspondiente.';
    ban :=  false;
    end;
  end;

//verifica sea caracter el nombre
for i := 1 to length(r1) do
  begin
  if not (r1[i] in ['a'..'z', 'A'..'Z']) then
    begin
    msg := 'Hay un error en el RFC. Con la letra "' + r1[i] + '" Posicion ' + inttostr(i+1);
    ban :=  false;
    end;
  end;

//verifica la fecha
try
  a := 2000 + strtoint(MidStr(r2, 0, 2));
  m := strtoint(MidStr(r2, 3, 2));
  d := strtoint(MidStr(r2, 5, 2));
  f := EncodeDate(a, m, d);
except
  msg := 'Hay un error en el RFC. Con la fecha "' + datetostr(f) + '"';
  ban :=  false;
end;

   {
//verifica la homoclave
for i := 1 to length(r3)-1 do
  begin
  if not (r3[i] in ['a'..'z', 'A'..'Z']) then
    begin
    msg := 'Hay un error en el RFC. Con la letra "' + r3[i] + '" Posicion ' + inttostr(i+1);
    ban :=  false;
    end;
  end;     }

if IsNumeric(RightStr(r3,1)) = false then
  begin
  msg := 'El ultimo digito debe ser numerico';
  ban :=  false;
  end;

if (simsg) and (ban = false) then
  Application.MessageBox(pchar(msg), 'Atencion RFC', MB_ICONINFORMATION);
  
result := ban;

end;

function UFH(tabla:TDataSet):string;
begin
if tabla.fieldbyname('usuario').AsString = '' then
  result := ''
else
  result := 'Modificado por '+tabla.fieldbyname('usuario').AsString+' el '+tabla.fieldbyname('fecha').AsString+' '+tabla.fieldbyname('hora').AsString;
end;

procedure Split(const Delimiter: Char; Input: string; const Strings: TStrings) ;
begin
   Assert(Assigned(Strings)) ;
   Strings.Clear;
   Strings.Delimiter := Delimiter;
   Strings.DelimitedText := Input;
end;


function MergeFiles(FileName1, FileName2, FileNameOut : string):boolean;
var
  path, s, action, fileParams, outfileParams, actionParams: string;
  succeeded: boolean;
begin
  path := ExtractFilePath(Application.ExeName);
  if not FileExists(path+'pdftk.exe') then
  begin
    application.MessageBox('pdftk.exe does not exist in the application folder.',
    pchar(application.Title), MB_ICONSTOP);
    result := false;
  end;

  fileParams := format('A="%s" B="%s"', [FileName1, FileName2]);
  actionParams := 'A B';

  s := format('"%spdftk.exe" %s cat %s output "%s"  dont_ask', [path, fileParams, actionParams, FileNameOut]);
  succeeded := executeCommand(s);
  result := succeeded;
end;


function ExecuteCommand(const command: string): boolean;
var
  resultStr, ErrorMessage : string;
  ErrorNum: DWORD;
begin
  //showmessage(command); //debugging only
  screen.Cursor := crHourGlass;
  application.ProcessMessages;
  try
    ErrorNum := WinExecAndWait32(command, SW_HIDE, 0, resultStr);
    result := ErrorNum = 0;
    if not result then
      ErrorMessage := resultStr;
  finally
    screen.Cursor := crDefault;
  end;
end;

function WinExecAndWait32(const DosCommand: string;
  ShowWindow, GiveUpTimeOutSecs: Word; out textOutput: string): DWord;
const
  BufferSize = 8192;
var
  StartUpInfo:TStartupInfo;
  ProcessInfo:TProcessInformation;
  OutputReadPipeHdl, OutputWritePipeHdl: THandle;
  SecAttribs: TSecurityAttributes;
  Buffer: PChar;
  timeCnt, BytesRead, BytesAvailable, WaitResult: DWord;
  PipeCreated, ProcessCreated: boolean;

begin
  //nb: 1. The max command line length for CreateProcess() is 32767 characters.

  Result := DWORD(-1); //ie result when unable to create process

  if GiveUpTimeOutSecs = 0 then
    GiveUpTimeOutSecs := $FFFF; //(ie about 18hrs so not quite never :))

  SecAttribs.nLength := SizeOf(TSecurityAttributes) ;
  SecAttribs.bInheritHandle := true;
  SecAttribs.lpSecurityDescriptor := nil;

  PipeCreated := CreatePipe(OutputReadPipeHdl,
    OutputWritePipeHdl, @SecAttribs, BufferSize);

  StartUpInfo.cb := Sizeof(StartUpInfo);
  StartUpInfo.wShowWindow := ShowWindow;

  Buffer := AllocMem(BufferSize + 1);
  try
    if PipeCreated then
    begin
      fillChar( startUpInfo, sizeof(startUpInfo), 0);
      startUpInfo.dwFlags := STARTF_USESHOWWINDOW or STARTF_USESTDHANDLES;
      startUpInfo.hStdInput := 0;
      startUpInfo.hStdOutput := OutputWritePipeHdl;
      startUpInfo.hStdError := OutputWritePipeHdl;
      ProcessCreated := CreateProcess(nil, PChar(DosCommand),
        @SecAttribs, @SecAttribs, true, NORMAL_PRIORITY_CLASS,
        nil, nil, startUpInfo, ProcessInfo);
      textOutput := '';
    end else
    begin
      startUpInfo.dwFlags := STARTF_USESHOWWINDOW;
      ProcessCreated := CreateProcess(nil, PChar(DosCommand),
        nil, nil, false, NORMAL_PRIORITY_CLASS or CREATE_NEW_CONSOLE,
        nil, nil, startUpInfo, ProcessInfo);
    end;

    if ProcessCreated then
    begin
      timeCnt := 0;
      repeat
        WaitResult := WaitForSingleObject(ProcessInfo.hProcess, 100) ;

        if PipeCreated then
        begin
          //nb: a full pipe buffer would cause an endless loop ...
          if not PeekNamedPipe(OutputReadPipeHdl,
            nil, 0, nil, @BytesAvailable, nil) then break;
          if (BytesAvailable > 0) then
          begin
            //Interestingly, it appears that if the default pipe buffer is larger
            //that that supplied in CreatePipe(), then the default size is used.
            BytesRead := 0;
            if BytesAvailable > BufferSize then
              ReadFile(OutputReadPipeHdl, Buffer[0], BufferSize, BytesRead, nil)
            else
              ReadFile(OutputReadPipeHdl, Buffer[0], BytesAvailable, BytesRead, nil);
            Buffer[BytesRead]:= #0;
            OemToAnsi(Buffer, Buffer) ;
            textOutput := textOutput + Buffer;
          end;
        end;

        Application.ProcessMessages;
        inc(timeCnt, 100);
      until (WaitResult <> WAIT_TIMEOUT) or (timeCnt > GiveUpTimeOutSecs *1000);

      if not GetExitCodeProcess(ProcessInfo.hProcess, Result)
        and (result = STILL_ACTIVE) then
          TerminateProcess(ProcessInfo.hProcess, result);

      CloseHandle( ProcessInfo.hProcess );
      CloseHandle( ProcessInfo.hThread );
    end;

    if PipeCreated then
    begin
      CloseHandle(OutputWritePipeHdl);
      CloseHandle(OutputReadPipeHdl);
    end;
  finally
    FreeMem(Buffer) ;
  end;
end;

End.




